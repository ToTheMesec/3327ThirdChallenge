{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\Luka\\\\Desktop\\\\SaveChildrenV2.0\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\Luka\\\\Desktop\\\\SaveChildrenV2.0\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Luka\\\\Desktop\\\\SaveChildrenV2.0\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\Luka\\\\Desktop\\\\SaveChildrenV2.0\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Luka\\\\Desktop\\\\SaveChildrenV2.0\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Luka\\\\Desktop\\\\SaveChildrenV2.0\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Luka\\\\Desktop\\\\SaveChildrenV2.0\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Luka\\\\Desktop\\\\SaveChildrenV2.0\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Luka\\\\Desktop\\\\SaveChildrenV2.0\\\\src\\\\pages\\\\Campaign.js\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport SupportChildren from '../abis/SupportChildren.json';\nimport '../components/App.css';\nimport ReactDOM from \"react-dom\";\nimport emailjs from 'emailjs-com';\nimport NFT from '../abis/NFT.json';\n\nvar Campaign = /*#__PURE__*/function (_Component) {\n  _inherits(Campaign, _Component);\n\n  function Campaign(props) {\n    var _this;\n\n    _classCallCheck(this, Campaign);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Campaign).call(this, props));\n\n    _this.donate = function () {\n      _this.state.contract.methods.donate(parseInt(_this.state.campaign.id), _this.state.email).send({\n        from: _this.state.account,\n        value: parseFloat(_this.state.amount) * Math.pow(10, 18)\n      }).once('receipt', function (receipt) {\n        _this.mintNFT(JSON.stringify(receipt));\n      }).then(function () {\n        var templateParams = {\n          user_email: _this.state.email,\n          donation_amount: _this.state.amount,\n          campaign_name: _this.state.campaign.name\n        };\n        emailjs.send('service_7ksffb7', 'template_4nal1hg', templateParams, 'user_2AtKMM5Ljcoy0GZ33Dhia').then(function (response) {\n          console.log('SUCCESS!', response.status, response.text);\n        }, function (error) {\n          console.log('FAILED...', error);\n        });\n        var amount1 = parseFloat(_this.state.amount) * Math.pow(10, 18);\n\n        if (parseInt(_this.state.campaign.raised) - amount1 < parseInt(_this.state.campaign.goal) && parseInt(_this.state.campaign.raised) + amount1 >= parseInt(_this.state.campaign.goal)) {\n          _this.alertEveryone();\n        }\n      });\n    };\n\n    _this.donateETH = function () {\n      _this.state.contract.methods.donateETH(0).send({\n        from: _this.state.account,\n        value: parseFloat(_this.state.amount) * Math.pow(10, 18)\n      });\n    };\n\n    _this.mintNFT = function (receipt) {\n      _this.state.contractNFT.methods.mint(receipt).send({\n        from: _this.state.account\n      });\n    };\n\n    _this.state = {\n      contract: null,\n      contractNFT: null,\n      account: '',\n      campaign: '',\n      amount: '',\n      email: '',\n      date: ''\n    };\n    return _this;\n  }\n\n  _createClass(Campaign, [{\n    key: \"updateEmail\",\n    value: function updateEmail(evt) {\n      this.setState({\n        email: evt.target.value\n      });\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n                _context.next = 6;\n                return this.loadNFT();\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context2.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context2.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n                }\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var web3, accounts, networkId, networkData, address, abi, contract, lastItem, campaign;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3; // Load account\n\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context3.sent;\n                this.setState({\n                  account: accounts[0]\n                });\n                _context3.next = 7;\n                return web3.eth.net.getId();\n\n              case 7:\n                networkId = _context3.sent;\n                networkData = SupportChildren.networks[networkId];\n\n                if (!networkData) {\n                  _context3.next = 20;\n                  break;\n                }\n\n                address = networkData.address;\n                abi = SupportChildren.abi;\n                contract = new web3.eth.Contract(abi, address);\n                lastItem = window.location.pathname.split(\"/\").pop();\n                _context3.next = 16;\n                return contract.methods.campaigns(parseInt(lastItem)).call();\n\n              case 16:\n                campaign = _context3.sent;\n                this.setState({\n                  contract: contract,\n                  campaign: campaign,\n                  date: campaign.timeCreated\n                });\n                _context3.next = 21;\n                break;\n\n              case 20:\n                window.alert('Smart contract not deployed to detected network');\n\n              case 21:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }() // async printDonors(){\n    //     const mainDiv = document.getElementById('donors')\n    //     const len = await this.state.contract.methods.getDonorsLength(this.state.campaign.id).call()\n    //     const donors = await this.state.contract.methods.getDonors(this.state.campaign.id).call()\n    //     for(var i =0;i<Math.min(3, len);i++){\n    //         const donation = donors[i]\n    //         const li = document.createElement('li')\n    //         const image = document.createElement('img')\n    //         image.src = \"https://cdn.discordapp.com/attachments/837326649074516048/867532401155899421/ethlogo.png\"\n    //         const p = document.createElement('p')\n    //         p.innerHTML = donation.amount/(10**18) + \" ETH\"\n    //         const h = document.createElement('h3')\n    //         h.innerHTML = donation.from\n    //         li.appendChild(image)\n    //         li.appendChild(p)\n    //         li.appendChild(h)\n    //         mainDiv.appendChild(li)\n    //     }\n    // }\n\n  }, {\n    key: \"loadNFT\",\n    value: function () {\n      var _loadNFT = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var web3, accounts, networkId, networkData, address, abiNFT, contractNFT, rec;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                web3 = window.web3; // Load account\n\n                _context4.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context4.sent;\n                _context4.next = 6;\n                return web3.eth.net.getId();\n\n              case 6:\n                networkId = _context4.sent;\n                networkData = NFT.networks[networkId];\n\n                if (!networkData) {\n                  _context4.next = 18;\n                  break;\n                }\n\n                address = networkData.address;\n                abiNFT = NFT.abi;\n                contractNFT = new web3.eth.Contract(abiNFT, address);\n                _context4.next = 14;\n                return contractNFT.methods.print().call();\n\n              case 14:\n                rec = _context4.sent;\n                this.setState({\n                  contractNFT: contractNFT\n                });\n                _context4.next = 19;\n                break;\n\n              case 18:\n                window.alert('Smart contract not deployed to detected network');\n\n              case 19:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function loadNFT() {\n        return _loadNFT.apply(this, arguments);\n      }\n\n      return loadNFT;\n    }()\n  }, {\n    key: \"upadateAmount\",\n    value: function upadateAmount(evt) {\n      this.setState({\n        amount: evt.target.value\n      });\n    }\n  }, {\n    key: \"sendEmail\",\n    value: function sendEmail(e) {\n      e.preventDefault();\n    }\n  }, {\n    key: \"alertEveryone\",\n    value: function () {\n      var _alertEveryone = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var mails, mailsSet, len, i, templateParams;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.state.contract.methods.getMailsById(this.state.campaign.id).call();\n\n              case 2:\n                mails = _context5.sent;\n                mailsSet = _toConsumableArray(new Set(mails));\n                len = mails.length;\n\n                for (i = 0; i < len; i++) {\n                  templateParams = {\n                    user_email: mailsSet[i],\n                    campaign_name: this.state.campaign.name\n                  };\n                  emailjs.send('service_51ifv2q', 'template_3ai231s', templateParams, 'user_AzzxvRUXgtcUIpvSjfoOA').then(function (response) {\n                    console.log(\"SUCCESS!\", response.status, response.text);\n                  }, function (error) {\n                    console.log('FAILED...', error);\n                  });\n                }\n\n              case 6:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function alertEveryone() {\n        return _alertEveryone.apply(this, arguments);\n      }\n\n      return alertEveryone;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 13\n        }\n      });\n    }\n  }]);\n\n  return Campaign;\n}(Component);\n\nexport default Campaign;","map":{"version":3,"sources":["C:/Users/Luka/Desktop/SaveChildrenV2.0/src/pages/Campaign.js"],"names":["React","Component","Web3","SupportChildren","ReactDOM","emailjs","NFT","Campaign","props","donate","state","contract","methods","parseInt","campaign","id","email","send","from","account","value","parseFloat","amount","once","receipt","mintNFT","JSON","stringify","then","templateParams","user_email","donation_amount","campaign_name","name","response","console","log","status","text","error","amount1","raised","goal","alertEveryone","donateETH","contractNFT","mint","date","evt","setState","target","loadWeb3","loadBlockchainData","loadNFT","window","ethereum","web3","enable","currentProvider","alert","eth","getAccounts","accounts","net","getId","networkId","networkData","networks","address","abi","Contract","lastItem","location","pathname","split","pop","campaigns","call","timeCreated","abiNFT","print","rec","e","preventDefault","getMailsById","mails","mailsSet","Set","len","length","i"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Web3 from 'web3';\r\nimport SupportChildren from '../abis/SupportChildren.json'\r\nimport '../components/App.css';\r\nimport ReactDOM from \"react-dom\";\r\nimport emailjs from 'emailjs-com';\r\nimport NFT from '../abis/NFT.json';\r\n\r\nclass Campaign extends Component{\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            contract: null,\r\n            contractNFT: null,\r\n            account: '',\r\n            campaign: '',\r\n            amount: '',\r\n            email: '',\r\n            date: ''\r\n        }\r\n    }\r\n\r\n    updateEmail(evt) {\r\n        this.setState({\r\n            email: evt.target.value\r\n        })\r\n\r\n    }\r\n\r\n    async componentWillMount() {\r\n        await this.loadWeb3()\r\n        await this.loadBlockchainData()\r\n        // await this.printDonors()\r\n        await this.loadNFT()\r\n    }\r\n\r\n\r\n    async loadWeb3() {\r\n        if (window.ethereum) {\r\n            window.web3 = new Web3(window.ethereum)\r\n            await window.ethereum.enable()\r\n        }\r\n        else if (window.web3) {\r\n            window.web3 = new Web3(window.web3.currentProvider)\r\n        }\r\n        else {\r\n            window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\r\n        }\r\n    }\r\n\r\n\r\n    async loadBlockchainData() {\r\n        const web3 = window.web3\r\n        // Load account\r\n        const accounts = await web3.eth.getAccounts()\r\n        this.setState({account: accounts[0]})\r\n\r\n        const networkId = await web3.eth.net.getId()\r\n        const networkData = SupportChildren.networks[networkId]\r\n\r\n        if(networkData) {\r\n            const address = networkData.address\r\n            const abi = SupportChildren.abi\r\n            const contract = new web3.eth.Contract(abi, address)\r\n\r\n            const lastItem = window.location.pathname.split(\"/\").pop()\r\n            const campaign = await contract.methods.campaigns(parseInt(lastItem)).call()\r\n\r\n\r\n            this.setState({ \r\n                contract: contract, \r\n                campaign: campaign,\r\n                date: campaign.timeCreated\r\n            })\r\n\r\n        } else {\r\n            window.alert('Smart contract not deployed to detected network')\r\n        }\r\n\r\n    }\r\n\r\n    // async printDonors(){\r\n    //     const mainDiv = document.getElementById('donors')\r\n    //     const len = await this.state.contract.methods.getDonorsLength(this.state.campaign.id).call()\r\n    //     const donors = await this.state.contract.methods.getDonors(this.state.campaign.id).call()\r\n    //     for(var i =0;i<Math.min(3, len);i++){\r\n    //         const donation = donors[i]\r\n    //         const li = document.createElement('li')\r\n\r\n    //         const image = document.createElement('img')\r\n    //         image.src = \"https://cdn.discordapp.com/attachments/837326649074516048/867532401155899421/ethlogo.png\"\r\n\r\n    //         const p = document.createElement('p')\r\n    //         p.innerHTML = donation.amount/(10**18) + \" ETH\"\r\n\r\n    //         const h = document.createElement('h3')\r\n    //         h.innerHTML = donation.from\r\n\r\n    //         li.appendChild(image)\r\n    //         li.appendChild(p)\r\n    //         li.appendChild(h)\r\n    //         mainDiv.appendChild(li)\r\n    //     }\r\n\r\n    // }\r\n\r\n    async loadNFT(){\r\n        const web3 = window.web3\r\n        // Load account\r\n        const accounts = await web3.eth.getAccounts()\r\n\r\n        const networkId = await web3.eth.net.getId()\r\n        const networkData = NFT.networks[networkId]\r\n\r\n        if(networkData) {\r\n            const address = networkData.address\r\n            const abiNFT = NFT.abi\r\n            const contractNFT = new web3.eth.Contract(abiNFT, address)\r\n\r\n            const rec = await contractNFT.methods.print().call()\r\n\r\n            this.setState({ \r\n                contractNFT: contractNFT\r\n            })\r\n\r\n        } else {\r\n            window.alert('Smart contract not deployed to detected network')\r\n        }\r\n\r\n    }\r\n\r\n    upadateAmount(evt) {\r\n        this.setState({\r\n          amount: evt.target.value\r\n        });\r\n    }\r\n    sendEmail(e) {\r\n        e.preventDefault();\r\n\r\n    }\r\n\r\n    donate = () => {\r\n        this.state.contract.methods.donate(parseInt(this.state.campaign.id), this.state.email)\r\n        .send({from: this.state.account, value: parseFloat(this.state.amount)*(10**18)}).once('receipt', (receipt) => {\r\n            this.mintNFT(JSON.stringify(receipt))\r\n        })\r\n        .then(() => {\r\n            var templateParams = {\r\n                user_email: this.state.email,\r\n                donation_amount: this.state.amount,\r\n                campaign_name: this.state.campaign.name,\r\n            };\r\n        emailjs.send('service_7ksffb7', 'template_4nal1hg', templateParams, 'user_2AtKMM5Ljcoy0GZ33Dhia')\r\n            .then(function(response) {\r\n                console.log('SUCCESS!', response.status, response.text);\r\n            }, function(error) {\r\n                console.log('FAILED...', error);\r\n            });\r\n            var amount1 = parseFloat(this.state.amount) * (10**18)\r\n            if((parseInt(this.state.campaign.raised)-amount1) < parseInt(this.state.campaign.goal) && (parseInt(this.state.campaign.raised) + amount1) >= parseInt(this.state.campaign.goal)){\r\n                this.alertEveryone()\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n    donateETH = () => {\r\n        this.state.contract.methods.donateETH(0).send({from: this.state.account, value: parseFloat(this.state.amount)*(10**18)})\r\n    }\r\n\r\n    async alertEveryone(){\r\n        const mails = await this.state.contract.methods.getMailsById(this.state.campaign.id).call()\r\n        const mailsSet = [...new Set(mails)]\r\n        const len = mails.length\r\n        for(var i =0;i<len;i++){\r\n            var templateParams = {\r\n                user_email: mailsSet[i],\r\n                campaign_name: this.state.campaign.name\r\n            };\r\n            emailjs.send('service_51ifv2q', 'template_3ai231s', templateParams, 'user_AzzxvRUXgtcUIpvSjfoOA')\r\n            .then(function(response){\r\n                console.log(\"SUCCESS!\", response.status, response.text);\r\n            }, function(error){\r\n                console.log('FAILED...', error);\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    mintNFT = (receipt) => {\r\n        this.state.contractNFT.methods.mint(receipt).send({from: this.state.account})\r\n    }\r\n\r\n\r\n    render(){\r\n\r\n        return(\r\n            <div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Campaign;"]},"metadata":{},"sourceType":"module"}