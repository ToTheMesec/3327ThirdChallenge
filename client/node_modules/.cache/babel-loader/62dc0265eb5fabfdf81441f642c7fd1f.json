{"ast":null,"code":"// import WebSocket from 'ws';\n// const Web3 = require(\"web3\");\n// // For Mumbai\n// const ws = new WebSocket(\"wss://ws-mumbai.matic.today/\");\n// // For Matic mainnet: wss://ws-mainnet.matic.network/\n// const web3 = new Web3();\n// const abiCoder = web3.eth.abi;\n// async function checkDepositStatus(\n//   userAccount,\n//   rootToken,\n//   depositAmount,\n//   childChainManagerProxy\n// ) {\n//   return new Promise((resolve, reject) => {\n//     ws.on(\"open\", () => {\n//       ws.send(\n//         `{\"id\": 1, \"method\": \"eth_subscribe\", \"params\": [\"newDeposits\", {\"Contract\": ${childChainManagerProxy}}]}`\n//       );\n//       ws.on(\"message\", (msg) => {\n//         const parsedMsg = JSON.parse(msg);\n//         if (\n//           parsedMsg &&\n//           parsedMsg.params &&\n//           parsedMsg.params.result &&\n//           parsedMsg.params.result.Data\n//         ) {\n//           const fullData = parsedMsg.params.result.Data;\n//           const { 0: syncType, 1: syncData } = abiCoder.decodeParameters(\n//             [\"bytes32\", \"bytes\"],\n//             fullData\n//           );\n//           // check if sync is of deposit type (keccak256(\"DEPOSIT\"))\n//           const depositType =\n//             \"0x87a7811f4bfedea3d341ad165680ae306b01aaeacc205d227629cf157dd9f821\";\n//           if (syncType.toLowerCase() === depositType.toLowerCase()) {\n//             const {\n//               0: userAddress,\n//               1: rootTokenAddress,\n//               2: depositData,\n//             } = abiCoder.decodeParameters(\n//               [\"address\", \"address\", \"bytes\"],\n//               syncData\n//             );\n//             // depositData can be further decoded to get amount, tokenId etc. based on token type\n//             // For ERC20 tokens\n//             const { 0: amount } = abiCoder.decodeParameters(\n//               [\"uint256\"],\n//               depositData\n//             );\n//             if (\n//               userAddress.toLowerCase() === userAccount.toLowerCase() &&\n//               rootToken.toLowerCase() === rootTokenAddress.toLowerCase() &&\n//               depositAmount === amount\n//             ) {\n//               resolve(true);\n//             }\n//           }\n//         }\n//       });\n//       ws.on(\"error\", () => {\n//         reject(false);\n//       });\n//       ws.on(\"close\", () => {\n//         reject(false);\n//       });\n//     });\n//   });\n// }\n// export default checkDepositStatus;\n// // Param1 - user address\n// // Param2 - contract address on main chain\n// // Param3 - amount deposited on main chain\n// // Param4 - child chain manager proxy address (0xA6FA4fB5f76172d178d61B04b0ecd319C5d1C0aa for mainnet)","map":{"version":3,"sources":["C:/Users/Luka/Desktop/SupportChildrenV2.0/client/src/depositCheck.js"],"names":[],"mappings":"AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA","sourcesContent":["// import WebSocket from 'ws';\r\n\r\n// const Web3 = require(\"web3\");\r\n\r\n// // For Mumbai\r\n// const ws = new WebSocket(\"wss://ws-mumbai.matic.today/\");\r\n// // For Matic mainnet: wss://ws-mainnet.matic.network/\r\n// const web3 = new Web3();\r\n// const abiCoder = web3.eth.abi;\r\n\r\n// async function checkDepositStatus(\r\n//   userAccount,\r\n//   rootToken,\r\n//   depositAmount,\r\n//   childChainManagerProxy\r\n// ) {\r\n//   return new Promise((resolve, reject) => {\r\n//     ws.on(\"open\", () => {\r\n//       ws.send(\r\n//         `{\"id\": 1, \"method\": \"eth_subscribe\", \"params\": [\"newDeposits\", {\"Contract\": ${childChainManagerProxy}}]}`\r\n//       );\r\n\r\n//       ws.on(\"message\", (msg) => {\r\n//         const parsedMsg = JSON.parse(msg);\r\n//         if (\r\n//           parsedMsg &&\r\n//           parsedMsg.params &&\r\n//           parsedMsg.params.result &&\r\n//           parsedMsg.params.result.Data\r\n//         ) {\r\n//           const fullData = parsedMsg.params.result.Data;\r\n//           const { 0: syncType, 1: syncData } = abiCoder.decodeParameters(\r\n//             [\"bytes32\", \"bytes\"],\r\n//             fullData\r\n//           );\r\n\r\n//           // check if sync is of deposit type (keccak256(\"DEPOSIT\"))\r\n//           const depositType =\r\n//             \"0x87a7811f4bfedea3d341ad165680ae306b01aaeacc205d227629cf157dd9f821\";\r\n//           if (syncType.toLowerCase() === depositType.toLowerCase()) {\r\n//             const {\r\n//               0: userAddress,\r\n//               1: rootTokenAddress,\r\n//               2: depositData,\r\n//             } = abiCoder.decodeParameters(\r\n//               [\"address\", \"address\", \"bytes\"],\r\n//               syncData\r\n//             );\r\n\r\n//             // depositData can be further decoded to get amount, tokenId etc. based on token type\r\n//             // For ERC20 tokens\r\n//             const { 0: amount } = abiCoder.decodeParameters(\r\n//               [\"uint256\"],\r\n//               depositData\r\n//             );\r\n//             if (\r\n//               userAddress.toLowerCase() === userAccount.toLowerCase() &&\r\n//               rootToken.toLowerCase() === rootTokenAddress.toLowerCase() &&\r\n//               depositAmount === amount\r\n//             ) {\r\n//               resolve(true);\r\n//             }\r\n//           }\r\n//         }\r\n//       });\r\n\r\n//       ws.on(\"error\", () => {\r\n//         reject(false);\r\n//       });\r\n\r\n//       ws.on(\"close\", () => {\r\n//         reject(false);\r\n//       });\r\n//     });\r\n//   });\r\n// }\r\n\r\n// export default checkDepositStatus;\r\n\r\n// // Param1 - user address\r\n// // Param2 - contract address on main chain\r\n// // Param3 - amount deposited on main chain\r\n// // Param4 - child chain manager proxy address (0xA6FA4fB5f76172d178d61B04b0ecd319C5d1C0aa for mainnet)"]},"metadata":{},"sourceType":"module"}