{"ast":null,"code":"var _toConsumableArray = require(\"C:\\\\Users\\\\Luka\\\\Desktop\\\\SupportChildrenV2.0\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\n\n(function webpackUniversalModuleDefinition(root, factory) {\n  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory(require(\"@maticnetwork/meta/network\"), require(\"axios\"), require(\"bn.js\"), require(\"eth-sig-util\"), require(\"ethereumjs-tx\"), require(\"ethereumjs-util\"), require(\"merkle-patricia-tree\"), require(\"web3\"));else if (typeof define === 'function' && define.amd) define(\"matic\", [\"@maticnetwork/meta/network\", \"axios\", \"bn.js\", \"eth-sig-util\", \"ethereumjs-tx\", \"ethereumjs-util\", \"merkle-patricia-tree\", \"web3\"], factory);else if (typeof exports === 'object') exports[\"matic\"] = factory(require(\"@maticnetwork/meta/network\"), require(\"axios\"), require(\"bn.js\"), require(\"eth-sig-util\"), require(\"ethereumjs-tx\"), require(\"ethereumjs-util\"), require(\"merkle-patricia-tree\"), require(\"web3\"));else root[\"matic\"] = factory(root[\"@maticnetwork/meta/network\"], root[\"axios\"], root[\"bn.js\"], root[\"eth-sig-util\"], root[\"ethereumjs-tx\"], root[\"ethereumjs-util\"], root[\"merkle-patricia-tree\"], root[\"web3\"]);\n})(window, function (__WEBPACK_EXTERNAL_MODULE__maticnetwork_meta_network__, __WEBPACK_EXTERNAL_MODULE_axios__, __WEBPACK_EXTERNAL_MODULE_bn_js__, __WEBPACK_EXTERNAL_MODULE_eth_sig_util__, __WEBPACK_EXTERNAL_MODULE_ethereumjs_tx__, __WEBPACK_EXTERNAL_MODULE_ethereumjs_util__, __WEBPACK_EXTERNAL_MODULE_merkle_patricia_tree__, __WEBPACK_EXTERNAL_MODULE_web3__) {\n  return (\n    /******/\n    function (modules) {\n      // webpackBootstrap\n\n      /******/\n      // The module cache\n\n      /******/\n      var installedModules = {};\n      /******/\n\n      /******/\n      // The require function\n\n      /******/\n\n      function __webpack_require__(moduleId) {\n        /******/\n\n        /******/\n        // Check if module is in cache\n\n        /******/\n        if (installedModules[moduleId]) {\n          /******/\n          return installedModules[moduleId].exports;\n          /******/\n        }\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n\n        var module = installedModules[moduleId] = {\n          /******/\n          i: moduleId,\n\n          /******/\n          l: false,\n\n          /******/\n          exports: {}\n          /******/\n\n        };\n        /******/\n\n        /******/\n        // Execute the module function\n\n        /******/\n\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n        /******/\n\n        /******/\n        // Flag the module as loaded\n\n        /******/\n\n        module.l = true;\n        /******/\n\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n        return module.exports;\n        /******/\n      }\n      /******/\n\n      /******/\n\n      /******/\n      // expose the modules object (__webpack_modules__)\n\n      /******/\n\n\n      __webpack_require__.m = modules;\n      /******/\n\n      /******/\n      // expose the module cache\n\n      /******/\n\n      __webpack_require__.c = installedModules;\n      /******/\n\n      /******/\n      // define getter function for harmony exports\n\n      /******/\n\n      __webpack_require__.d = function (exports, name, getter) {\n        /******/\n        if (!__webpack_require__.o(exports, name)) {\n          /******/\n          Object.defineProperty(exports, name, {\n            enumerable: true,\n            get: getter\n          });\n          /******/\n        }\n        /******/\n\n      };\n      /******/\n\n      /******/\n      // define __esModule on exports\n\n      /******/\n\n\n      __webpack_require__.r = function (exports) {\n        /******/\n        if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n          /******/\n          Object.defineProperty(exports, Symbol.toStringTag, {\n            value: 'Module'\n          });\n          /******/\n        }\n        /******/\n\n\n        Object.defineProperty(exports, '__esModule', {\n          value: true\n        });\n        /******/\n      };\n      /******/\n\n      /******/\n      // create a fake namespace object\n\n      /******/\n      // mode & 1: value is a module id, require it\n\n      /******/\n      // mode & 2: merge all properties of value into the ns\n\n      /******/\n      // mode & 4: return value when already ns object\n\n      /******/\n      // mode & 8|1: behave like require\n\n      /******/\n\n\n      __webpack_require__.t = function (value, mode) {\n        /******/\n        if (mode & 1) value = __webpack_require__(value);\n        /******/\n\n        if (mode & 8) return value;\n        /******/\n\n        if (mode & 4 && typeof value === 'object' && value && value.__esModule) return value;\n        /******/\n\n        var ns = Object.create(null);\n        /******/\n\n        __webpack_require__.r(ns);\n        /******/\n\n\n        Object.defineProperty(ns, 'default', {\n          enumerable: true,\n          value: value\n        });\n        /******/\n\n        if (mode & 2 && typeof value != 'string') for (var key in value) {\n          __webpack_require__.d(ns, key, function (key) {\n            return value[key];\n          }.bind(null, key));\n        }\n        /******/\n\n        return ns;\n        /******/\n      };\n      /******/\n\n      /******/\n      // getDefaultExport function for compatibility with non-harmony modules\n\n      /******/\n\n\n      __webpack_require__.n = function (module) {\n        /******/\n        var getter = module && module.__esModule ?\n        /******/\n        function getDefault() {\n          return module['default'];\n        } :\n        /******/\n        function getModuleExports() {\n          return module;\n        };\n        /******/\n\n        __webpack_require__.d(getter, 'a', getter);\n        /******/\n\n\n        return getter;\n        /******/\n      };\n      /******/\n\n      /******/\n      // Object.prototype.hasOwnProperty.call\n\n      /******/\n\n\n      __webpack_require__.o = function (object, property) {\n        return Object.prototype.hasOwnProperty.call(object, property);\n      };\n      /******/\n\n      /******/\n      // __webpack_public_path__\n\n      /******/\n\n\n      __webpack_require__.p = \"\";\n      /******/\n\n      /******/\n\n      /******/\n      // Load entry module and return exports\n\n      /******/\n\n      return __webpack_require__(__webpack_require__.s = \"./src/index.ts\");\n      /******/\n    }(\n    /************************************************************************/\n\n    /******/\n    {\n      /***/\n      \"./node_modules/assert/assert.js\":\n      /*!***************************************!*\\\n        !*** ./node_modules/assert/assert.js ***!\n        \\***************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesAssertAssertJs(module, exports, __webpack_require__) {\n        \"use strict\";\n        /* WEBPACK VAR INJECTION */\n\n        (function (global) {\n          var objectAssign = __webpack_require__(\n          /*! object-assign */\n          \"./node_modules/object-assign/index.js\"); // compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js\n          // original notice:\n\n          /*!\n           * The buffer module from node.js, for the browser.\n           *\n           * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n           * @license  MIT\n           */\n\n\n          function compare(a, b) {\n            if (a === b) {\n              return 0;\n            }\n\n            var x = a.length;\n            var y = b.length;\n\n            for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n              if (a[i] !== b[i]) {\n                x = a[i];\n                y = b[i];\n                break;\n              }\n            }\n\n            if (x < y) {\n              return -1;\n            }\n\n            if (y < x) {\n              return 1;\n            }\n\n            return 0;\n          }\n\n          function isBuffer(b) {\n            if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {\n              return global.Buffer.isBuffer(b);\n            }\n\n            return !!(b != null && b._isBuffer);\n          } // based on node assert, original notice:\n          // NB: The URL to the CommonJS spec is kept just for tradition.\n          //     node-assert has evolved a lot since then, both in API and behavior.\n          // http://wiki.commonjs.org/wiki/Unit_Testing/1.0\n          //\n          // THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!\n          //\n          // Originally from narwhal.js (http://narwhaljs.org)\n          // Copyright (c) 2009 Thomas Robinson <280north.com>\n          //\n          // Permission is hereby granted, free of charge, to any person obtaining a copy\n          // of this software and associated documentation files (the 'Software'), to\n          // deal in the Software without restriction, including without limitation the\n          // rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n          // sell copies of the Software, and to permit persons to whom the Software is\n          // furnished to do so, subject to the following conditions:\n          //\n          // The above copyright notice and this permission notice shall be included in\n          // all copies or substantial portions of the Software.\n          //\n          // THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n          // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n          // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n          // AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n          // ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n          // WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n          var util = __webpack_require__(\n          /*! util/ */\n          \"./node_modules/node-libs-browser/node_modules/util/util.js\");\n\n          var hasOwn = Object.prototype.hasOwnProperty;\n          var pSlice = Array.prototype.slice;\n\n          var functionsHaveNames = function () {\n            return function foo() {}.name === 'foo';\n          }();\n\n          function pToString(obj) {\n            return Object.prototype.toString.call(obj);\n          }\n\n          function isView(arrbuf) {\n            if (isBuffer(arrbuf)) {\n              return false;\n            }\n\n            if (typeof global.ArrayBuffer !== 'function') {\n              return false;\n            }\n\n            if (typeof ArrayBuffer.isView === 'function') {\n              return ArrayBuffer.isView(arrbuf);\n            }\n\n            if (!arrbuf) {\n              return false;\n            }\n\n            if (arrbuf instanceof DataView) {\n              return true;\n            }\n\n            if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {\n              return true;\n            }\n\n            return false;\n          } // 1. The assert module provides functions that throw\n          // AssertionError's when particular conditions are not met. The\n          // assert module must conform to the following interface.\n\n\n          var assert = module.exports = ok; // 2. The AssertionError is defined in assert.\n          // new assert.AssertionError({ message: message,\n          //                             actual: actual,\n          //                             expected: expected })\n\n          var regex = /\\s*function\\s+([^\\(\\s]*)\\s*/; // based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js\n\n          function getName(func) {\n            if (!util.isFunction(func)) {\n              return;\n            }\n\n            if (functionsHaveNames) {\n              return func.name;\n            }\n\n            var str = func.toString();\n            var match = str.match(regex);\n            return match && match[1];\n          }\n\n          assert.AssertionError = function AssertionError(options) {\n            this.name = 'AssertionError';\n            this.actual = options.actual;\n            this.expected = options.expected;\n            this.operator = options.operator;\n\n            if (options.message) {\n              this.message = options.message;\n              this.generatedMessage = false;\n            } else {\n              this.message = getMessage(this);\n              this.generatedMessage = true;\n            }\n\n            var stackStartFunction = options.stackStartFunction || fail;\n\n            if (Error.captureStackTrace) {\n              Error.captureStackTrace(this, stackStartFunction);\n            } else {\n              // non v8 browsers so we can have a stacktrace\n              var err = new Error();\n\n              if (err.stack) {\n                var out = err.stack; // try to strip useless frames\n\n                var fn_name = getName(stackStartFunction);\n                var idx = out.indexOf('\\n' + fn_name);\n\n                if (idx >= 0) {\n                  // once we have located the function frame\n                  // we need to strip out everything before it (and its line)\n                  var next_line = out.indexOf('\\n', idx + 1);\n                  out = out.substring(next_line + 1);\n                }\n\n                this.stack = out;\n              }\n            }\n          }; // assert.AssertionError instanceof Error\n\n\n          util.inherits(assert.AssertionError, Error);\n\n          function truncate(s, n) {\n            if (typeof s === 'string') {\n              return s.length < n ? s : s.slice(0, n);\n            } else {\n              return s;\n            }\n          }\n\n          function inspect(something) {\n            if (functionsHaveNames || !util.isFunction(something)) {\n              return util.inspect(something);\n            }\n\n            var rawname = getName(something);\n            var name = rawname ? ': ' + rawname : '';\n            return '[Function' + name + ']';\n          }\n\n          function getMessage(self) {\n            return truncate(inspect(self.actual), 128) + ' ' + self.operator + ' ' + truncate(inspect(self.expected), 128);\n          } // At present only the three keys mentioned above are used and\n          // understood by the spec. Implementations or sub modules can pass\n          // other keys to the AssertionError's constructor - they will be\n          // ignored.\n          // 3. All of the following functions must throw an AssertionError\n          // when a corresponding condition is not met, with a message that\n          // may be undefined if not provided.  All assertion methods provide\n          // both the actual and expected values to the assertion error for\n          // display purposes.\n\n\n          function fail(actual, expected, message, operator, stackStartFunction) {\n            throw new assert.AssertionError({\n              message: message,\n              actual: actual,\n              expected: expected,\n              operator: operator,\n              stackStartFunction: stackStartFunction\n            });\n          } // EXTENSION! allows for well behaved errors defined elsewhere.\n\n\n          assert.fail = fail; // 4. Pure assertion tests whether a value is truthy, as determined\n          // by !!guard.\n          // assert.ok(guard, message_opt);\n          // This statement is equivalent to assert.equal(true, !!guard,\n          // message_opt);. To test strictly for the value true, use\n          // assert.strictEqual(true, guard, message_opt);.\n\n          function ok(value, message) {\n            if (!value) fail(value, true, message, '==', assert.ok);\n          }\n\n          assert.ok = ok; // 5. The equality assertion tests shallow, coercive equality with\n          // ==.\n          // assert.equal(actual, expected, message_opt);\n\n          assert.equal = function equal(actual, expected, message) {\n            if (actual != expected) fail(actual, expected, message, '==', assert.equal);\n          }; // 6. The non-equality assertion tests for whether two objects are not equal\n          // with != assert.notEqual(actual, expected, message_opt);\n\n\n          assert.notEqual = function notEqual(actual, expected, message) {\n            if (actual == expected) {\n              fail(actual, expected, message, '!=', assert.notEqual);\n            }\n          }; // 7. The equivalence assertion tests a deep equality relation.\n          // assert.deepEqual(actual, expected, message_opt);\n\n\n          assert.deepEqual = function deepEqual(actual, expected, message) {\n            if (!_deepEqual(actual, expected, false)) {\n              fail(actual, expected, message, 'deepEqual', assert.deepEqual);\n            }\n          };\n\n          assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {\n            if (!_deepEqual(actual, expected, true)) {\n              fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);\n            }\n          };\n\n          function _deepEqual(actual, expected, strict, memos) {\n            // 7.1. All identical values are equivalent, as determined by ===.\n            if (actual === expected) {\n              return true;\n            } else if (isBuffer(actual) && isBuffer(expected)) {\n              return compare(actual, expected) === 0; // 7.2. If the expected value is a Date object, the actual value is\n              // equivalent if it is also a Date object that refers to the same time.\n            } else if (util.isDate(actual) && util.isDate(expected)) {\n              return actual.getTime() === expected.getTime(); // 7.3 If the expected value is a RegExp object, the actual value is\n              // equivalent if it is also a RegExp object with the same source and\n              // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).\n            } else if (util.isRegExp(actual) && util.isRegExp(expected)) {\n              return actual.source === expected.source && actual.global === expected.global && actual.multiline === expected.multiline && actual.lastIndex === expected.lastIndex && actual.ignoreCase === expected.ignoreCase; // 7.4. Other pairs that do not both pass typeof value == 'object',\n              // equivalence is determined by ==.\n            } else if ((actual === null || typeof actual !== 'object') && (expected === null || typeof expected !== 'object')) {\n              return strict ? actual === expected : actual == expected; // If both values are instances of typed arrays, wrap their underlying\n              // ArrayBuffers in a Buffer each to increase performance\n              // This optimization requires the arrays to have the same type as checked by\n              // Object.prototype.toString (aka pToString). Never perform binary\n              // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their\n              // bit patterns are not identical.\n            } else if (isView(actual) && isView(expected) && pToString(actual) === pToString(expected) && !(actual instanceof Float32Array || actual instanceof Float64Array)) {\n              return compare(new Uint8Array(actual.buffer), new Uint8Array(expected.buffer)) === 0; // 7.5 For all other Object pairs, including Array objects, equivalence is\n              // determined by having the same number of owned properties (as verified\n              // with Object.prototype.hasOwnProperty.call), the same set of keys\n              // (although not necessarily the same order), equivalent values for every\n              // corresponding key, and an identical 'prototype' property. Note: this\n              // accounts for both named and indexed properties on Arrays.\n            } else if (isBuffer(actual) !== isBuffer(expected)) {\n              return false;\n            } else {\n              memos = memos || {\n                actual: [],\n                expected: []\n              };\n              var actualIndex = memos.actual.indexOf(actual);\n\n              if (actualIndex !== -1) {\n                if (actualIndex === memos.expected.indexOf(expected)) {\n                  return true;\n                }\n              }\n\n              memos.actual.push(actual);\n              memos.expected.push(expected);\n              return objEquiv(actual, expected, strict, memos);\n            }\n          }\n\n          function isArguments(object) {\n            return Object.prototype.toString.call(object) == '[object Arguments]';\n          }\n\n          function objEquiv(a, b, strict, actualVisitedObjects) {\n            if (a === null || a === undefined || b === null || b === undefined) return false; // if one is a primitive, the other must be same\n\n            if (util.isPrimitive(a) || util.isPrimitive(b)) return a === b;\n            if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b)) return false;\n            var aIsArgs = isArguments(a);\n            var bIsArgs = isArguments(b);\n            if (aIsArgs && !bIsArgs || !aIsArgs && bIsArgs) return false;\n\n            if (aIsArgs) {\n              a = pSlice.call(a);\n              b = pSlice.call(b);\n              return _deepEqual(a, b, strict);\n            }\n\n            var ka = objectKeys(a);\n            var kb = objectKeys(b);\n            var key, i; // having the same number of owned properties (keys incorporates\n            // hasOwnProperty)\n\n            if (ka.length !== kb.length) return false; //the same set of keys (although not necessarily the same order),\n\n            ka.sort();\n            kb.sort(); //~~~cheap key test\n\n            for (i = ka.length - 1; i >= 0; i--) {\n              if (ka[i] !== kb[i]) return false;\n            } //equivalent values for every corresponding key, and\n            //~~~possibly expensive deep test\n\n\n            for (i = ka.length - 1; i >= 0; i--) {\n              key = ka[i];\n              if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects)) return false;\n            }\n\n            return true;\n          } // 8. The non-equivalence assertion tests for any deep inequality.\n          // assert.notDeepEqual(actual, expected, message_opt);\n\n\n          assert.notDeepEqual = function notDeepEqual(actual, expected, message) {\n            if (_deepEqual(actual, expected, false)) {\n              fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);\n            }\n          };\n\n          assert.notDeepStrictEqual = notDeepStrictEqual;\n\n          function notDeepStrictEqual(actual, expected, message) {\n            if (_deepEqual(actual, expected, true)) {\n              fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);\n            }\n          } // 9. The strict equality assertion tests strict equality, as determined by ===.\n          // assert.strictEqual(actual, expected, message_opt);\n\n\n          assert.strictEqual = function strictEqual(actual, expected, message) {\n            if (actual !== expected) {\n              fail(actual, expected, message, '===', assert.strictEqual);\n            }\n          }; // 10. The strict non-equality assertion tests for strict inequality, as\n          // determined by !==.  assert.notStrictEqual(actual, expected, message_opt);\n\n\n          assert.notStrictEqual = function notStrictEqual(actual, expected, message) {\n            if (actual === expected) {\n              fail(actual, expected, message, '!==', assert.notStrictEqual);\n            }\n          };\n\n          function expectedException(actual, expected) {\n            if (!actual || !expected) {\n              return false;\n            }\n\n            if (Object.prototype.toString.call(expected) == '[object RegExp]') {\n              return expected.test(actual);\n            }\n\n            try {\n              if (actual instanceof expected) {\n                return true;\n              }\n            } catch (e) {// Ignore.  The instanceof check doesn't work for arrow functions.\n            }\n\n            if (Error.isPrototypeOf(expected)) {\n              return false;\n            }\n\n            return expected.call({}, actual) === true;\n          }\n\n          function _tryBlock(block) {\n            var error;\n\n            try {\n              block();\n            } catch (e) {\n              error = e;\n            }\n\n            return error;\n          }\n\n          function _throws(shouldThrow, block, expected, message) {\n            var actual;\n\n            if (typeof block !== 'function') {\n              throw new TypeError('\"block\" argument must be a function');\n            }\n\n            if (typeof expected === 'string') {\n              message = expected;\n              expected = null;\n            }\n\n            actual = _tryBlock(block);\n            message = (expected && expected.name ? ' (' + expected.name + ').' : '.') + (message ? ' ' + message : '.');\n\n            if (shouldThrow && !actual) {\n              fail(actual, expected, 'Missing expected exception' + message);\n            }\n\n            var userProvidedMessage = typeof message === 'string';\n            var isUnwantedException = !shouldThrow && util.isError(actual);\n            var isUnexpectedException = !shouldThrow && actual && !expected;\n\n            if (isUnwantedException && userProvidedMessage && expectedException(actual, expected) || isUnexpectedException) {\n              fail(actual, expected, 'Got unwanted exception' + message);\n            }\n\n            if (shouldThrow && actual && expected && !expectedException(actual, expected) || !shouldThrow && actual) {\n              throw actual;\n            }\n          } // 11. Expected to throw an error:\n          // assert.throws(block, Error_opt, message_opt);\n\n\n          assert.throws = function (block,\n          /*optional*/\n          error,\n          /*optional*/\n          message) {\n            _throws(true, block, error, message);\n          }; // EXTENSION! This is annoying to write outside this module.\n\n\n          assert.doesNotThrow = function (block,\n          /*optional*/\n          error,\n          /*optional*/\n          message) {\n            _throws(false, block, error, message);\n          };\n\n          assert.ifError = function (err) {\n            if (err) throw err;\n          }; // Expose a strict only variant of assert\n\n\n          function strict(value, message) {\n            if (!value) fail(value, true, message, '==', strict);\n          }\n\n          assert.strict = objectAssign(strict, assert, {\n            equal: assert.strictEqual,\n            deepEqual: assert.deepStrictEqual,\n            notEqual: assert.notStrictEqual,\n            notDeepEqual: assert.notDeepStrictEqual\n          });\n          assert.strict.strict = assert.strict;\n\n          var objectKeys = Object.keys || function (obj) {\n            var keys = [];\n\n            for (var key in obj) {\n              if (hasOwn.call(obj, key)) keys.push(key);\n            }\n\n            return keys;\n          };\n          /* WEBPACK VAR INJECTION */\n\n        }).call(this, __webpack_require__(\n        /*! ./../webpack/buildin/global.js */\n        \"./node_modules/webpack/buildin/global.js\"));\n        /***/\n      },\n\n      /***/\n      \"./node_modules/async/dist/async.js\":\n      /*!******************************************!*\\\n        !*** ./node_modules/async/dist/async.js ***!\n        \\******************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesAsyncDistAsyncJs(module, exports, __webpack_require__) {\n        /* WEBPACK VAR INJECTION */\n        (function (setImmediate, process, global, module) {\n          (function (global, factory) {\n            true ? factory(exports) : undefined;\n          })(this, function (exports) {\n            'use strict';\n\n            function slice(arrayLike, start) {\n              start = start | 0;\n              var newLen = Math.max(arrayLike.length - start, 0);\n              var newArr = Array(newLen);\n\n              for (var idx = 0; idx < newLen; idx++) {\n                newArr[idx] = arrayLike[start + idx];\n              }\n\n              return newArr;\n            }\n            /**\n             * Creates a continuation function with some arguments already applied.\n             *\n             * Useful as a shorthand when combined with other control flow functions. Any\n             * arguments passed to the returned function are added to the arguments\n             * originally passed to apply.\n             *\n             * @name apply\n             * @static\n             * @memberOf module:Utils\n             * @method\n             * @category Util\n             * @param {Function} fn - The function you want to eventually apply all\n             * arguments to. Invokes with (arguments...).\n             * @param {...*} arguments... - Any number of arguments to automatically apply\n             * when the continuation is called.\n             * @returns {Function} the partially-applied function\n             * @example\n             *\n             * // using apply\n             * async.parallel([\n             *     async.apply(fs.writeFile, 'testfile1', 'test1'),\n             *     async.apply(fs.writeFile, 'testfile2', 'test2')\n             * ]);\n             *\n             *\n             * // the same process without using apply\n             * async.parallel([\n             *     function(callback) {\n             *         fs.writeFile('testfile1', 'test1', callback);\n             *     },\n             *     function(callback) {\n             *         fs.writeFile('testfile2', 'test2', callback);\n             *     }\n             * ]);\n             *\n             * // It's possible to pass any number of additional arguments when calling the\n             * // continuation:\n             *\n             * node> var fn = async.apply(sys.puts, 'one');\n             * node> fn('two', 'three');\n             * one\n             * two\n             * three\n             */\n\n\n            var apply = function apply(fn\n            /*, ...args*/\n            ) {\n              var args = slice(arguments, 1);\n              return function ()\n              /*callArgs*/\n              {\n                var callArgs = slice(arguments);\n                return fn.apply(null, args.concat(callArgs));\n              };\n            };\n\n            var initialParams = function initialParams(fn) {\n              return function ()\n              /*...args, callback*/\n              {\n                var args = slice(arguments);\n                var callback = args.pop();\n                fn.call(this, args, callback);\n              };\n            };\n            /**\n             * Checks if `value` is the\n             * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n             * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n             *\n             * @static\n             * @memberOf _\n             * @since 0.1.0\n             * @category Lang\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n             * @example\n             *\n             * _.isObject({});\n             * // => true\n             *\n             * _.isObject([1, 2, 3]);\n             * // => true\n             *\n             * _.isObject(_.noop);\n             * // => true\n             *\n             * _.isObject(null);\n             * // => false\n             */\n\n\n            function isObject(value) {\n              var type = typeof value;\n              return value != null && (type == 'object' || type == 'function');\n            }\n\n            var hasSetImmediate = typeof setImmediate === 'function' && setImmediate;\n            var hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';\n\n            function fallback(fn) {\n              setTimeout(fn, 0);\n            }\n\n            function wrap(defer) {\n              return function (fn\n              /*, ...args*/\n              ) {\n                var args = slice(arguments, 1);\n                defer(function () {\n                  fn.apply(null, args);\n                });\n              };\n            }\n\n            var _defer;\n\n            if (hasSetImmediate) {\n              _defer = setImmediate;\n            } else if (hasNextTick) {\n              _defer = process.nextTick;\n            } else {\n              _defer = fallback;\n            }\n\n            var setImmediate$1 = wrap(_defer);\n            /**\n             * Take a sync function and make it async, passing its return value to a\n             * callback. This is useful for plugging sync functions into a waterfall,\n             * series, or other async functions. Any arguments passed to the generated\n             * function will be passed to the wrapped function (except for the final\n             * callback argument). Errors thrown will be passed to the callback.\n             *\n             * If the function passed to `asyncify` returns a Promise, that promises's\n             * resolved/rejected state will be used to call the callback, rather than simply\n             * the synchronous return value.\n             *\n             * This also means you can asyncify ES2017 `async` functions.\n             *\n             * @name asyncify\n             * @static\n             * @memberOf module:Utils\n             * @method\n             * @alias wrapSync\n             * @category Util\n             * @param {Function} func - The synchronous function, or Promise-returning\n             * function to convert to an {@link AsyncFunction}.\n             * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be\n             * invoked with `(args..., callback)`.\n             * @example\n             *\n             * // passing a regular synchronous function\n             * async.waterfall([\n             *     async.apply(fs.readFile, filename, \"utf8\"),\n             *     async.asyncify(JSON.parse),\n             *     function (data, next) {\n             *         // data is the result of parsing the text.\n             *         // If there was a parsing error, it would have been caught.\n             *     }\n             * ], callback);\n             *\n             * // passing a function returning a promise\n             * async.waterfall([\n             *     async.apply(fs.readFile, filename, \"utf8\"),\n             *     async.asyncify(function (contents) {\n             *         return db.model.create(contents);\n             *     }),\n             *     function (model, next) {\n             *         // `model` is the instantiated model object.\n             *         // If there was an error, this function would be skipped.\n             *     }\n             * ], callback);\n             *\n             * // es2017 example, though `asyncify` is not needed if your JS environment\n             * // supports async functions out of the box\n             * var q = async.queue(async.asyncify(async function(file) {\n             *     var intermediateStep = await processFile(file);\n             *     return await somePromise(intermediateStep)\n             * }));\n             *\n             * q.push(files);\n             */\n\n            function asyncify(func) {\n              return initialParams(function (args, callback) {\n                var result;\n\n                try {\n                  result = func.apply(this, args);\n                } catch (e) {\n                  return callback(e);\n                } // if result is Promise object\n\n\n                if (isObject(result) && typeof result.then === 'function') {\n                  result.then(function (value) {\n                    invokeCallback(callback, null, value);\n                  }, function (err) {\n                    invokeCallback(callback, err.message ? err : new Error(err));\n                  });\n                } else {\n                  callback(null, result);\n                }\n              });\n            }\n\n            function invokeCallback(callback, error, value) {\n              try {\n                callback(error, value);\n              } catch (e) {\n                setImmediate$1(rethrow, e);\n              }\n            }\n\n            function rethrow(error) {\n              throw error;\n            }\n\n            var supportsSymbol = typeof Symbol === 'function';\n\n            function isAsync(fn) {\n              return supportsSymbol && fn[Symbol.toStringTag] === 'AsyncFunction';\n            }\n\n            function wrapAsync(asyncFn) {\n              return isAsync(asyncFn) ? asyncify(asyncFn) : asyncFn;\n            }\n\n            function applyEach$1(eachfn) {\n              return function (fns\n              /*, ...args*/\n              ) {\n                var args = slice(arguments, 1);\n                var go = initialParams(function (args, callback) {\n                  var that = this;\n                  return eachfn(fns, function (fn, cb) {\n                    wrapAsync(fn).apply(that, args.concat(cb));\n                  }, callback);\n                });\n\n                if (args.length) {\n                  return go.apply(this, args);\n                } else {\n                  return go;\n                }\n              };\n            }\n            /** Detect free variable `global` from Node.js. */\n\n\n            var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n            /** Detect free variable `self`. */\n\n            var freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n            /** Used as a reference to the global object. */\n\n            var root = freeGlobal || freeSelf || Function('return this')();\n            /** Built-in value references. */\n\n            var Symbol$1 = root.Symbol;\n            /** Used for built-in method references. */\n\n            var objectProto = Object.prototype;\n            /** Used to check objects for own properties. */\n\n            var hasOwnProperty = objectProto.hasOwnProperty;\n            /**\n             * Used to resolve the\n             * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n             * of values.\n             */\n\n            var nativeObjectToString = objectProto.toString;\n            /** Built-in value references. */\n\n            var symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : undefined;\n            /**\n             * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n             *\n             * @private\n             * @param {*} value The value to query.\n             * @returns {string} Returns the raw `toStringTag`.\n             */\n\n            function getRawTag(value) {\n              var isOwn = hasOwnProperty.call(value, symToStringTag$1),\n                  tag = value[symToStringTag$1];\n\n              try {\n                value[symToStringTag$1] = undefined;\n                var unmasked = true;\n              } catch (e) {}\n\n              var result = nativeObjectToString.call(value);\n\n              if (unmasked) {\n                if (isOwn) {\n                  value[symToStringTag$1] = tag;\n                } else {\n                  delete value[symToStringTag$1];\n                }\n              }\n\n              return result;\n            }\n            /** Used for built-in method references. */\n\n\n            var objectProto$1 = Object.prototype;\n            /**\n             * Used to resolve the\n             * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n             * of values.\n             */\n\n            var nativeObjectToString$1 = objectProto$1.toString;\n            /**\n             * Converts `value` to a string using `Object.prototype.toString`.\n             *\n             * @private\n             * @param {*} value The value to convert.\n             * @returns {string} Returns the converted string.\n             */\n\n            function objectToString(value) {\n              return nativeObjectToString$1.call(value);\n            }\n            /** `Object#toString` result references. */\n\n\n            var nullTag = '[object Null]';\n            var undefinedTag = '[object Undefined]';\n            /** Built-in value references. */\n\n            var symToStringTag = Symbol$1 ? Symbol$1.toStringTag : undefined;\n            /**\n             * The base implementation of `getTag` without fallbacks for buggy environments.\n             *\n             * @private\n             * @param {*} value The value to query.\n             * @returns {string} Returns the `toStringTag`.\n             */\n\n            function baseGetTag(value) {\n              if (value == null) {\n                return value === undefined ? undefinedTag : nullTag;\n              }\n\n              return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);\n            }\n            /** `Object#toString` result references. */\n\n\n            var asyncTag = '[object AsyncFunction]';\n            var funcTag = '[object Function]';\n            var genTag = '[object GeneratorFunction]';\n            var proxyTag = '[object Proxy]';\n            /**\n             * Checks if `value` is classified as a `Function` object.\n             *\n             * @static\n             * @memberOf _\n             * @since 0.1.0\n             * @category Lang\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n             * @example\n             *\n             * _.isFunction(_);\n             * // => true\n             *\n             * _.isFunction(/abc/);\n             * // => false\n             */\n\n            function isFunction(value) {\n              if (!isObject(value)) {\n                return false;\n              } // The use of `Object#toString` avoids issues with the `typeof` operator\n              // in Safari 9 which returns 'object' for typed arrays and other constructors.\n\n\n              var tag = baseGetTag(value);\n              return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n            }\n            /** Used as references for various `Number` constants. */\n\n\n            var MAX_SAFE_INTEGER = 9007199254740991;\n            /**\n             * Checks if `value` is a valid array-like length.\n             *\n             * **Note:** This method is loosely based on\n             * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n             *\n             * @static\n             * @memberOf _\n             * @since 4.0.0\n             * @category Lang\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n             * @example\n             *\n             * _.isLength(3);\n             * // => true\n             *\n             * _.isLength(Number.MIN_VALUE);\n             * // => false\n             *\n             * _.isLength(Infinity);\n             * // => false\n             *\n             * _.isLength('3');\n             * // => false\n             */\n\n            function isLength(value) {\n              return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n            }\n            /**\n             * Checks if `value` is array-like. A value is considered array-like if it's\n             * not a function and has a `value.length` that's an integer greater than or\n             * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n             *\n             * @static\n             * @memberOf _\n             * @since 4.0.0\n             * @category Lang\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n             * @example\n             *\n             * _.isArrayLike([1, 2, 3]);\n             * // => true\n             *\n             * _.isArrayLike(document.body.children);\n             * // => true\n             *\n             * _.isArrayLike('abc');\n             * // => true\n             *\n             * _.isArrayLike(_.noop);\n             * // => false\n             */\n\n\n            function isArrayLike(value) {\n              return value != null && isLength(value.length) && !isFunction(value);\n            } // A temporary value used to identify if the loop should be broken.\n            // See #1064, #1293\n\n\n            var breakLoop = {};\n            /**\n             * This method returns `undefined`.\n             *\n             * @static\n             * @memberOf _\n             * @since 2.3.0\n             * @category Util\n             * @example\n             *\n             * _.times(2, _.noop);\n             * // => [undefined, undefined]\n             */\n\n            function noop() {// No operation performed.\n            }\n\n            function once(fn) {\n              return function () {\n                if (fn === null) return;\n                var callFn = fn;\n                fn = null;\n                callFn.apply(this, arguments);\n              };\n            }\n\n            var iteratorSymbol = typeof Symbol === 'function' && Symbol.iterator;\n\n            var getIterator = function getIterator(coll) {\n              return iteratorSymbol && coll[iteratorSymbol] && coll[iteratorSymbol]();\n            };\n            /**\n             * The base implementation of `_.times` without support for iteratee shorthands\n             * or max array length checks.\n             *\n             * @private\n             * @param {number} n The number of times to invoke `iteratee`.\n             * @param {Function} iteratee The function invoked per iteration.\n             * @returns {Array} Returns the array of results.\n             */\n\n\n            function baseTimes(n, iteratee) {\n              var index = -1,\n                  result = Array(n);\n\n              while (++index < n) {\n                result[index] = iteratee(index);\n              }\n\n              return result;\n            }\n            /**\n             * Checks if `value` is object-like. A value is object-like if it's not `null`\n             * and has a `typeof` result of \"object\".\n             *\n             * @static\n             * @memberOf _\n             * @since 4.0.0\n             * @category Lang\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n             * @example\n             *\n             * _.isObjectLike({});\n             * // => true\n             *\n             * _.isObjectLike([1, 2, 3]);\n             * // => true\n             *\n             * _.isObjectLike(_.noop);\n             * // => false\n             *\n             * _.isObjectLike(null);\n             * // => false\n             */\n\n\n            function isObjectLike(value) {\n              return value != null && typeof value == 'object';\n            }\n            /** `Object#toString` result references. */\n\n\n            var argsTag = '[object Arguments]';\n            /**\n             * The base implementation of `_.isArguments`.\n             *\n             * @private\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n             */\n\n            function baseIsArguments(value) {\n              return isObjectLike(value) && baseGetTag(value) == argsTag;\n            }\n            /** Used for built-in method references. */\n\n\n            var objectProto$3 = Object.prototype;\n            /** Used to check objects for own properties. */\n\n            var hasOwnProperty$2 = objectProto$3.hasOwnProperty;\n            /** Built-in value references. */\n\n            var propertyIsEnumerable = objectProto$3.propertyIsEnumerable;\n            /**\n             * Checks if `value` is likely an `arguments` object.\n             *\n             * @static\n             * @memberOf _\n             * @since 0.1.0\n             * @category Lang\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n             *  else `false`.\n             * @example\n             *\n             * _.isArguments(function() { return arguments; }());\n             * // => true\n             *\n             * _.isArguments([1, 2, 3]);\n             * // => false\n             */\n\n            var isArguments = baseIsArguments(function () {\n              return arguments;\n            }()) ? baseIsArguments : function (value) {\n              return isObjectLike(value) && hasOwnProperty$2.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');\n            };\n            /**\n             * Checks if `value` is classified as an `Array` object.\n             *\n             * @static\n             * @memberOf _\n             * @since 0.1.0\n             * @category Lang\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n             * @example\n             *\n             * _.isArray([1, 2, 3]);\n             * // => true\n             *\n             * _.isArray(document.body.children);\n             * // => false\n             *\n             * _.isArray('abc');\n             * // => false\n             *\n             * _.isArray(_.noop);\n             * // => false\n             */\n\n            var isArray = Array.isArray;\n            /**\n             * This method returns `false`.\n             *\n             * @static\n             * @memberOf _\n             * @since 4.13.0\n             * @category Util\n             * @returns {boolean} Returns `false`.\n             * @example\n             *\n             * _.times(2, _.stubFalse);\n             * // => [false, false]\n             */\n\n            function stubFalse() {\n              return false;\n            }\n            /** Detect free variable `exports`. */\n\n\n            var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n            /** Detect free variable `module`. */\n\n            var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n            /** Detect the popular CommonJS extension `module.exports`. */\n\n            var moduleExports = freeModule && freeModule.exports === freeExports;\n            /** Built-in value references. */\n\n            var Buffer = moduleExports ? root.Buffer : undefined;\n            /* Built-in method references for those with the same name as other `lodash` methods. */\n\n            var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n            /**\n             * Checks if `value` is a buffer.\n             *\n             * @static\n             * @memberOf _\n             * @since 4.3.0\n             * @category Lang\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n             * @example\n             *\n             * _.isBuffer(new Buffer(2));\n             * // => true\n             *\n             * _.isBuffer(new Uint8Array(2));\n             * // => false\n             */\n\n            var isBuffer = nativeIsBuffer || stubFalse;\n            /** Used as references for various `Number` constants. */\n\n            var MAX_SAFE_INTEGER$1 = 9007199254740991;\n            /** Used to detect unsigned integer values. */\n\n            var reIsUint = /^(?:0|[1-9]\\d*)$/;\n            /**\n             * Checks if `value` is a valid array-like index.\n             *\n             * @private\n             * @param {*} value The value to check.\n             * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n             * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n             */\n\n            function isIndex(value, length) {\n              var type = typeof value;\n              length = length == null ? MAX_SAFE_INTEGER$1 : length;\n              return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;\n            }\n            /** `Object#toString` result references. */\n\n\n            var argsTag$1 = '[object Arguments]';\n            var arrayTag = '[object Array]';\n            var boolTag = '[object Boolean]';\n            var dateTag = '[object Date]';\n            var errorTag = '[object Error]';\n            var funcTag$1 = '[object Function]';\n            var mapTag = '[object Map]';\n            var numberTag = '[object Number]';\n            var objectTag = '[object Object]';\n            var regexpTag = '[object RegExp]';\n            var setTag = '[object Set]';\n            var stringTag = '[object String]';\n            var weakMapTag = '[object WeakMap]';\n            var arrayBufferTag = '[object ArrayBuffer]';\n            var dataViewTag = '[object DataView]';\n            var float32Tag = '[object Float32Array]';\n            var float64Tag = '[object Float64Array]';\n            var int8Tag = '[object Int8Array]';\n            var int16Tag = '[object Int16Array]';\n            var int32Tag = '[object Int32Array]';\n            var uint8Tag = '[object Uint8Array]';\n            var uint8ClampedTag = '[object Uint8ClampedArray]';\n            var uint16Tag = '[object Uint16Array]';\n            var uint32Tag = '[object Uint32Array]';\n            /** Used to identify `toStringTag` values of typed arrays. */\n\n            var typedArrayTags = {};\n            typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;\n            typedArrayTags[argsTag$1] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag$1] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;\n            /**\n             * The base implementation of `_.isTypedArray` without Node.js optimizations.\n             *\n             * @private\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n             */\n\n            function baseIsTypedArray(value) {\n              return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n            }\n            /**\n             * The base implementation of `_.unary` without support for storing metadata.\n             *\n             * @private\n             * @param {Function} func The function to cap arguments for.\n             * @returns {Function} Returns the new capped function.\n             */\n\n\n            function baseUnary(func) {\n              return function (value) {\n                return func(value);\n              };\n            }\n            /** Detect free variable `exports`. */\n\n\n            var freeExports$1 = typeof exports == 'object' && exports && !exports.nodeType && exports;\n            /** Detect free variable `module`. */\n\n            var freeModule$1 = freeExports$1 && typeof module == 'object' && module && !module.nodeType && module;\n            /** Detect the popular CommonJS extension `module.exports`. */\n\n            var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;\n            /** Detect free variable `process` from Node.js. */\n\n            var freeProcess = moduleExports$1 && freeGlobal.process;\n            /** Used to access faster Node.js helpers. */\n\n            var nodeUtil = function () {\n              try {\n                // Use `util.types` for Node.js 10+.\n                var types = freeModule$1 && freeModule$1.require && freeModule$1.require('util').types;\n\n                if (types) {\n                  return types;\n                } // Legacy `process.binding('util')` for Node.js < 10.\n\n\n                return freeProcess && freeProcess.binding && freeProcess.binding('util');\n              } catch (e) {}\n            }();\n            /* Node.js helper references. */\n\n\n            var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n            /**\n             * Checks if `value` is classified as a typed array.\n             *\n             * @static\n             * @memberOf _\n             * @since 3.0.0\n             * @category Lang\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n             * @example\n             *\n             * _.isTypedArray(new Uint8Array);\n             * // => true\n             *\n             * _.isTypedArray([]);\n             * // => false\n             */\n\n            var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n            /** Used for built-in method references. */\n\n            var objectProto$2 = Object.prototype;\n            /** Used to check objects for own properties. */\n\n            var hasOwnProperty$1 = objectProto$2.hasOwnProperty;\n            /**\n             * Creates an array of the enumerable property names of the array-like `value`.\n             *\n             * @private\n             * @param {*} value The value to query.\n             * @param {boolean} inherited Specify returning inherited property names.\n             * @returns {Array} Returns the array of property names.\n             */\n\n            function arrayLikeKeys(value, inherited) {\n              var isArr = isArray(value),\n                  isArg = !isArr && isArguments(value),\n                  isBuff = !isArr && !isArg && isBuffer(value),\n                  isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n                  skipIndexes = isArr || isArg || isBuff || isType,\n                  result = skipIndexes ? baseTimes(value.length, String) : [],\n                  length = result.length;\n\n              for (var key in value) {\n                if ((inherited || hasOwnProperty$1.call(value, key)) && !(skipIndexes && ( // Safari 9 has enumerable `arguments.length` in strict mode.\n                key == 'length' || // Node.js 0.10 has enumerable non-index properties on buffers.\n                isBuff && (key == 'offset' || key == 'parent') || // PhantomJS 2 has enumerable non-index properties on typed arrays.\n                isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || // Skip index properties.\n                isIndex(key, length)))) {\n                  result.push(key);\n                }\n              }\n\n              return result;\n            }\n            /** Used for built-in method references. */\n\n\n            var objectProto$5 = Object.prototype;\n            /**\n             * Checks if `value` is likely a prototype object.\n             *\n             * @private\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n             */\n\n            function isPrototype(value) {\n              var Ctor = value && value.constructor,\n                  proto = typeof Ctor == 'function' && Ctor.prototype || objectProto$5;\n              return value === proto;\n            }\n            /**\n             * Creates a unary function that invokes `func` with its argument transformed.\n             *\n             * @private\n             * @param {Function} func The function to wrap.\n             * @param {Function} transform The argument transform.\n             * @returns {Function} Returns the new function.\n             */\n\n\n            function overArg(func, transform) {\n              return function (arg) {\n                return func(transform(arg));\n              };\n            }\n            /* Built-in method references for those with the same name as other `lodash` methods. */\n\n\n            var nativeKeys = overArg(Object.keys, Object);\n            /** Used for built-in method references. */\n\n            var objectProto$4 = Object.prototype;\n            /** Used to check objects for own properties. */\n\n            var hasOwnProperty$3 = objectProto$4.hasOwnProperty;\n            /**\n             * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n             *\n             * @private\n             * @param {Object} object The object to query.\n             * @returns {Array} Returns the array of property names.\n             */\n\n            function baseKeys(object) {\n              if (!isPrototype(object)) {\n                return nativeKeys(object);\n              }\n\n              var result = [];\n\n              for (var key in Object(object)) {\n                if (hasOwnProperty$3.call(object, key) && key != 'constructor') {\n                  result.push(key);\n                }\n              }\n\n              return result;\n            }\n            /**\n             * Creates an array of the own enumerable property names of `object`.\n             *\n             * **Note:** Non-object values are coerced to objects. See the\n             * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n             * for more details.\n             *\n             * @static\n             * @since 0.1.0\n             * @memberOf _\n             * @category Object\n             * @param {Object} object The object to query.\n             * @returns {Array} Returns the array of property names.\n             * @example\n             *\n             * function Foo() {\n             *   this.a = 1;\n             *   this.b = 2;\n             * }\n             *\n             * Foo.prototype.c = 3;\n             *\n             * _.keys(new Foo);\n             * // => ['a', 'b'] (iteration order is not guaranteed)\n             *\n             * _.keys('hi');\n             * // => ['0', '1']\n             */\n\n\n            function keys(object) {\n              return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n            }\n\n            function createArrayIterator(coll) {\n              var i = -1;\n              var len = coll.length;\n              return function next() {\n                return ++i < len ? {\n                  value: coll[i],\n                  key: i\n                } : null;\n              };\n            }\n\n            function createES2015Iterator(iterator) {\n              var i = -1;\n              return function next() {\n                var item = iterator.next();\n                if (item.done) return null;\n                i++;\n                return {\n                  value: item.value,\n                  key: i\n                };\n              };\n            }\n\n            function createObjectIterator(obj) {\n              var okeys = keys(obj);\n              var i = -1;\n              var len = okeys.length;\n              return function next() {\n                var key = okeys[++i];\n                return i < len ? {\n                  value: obj[key],\n                  key: key\n                } : null;\n              };\n            }\n\n            function iterator(coll) {\n              if (isArrayLike(coll)) {\n                return createArrayIterator(coll);\n              }\n\n              var iterator = getIterator(coll);\n              return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);\n            }\n\n            function onlyOnce(fn) {\n              return function () {\n                if (fn === null) throw new Error(\"Callback was already called.\");\n                var callFn = fn;\n                fn = null;\n                callFn.apply(this, arguments);\n              };\n            }\n\n            function _eachOfLimit(limit) {\n              return function (obj, iteratee, callback) {\n                callback = once(callback || noop);\n\n                if (limit <= 0 || !obj) {\n                  return callback(null);\n                }\n\n                var nextElem = iterator(obj);\n                var done = false;\n                var running = 0;\n                var looping = false;\n\n                function iterateeCallback(err, value) {\n                  running -= 1;\n\n                  if (err) {\n                    done = true;\n                    callback(err);\n                  } else if (value === breakLoop || done && running <= 0) {\n                    done = true;\n                    return callback(null);\n                  } else if (!looping) {\n                    replenish();\n                  }\n                }\n\n                function replenish() {\n                  looping = true;\n\n                  while (running < limit && !done) {\n                    var elem = nextElem();\n\n                    if (elem === null) {\n                      done = true;\n\n                      if (running <= 0) {\n                        callback(null);\n                      }\n\n                      return;\n                    }\n\n                    running += 1;\n                    iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));\n                  }\n\n                  looping = false;\n                }\n\n                replenish();\n              };\n            }\n            /**\n             * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a\n             * time.\n             *\n             * @name eachOfLimit\n             * @static\n             * @memberOf module:Collections\n             * @method\n             * @see [async.eachOf]{@link module:Collections.eachOf}\n             * @alias forEachOfLimit\n             * @category Collection\n             * @param {Array|Iterable|Object} coll - A collection to iterate over.\n             * @param {number} limit - The maximum number of async operations at a time.\n             * @param {AsyncFunction} iteratee - An async function to apply to each\n             * item in `coll`. The `key` is the item's key, or index in the case of an\n             * array.\n             * Invoked with (item, key, callback).\n             * @param {Function} [callback] - A callback which is called when all\n             * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n             */\n\n\n            function eachOfLimit(coll, limit, iteratee, callback) {\n              _eachOfLimit(limit)(coll, wrapAsync(iteratee), callback);\n            }\n\n            function doLimit(fn, limit) {\n              return function (iterable, iteratee, callback) {\n                return fn(iterable, limit, iteratee, callback);\n              };\n            } // eachOf implementation optimized for array-likes\n\n\n            function eachOfArrayLike(coll, iteratee, callback) {\n              callback = once(callback || noop);\n              var index = 0,\n                  completed = 0,\n                  length = coll.length;\n\n              if (length === 0) {\n                callback(null);\n              }\n\n              function iteratorCallback(err, value) {\n                if (err) {\n                  callback(err);\n                } else if (++completed === length || value === breakLoop) {\n                  callback(null);\n                }\n              }\n\n              for (; index < length; index++) {\n                iteratee(coll[index], index, onlyOnce(iteratorCallback));\n              }\n            } // a generic version of eachOf which can handle array, object, and iterator cases.\n\n\n            var eachOfGeneric = doLimit(eachOfLimit, Infinity);\n            /**\n             * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument\n             * to the iteratee.\n             *\n             * @name eachOf\n             * @static\n             * @memberOf module:Collections\n             * @method\n             * @alias forEachOf\n             * @category Collection\n             * @see [async.each]{@link module:Collections.each}\n             * @param {Array|Iterable|Object} coll - A collection to iterate over.\n             * @param {AsyncFunction} iteratee - A function to apply to each\n             * item in `coll`.\n             * The `key` is the item's key, or index in the case of an array.\n             * Invoked with (item, key, callback).\n             * @param {Function} [callback] - A callback which is called when all\n             * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n             * @example\n             *\n             * var obj = {dev: \"/dev.json\", test: \"/test.json\", prod: \"/prod.json\"};\n             * var configs = {};\n             *\n             * async.forEachOf(obj, function (value, key, callback) {\n             *     fs.readFile(__dirname + value, \"utf8\", function (err, data) {\n             *         if (err) return callback(err);\n             *         try {\n             *             configs[key] = JSON.parse(data);\n             *         } catch (e) {\n             *             return callback(e);\n             *         }\n             *         callback();\n             *     });\n             * }, function (err) {\n             *     if (err) console.error(err.message);\n             *     // configs is now a map of JSON data\n             *     doSomethingWith(configs);\n             * });\n             */\n\n            var eachOf = function eachOf(coll, iteratee, callback) {\n              var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;\n              eachOfImplementation(coll, wrapAsync(iteratee), callback);\n            };\n\n            function doParallel(fn) {\n              return function (obj, iteratee, callback) {\n                return fn(eachOf, obj, wrapAsync(iteratee), callback);\n              };\n            }\n\n            function _asyncMap(eachfn, arr, iteratee, callback) {\n              callback = callback || noop;\n              arr = arr || [];\n              var results = [];\n              var counter = 0;\n\n              var _iteratee = wrapAsync(iteratee);\n\n              eachfn(arr, function (value, _, callback) {\n                var index = counter++;\n\n                _iteratee(value, function (err, v) {\n                  results[index] = v;\n                  callback(err);\n                });\n              }, function (err) {\n                callback(err, results);\n              });\n            }\n            /**\n             * Produces a new collection of values by mapping each value in `coll` through\n             * the `iteratee` function. The `iteratee` is called with an item from `coll`\n             * and a callback for when it has finished processing. Each of these callback\n             * takes 2 arguments: an `error`, and the transformed item from `coll`. If\n             * `iteratee` passes an error to its callback, the main `callback` (for the\n             * `map` function) is immediately called with the error.\n             *\n             * Note, that since this function applies the `iteratee` to each item in\n             * parallel, there is no guarantee that the `iteratee` functions will complete\n             * in order. However, the results array will be in the same order as the\n             * original `coll`.\n             *\n             * If `map` is passed an Object, the results will be an Array.  The results\n             * will roughly be in the order of the original Objects' keys (but this can\n             * vary across JavaScript engines).\n             *\n             * @name map\n             * @static\n             * @memberOf module:Collections\n             * @method\n             * @category Collection\n             * @param {Array|Iterable|Object} coll - A collection to iterate over.\n             * @param {AsyncFunction} iteratee - An async function to apply to each item in\n             * `coll`.\n             * The iteratee should complete with the transformed item.\n             * Invoked with (item, callback).\n             * @param {Function} [callback] - A callback which is called when all `iteratee`\n             * functions have finished, or an error occurs. Results is an Array of the\n             * transformed items from the `coll`. Invoked with (err, results).\n             * @example\n             *\n             * async.map(['file1','file2','file3'], fs.stat, function(err, results) {\n             *     // results is now an array of stats for each file\n             * });\n             */\n\n\n            var map = doParallel(_asyncMap);\n            /**\n             * Applies the provided arguments to each function in the array, calling\n             * `callback` after all functions have completed. If you only provide the first\n             * argument, `fns`, then it will return a function which lets you pass in the\n             * arguments as if it were a single function call. If more arguments are\n             * provided, `callback` is required while `args` is still optional.\n             *\n             * @name applyEach\n             * @static\n             * @memberOf module:ControlFlow\n             * @method\n             * @category Control Flow\n             * @param {Array|Iterable|Object} fns - A collection of {@link AsyncFunction}s\n             * to all call with the same arguments\n             * @param {...*} [args] - any number of separate arguments to pass to the\n             * function.\n             * @param {Function} [callback] - the final argument should be the callback,\n             * called when all functions have completed processing.\n             * @returns {Function} - If only the first argument, `fns`, is provided, it will\n             * return a function which lets you pass in the arguments as if it were a single\n             * function call. The signature is `(..args, callback)`. If invoked with any\n             * arguments, `callback` is required.\n             * @example\n             *\n             * async.applyEach([enableSearch, updateSchema], 'bucket', callback);\n             *\n             * // partial application example:\n             * async.each(\n             *     buckets,\n             *     async.applyEach([enableSearch, updateSchema]),\n             *     callback\n             * );\n             */\n\n            var applyEach = applyEach$1(map);\n\n            function doParallelLimit(fn) {\n              return function (obj, limit, iteratee, callback) {\n                return fn(_eachOfLimit(limit), obj, wrapAsync(iteratee), callback);\n              };\n            }\n            /**\n             * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.\n             *\n             * @name mapLimit\n             * @static\n             * @memberOf module:Collections\n             * @method\n             * @see [async.map]{@link module:Collections.map}\n             * @category Collection\n             * @param {Array|Iterable|Object} coll - A collection to iterate over.\n             * @param {number} limit - The maximum number of async operations at a time.\n             * @param {AsyncFunction} iteratee - An async function to apply to each item in\n             * `coll`.\n             * The iteratee should complete with the transformed item.\n             * Invoked with (item, callback).\n             * @param {Function} [callback] - A callback which is called when all `iteratee`\n             * functions have finished, or an error occurs. Results is an array of the\n             * transformed items from the `coll`. Invoked with (err, results).\n             */\n\n\n            var mapLimit = doParallelLimit(_asyncMap);\n            /**\n             * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.\n             *\n             * @name mapSeries\n             * @static\n             * @memberOf module:Collections\n             * @method\n             * @see [async.map]{@link module:Collections.map}\n             * @category Collection\n             * @param {Array|Iterable|Object} coll - A collection to iterate over.\n             * @param {AsyncFunction} iteratee - An async function to apply to each item in\n             * `coll`.\n             * The iteratee should complete with the transformed item.\n             * Invoked with (item, callback).\n             * @param {Function} [callback] - A callback which is called when all `iteratee`\n             * functions have finished, or an error occurs. Results is an array of the\n             * transformed items from the `coll`. Invoked with (err, results).\n             */\n\n            var mapSeries = doLimit(mapLimit, 1);\n            /**\n             * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.\n             *\n             * @name applyEachSeries\n             * @static\n             * @memberOf module:ControlFlow\n             * @method\n             * @see [async.applyEach]{@link module:ControlFlow.applyEach}\n             * @category Control Flow\n             * @param {Array|Iterable|Object} fns - A collection of {@link AsyncFunction}s to all\n             * call with the same arguments\n             * @param {...*} [args] - any number of separate arguments to pass to the\n             * function.\n             * @param {Function} [callback] - the final argument should be the callback,\n             * called when all functions have completed processing.\n             * @returns {Function} - If only the first argument is provided, it will return\n             * a function which lets you pass in the arguments as if it were a single\n             * function call.\n             */\n\n            var applyEachSeries = applyEach$1(mapSeries);\n            /**\n             * A specialized version of `_.forEach` for arrays without support for\n             * iteratee shorthands.\n             *\n             * @private\n             * @param {Array} [array] The array to iterate over.\n             * @param {Function} iteratee The function invoked per iteration.\n             * @returns {Array} Returns `array`.\n             */\n\n            function arrayEach(array, iteratee) {\n              var index = -1,\n                  length = array == null ? 0 : array.length;\n\n              while (++index < length) {\n                if (iteratee(array[index], index, array) === false) {\n                  break;\n                }\n              }\n\n              return array;\n            }\n            /**\n             * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n             *\n             * @private\n             * @param {boolean} [fromRight] Specify iterating from right to left.\n             * @returns {Function} Returns the new base function.\n             */\n\n\n            function createBaseFor(fromRight) {\n              return function (object, iteratee, keysFunc) {\n                var index = -1,\n                    iterable = Object(object),\n                    props = keysFunc(object),\n                    length = props.length;\n\n                while (length--) {\n                  var key = props[fromRight ? length : ++index];\n\n                  if (iteratee(iterable[key], key, iterable) === false) {\n                    break;\n                  }\n                }\n\n                return object;\n              };\n            }\n            /**\n             * The base implementation of `baseForOwn` which iterates over `object`\n             * properties returned by `keysFunc` and invokes `iteratee` for each property.\n             * Iteratee functions may exit iteration early by explicitly returning `false`.\n             *\n             * @private\n             * @param {Object} object The object to iterate over.\n             * @param {Function} iteratee The function invoked per iteration.\n             * @param {Function} keysFunc The function to get the keys of `object`.\n             * @returns {Object} Returns `object`.\n             */\n\n\n            var baseFor = createBaseFor();\n            /**\n             * The base implementation of `_.forOwn` without support for iteratee shorthands.\n             *\n             * @private\n             * @param {Object} object The object to iterate over.\n             * @param {Function} iteratee The function invoked per iteration.\n             * @returns {Object} Returns `object`.\n             */\n\n            function baseForOwn(object, iteratee) {\n              return object && baseFor(object, iteratee, keys);\n            }\n            /**\n             * The base implementation of `_.findIndex` and `_.findLastIndex` without\n             * support for iteratee shorthands.\n             *\n             * @private\n             * @param {Array} array The array to inspect.\n             * @param {Function} predicate The function invoked per iteration.\n             * @param {number} fromIndex The index to search from.\n             * @param {boolean} [fromRight] Specify iterating from right to left.\n             * @returns {number} Returns the index of the matched value, else `-1`.\n             */\n\n\n            function baseFindIndex(array, predicate, fromIndex, fromRight) {\n              var length = array.length,\n                  index = fromIndex + (fromRight ? 1 : -1);\n\n              while (fromRight ? index-- : ++index < length) {\n                if (predicate(array[index], index, array)) {\n                  return index;\n                }\n              }\n\n              return -1;\n            }\n            /**\n             * The base implementation of `_.isNaN` without support for number objects.\n             *\n             * @private\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n             */\n\n\n            function baseIsNaN(value) {\n              return value !== value;\n            }\n            /**\n             * A specialized version of `_.indexOf` which performs strict equality\n             * comparisons of values, i.e. `===`.\n             *\n             * @private\n             * @param {Array} array The array to inspect.\n             * @param {*} value The value to search for.\n             * @param {number} fromIndex The index to search from.\n             * @returns {number} Returns the index of the matched value, else `-1`.\n             */\n\n\n            function strictIndexOf(array, value, fromIndex) {\n              var index = fromIndex - 1,\n                  length = array.length;\n\n              while (++index < length) {\n                if (array[index] === value) {\n                  return index;\n                }\n              }\n\n              return -1;\n            }\n            /**\n             * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n             *\n             * @private\n             * @param {Array} array The array to inspect.\n             * @param {*} value The value to search for.\n             * @param {number} fromIndex The index to search from.\n             * @returns {number} Returns the index of the matched value, else `-1`.\n             */\n\n\n            function baseIndexOf(array, value, fromIndex) {\n              return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);\n            }\n            /**\n             * Determines the best order for running the {@link AsyncFunction}s in `tasks`, based on\n             * their requirements. Each function can optionally depend on other functions\n             * being completed first, and each function is run as soon as its requirements\n             * are satisfied.\n             *\n             * If any of the {@link AsyncFunction}s pass an error to their callback, the `auto` sequence\n             * will stop. Further tasks will not execute (so any other functions depending\n             * on it will not run), and the main `callback` is immediately called with the\n             * error.\n             *\n             * {@link AsyncFunction}s also receive an object containing the results of functions which\n             * have completed so far as the first argument, if they have dependencies. If a\n             * task function has no dependencies, it will only be passed a callback.\n             *\n             * @name auto\n             * @static\n             * @memberOf module:ControlFlow\n             * @method\n             * @category Control Flow\n             * @param {Object} tasks - An object. Each of its properties is either a\n             * function or an array of requirements, with the {@link AsyncFunction} itself the last item\n             * in the array. The object's key of a property serves as the name of the task\n             * defined by that property, i.e. can be used when specifying requirements for\n             * other tasks. The function receives one or two arguments:\n             * * a `results` object, containing the results of the previously executed\n             *   functions, only passed if the task has any dependencies,\n             * * a `callback(err, result)` function, which must be called when finished,\n             *   passing an `error` (which can be `null`) and the result of the function's\n             *   execution.\n             * @param {number} [concurrency=Infinity] - An optional `integer` for\n             * determining the maximum number of tasks that can be run in parallel. By\n             * default, as many as possible.\n             * @param {Function} [callback] - An optional callback which is called when all\n             * the tasks have been completed. It receives the `err` argument if any `tasks`\n             * pass an error to their callback. Results are always returned; however, if an\n             * error occurs, no further `tasks` will be performed, and the results object\n             * will only contain partial results. Invoked with (err, results).\n             * @returns undefined\n             * @example\n             *\n             * async.auto({\n             *     // this function will just be passed a callback\n             *     readData: async.apply(fs.readFile, 'data.txt', 'utf-8'),\n             *     showData: ['readData', function(results, cb) {\n             *         // results.readData is the file's contents\n             *         // ...\n             *     }]\n             * }, callback);\n             *\n             * async.auto({\n             *     get_data: function(callback) {\n             *         console.log('in get_data');\n             *         // async code to get some data\n             *         callback(null, 'data', 'converted to array');\n             *     },\n             *     make_folder: function(callback) {\n             *         console.log('in make_folder');\n             *         // async code to create a directory to store a file in\n             *         // this is run at the same time as getting the data\n             *         callback(null, 'folder');\n             *     },\n             *     write_file: ['get_data', 'make_folder', function(results, callback) {\n             *         console.log('in write_file', JSON.stringify(results));\n             *         // once there is some data and the directory exists,\n             *         // write the data to a file in the directory\n             *         callback(null, 'filename');\n             *     }],\n             *     email_link: ['write_file', function(results, callback) {\n             *         console.log('in email_link', JSON.stringify(results));\n             *         // once the file is written let's email a link to it...\n             *         // results.write_file contains the filename returned by write_file.\n             *         callback(null, {'file':results.write_file, 'email':'user@example.com'});\n             *     }]\n             * }, function(err, results) {\n             *     console.log('err = ', err);\n             *     console.log('results = ', results);\n             * });\n             */\n\n\n            var auto = function auto(tasks, concurrency, callback) {\n              if (typeof concurrency === 'function') {\n                // concurrency is optional, shift the args.\n                callback = concurrency;\n                concurrency = null;\n              }\n\n              callback = once(callback || noop);\n              var keys$$1 = keys(tasks);\n              var numTasks = keys$$1.length;\n\n              if (!numTasks) {\n                return callback(null);\n              }\n\n              if (!concurrency) {\n                concurrency = numTasks;\n              }\n\n              var results = {};\n              var runningTasks = 0;\n              var hasError = false;\n              var listeners = Object.create(null);\n              var readyTasks = []; // for cycle detection:\n\n              var readyToCheck = []; // tasks that have been identified as reachable\n              // without the possibility of returning to an ancestor task\n\n              var uncheckedDependencies = {};\n              baseForOwn(tasks, function (task, key) {\n                if (!isArray(task)) {\n                  // no dependencies\n                  enqueueTask(key, [task]);\n                  readyToCheck.push(key);\n                  return;\n                }\n\n                var dependencies = task.slice(0, task.length - 1);\n                var remainingDependencies = dependencies.length;\n\n                if (remainingDependencies === 0) {\n                  enqueueTask(key, task);\n                  readyToCheck.push(key);\n                  return;\n                }\n\n                uncheckedDependencies[key] = remainingDependencies;\n                arrayEach(dependencies, function (dependencyName) {\n                  if (!tasks[dependencyName]) {\n                    throw new Error('async.auto task `' + key + '` has a non-existent dependency `' + dependencyName + '` in ' + dependencies.join(', '));\n                  }\n\n                  addListener(dependencyName, function () {\n                    remainingDependencies--;\n\n                    if (remainingDependencies === 0) {\n                      enqueueTask(key, task);\n                    }\n                  });\n                });\n              });\n              checkForDeadlocks();\n              processQueue();\n\n              function enqueueTask(key, task) {\n                readyTasks.push(function () {\n                  runTask(key, task);\n                });\n              }\n\n              function processQueue() {\n                if (readyTasks.length === 0 && runningTasks === 0) {\n                  return callback(null, results);\n                }\n\n                while (readyTasks.length && runningTasks < concurrency) {\n                  var run = readyTasks.shift();\n                  run();\n                }\n              }\n\n              function addListener(taskName, fn) {\n                var taskListeners = listeners[taskName];\n\n                if (!taskListeners) {\n                  taskListeners = listeners[taskName] = [];\n                }\n\n                taskListeners.push(fn);\n              }\n\n              function taskComplete(taskName) {\n                var taskListeners = listeners[taskName] || [];\n                arrayEach(taskListeners, function (fn) {\n                  fn();\n                });\n                processQueue();\n              }\n\n              function runTask(key, task) {\n                if (hasError) return;\n                var taskCallback = onlyOnce(function (err, result) {\n                  runningTasks--;\n\n                  if (arguments.length > 2) {\n                    result = slice(arguments, 1);\n                  }\n\n                  if (err) {\n                    var safeResults = {};\n                    baseForOwn(results, function (val, rkey) {\n                      safeResults[rkey] = val;\n                    });\n                    safeResults[key] = result;\n                    hasError = true;\n                    listeners = Object.create(null);\n                    callback(err, safeResults);\n                  } else {\n                    results[key] = result;\n                    taskComplete(key);\n                  }\n                });\n                runningTasks++;\n                var taskFn = wrapAsync(task[task.length - 1]);\n\n                if (task.length > 1) {\n                  taskFn(results, taskCallback);\n                } else {\n                  taskFn(taskCallback);\n                }\n              }\n\n              function checkForDeadlocks() {\n                // Kahn's algorithm\n                // https://en.wikipedia.org/wiki/Topological_sorting#Kahn.27s_algorithm\n                // http://connalle.blogspot.com/2013/10/topological-sortingkahn-algorithm.html\n                var currentTask;\n                var counter = 0;\n\n                while (readyToCheck.length) {\n                  currentTask = readyToCheck.pop();\n                  counter++;\n                  arrayEach(getDependents(currentTask), function (dependent) {\n                    if (--uncheckedDependencies[dependent] === 0) {\n                      readyToCheck.push(dependent);\n                    }\n                  });\n                }\n\n                if (counter !== numTasks) {\n                  throw new Error('async.auto cannot execute tasks due to a recursive dependency');\n                }\n              }\n\n              function getDependents(taskName) {\n                var result = [];\n                baseForOwn(tasks, function (task, key) {\n                  if (isArray(task) && baseIndexOf(task, taskName, 0) >= 0) {\n                    result.push(key);\n                  }\n                });\n                return result;\n              }\n            };\n            /**\n             * A specialized version of `_.map` for arrays without support for iteratee\n             * shorthands.\n             *\n             * @private\n             * @param {Array} [array] The array to iterate over.\n             * @param {Function} iteratee The function invoked per iteration.\n             * @returns {Array} Returns the new mapped array.\n             */\n\n\n            function arrayMap(array, iteratee) {\n              var index = -1,\n                  length = array == null ? 0 : array.length,\n                  result = Array(length);\n\n              while (++index < length) {\n                result[index] = iteratee(array[index], index, array);\n              }\n\n              return result;\n            }\n            /** `Object#toString` result references. */\n\n\n            var symbolTag = '[object Symbol]';\n            /**\n             * Checks if `value` is classified as a `Symbol` primitive or object.\n             *\n             * @static\n             * @memberOf _\n             * @since 4.0.0\n             * @category Lang\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n             * @example\n             *\n             * _.isSymbol(Symbol.iterator);\n             * // => true\n             *\n             * _.isSymbol('abc');\n             * // => false\n             */\n\n            function isSymbol(value) {\n              return typeof value == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;\n            }\n            /** Used as references for various `Number` constants. */\n\n\n            var INFINITY = 1 / 0;\n            /** Used to convert symbols to primitives and strings. */\n\n            var symbolProto = Symbol$1 ? Symbol$1.prototype : undefined;\n            var symbolToString = symbolProto ? symbolProto.toString : undefined;\n            /**\n             * The base implementation of `_.toString` which doesn't convert nullish\n             * values to empty strings.\n             *\n             * @private\n             * @param {*} value The value to process.\n             * @returns {string} Returns the string.\n             */\n\n            function baseToString(value) {\n              // Exit early for strings to avoid a performance hit in some environments.\n              if (typeof value == 'string') {\n                return value;\n              }\n\n              if (isArray(value)) {\n                // Recursively convert values (susceptible to call stack limits).\n                return arrayMap(value, baseToString) + '';\n              }\n\n              if (isSymbol(value)) {\n                return symbolToString ? symbolToString.call(value) : '';\n              }\n\n              var result = value + '';\n              return result == '0' && 1 / value == -INFINITY ? '-0' : result;\n            }\n            /**\n             * The base implementation of `_.slice` without an iteratee call guard.\n             *\n             * @private\n             * @param {Array} array The array to slice.\n             * @param {number} [start=0] The start position.\n             * @param {number} [end=array.length] The end position.\n             * @returns {Array} Returns the slice of `array`.\n             */\n\n\n            function baseSlice(array, start, end) {\n              var index = -1,\n                  length = array.length;\n\n              if (start < 0) {\n                start = -start > length ? 0 : length + start;\n              }\n\n              end = end > length ? length : end;\n\n              if (end < 0) {\n                end += length;\n              }\n\n              length = start > end ? 0 : end - start >>> 0;\n              start >>>= 0;\n              var result = Array(length);\n\n              while (++index < length) {\n                result[index] = array[index + start];\n              }\n\n              return result;\n            }\n            /**\n             * Casts `array` to a slice if it's needed.\n             *\n             * @private\n             * @param {Array} array The array to inspect.\n             * @param {number} start The start position.\n             * @param {number} [end=array.length] The end position.\n             * @returns {Array} Returns the cast slice.\n             */\n\n\n            function castSlice(array, start, end) {\n              var length = array.length;\n              end = end === undefined ? length : end;\n              return !start && end >= length ? array : baseSlice(array, start, end);\n            }\n            /**\n             * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol\n             * that is not found in the character symbols.\n             *\n             * @private\n             * @param {Array} strSymbols The string symbols to inspect.\n             * @param {Array} chrSymbols The character symbols to find.\n             * @returns {number} Returns the index of the last unmatched string symbol.\n             */\n\n\n            function charsEndIndex(strSymbols, chrSymbols) {\n              var index = strSymbols.length;\n\n              while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n\n              return index;\n            }\n            /**\n             * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol\n             * that is not found in the character symbols.\n             *\n             * @private\n             * @param {Array} strSymbols The string symbols to inspect.\n             * @param {Array} chrSymbols The character symbols to find.\n             * @returns {number} Returns the index of the first unmatched string symbol.\n             */\n\n\n            function charsStartIndex(strSymbols, chrSymbols) {\n              var index = -1,\n                  length = strSymbols.length;\n\n              while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n\n              return index;\n            }\n            /**\n             * Converts an ASCII `string` to an array.\n             *\n             * @private\n             * @param {string} string The string to convert.\n             * @returns {Array} Returns the converted array.\n             */\n\n\n            function asciiToArray(string) {\n              return string.split('');\n            }\n            /** Used to compose unicode character classes. */\n\n\n            var rsAstralRange = \"\\\\ud800-\\\\udfff\";\n            var rsComboMarksRange = \"\\\\u0300-\\\\u036f\";\n            var reComboHalfMarksRange = \"\\\\ufe20-\\\\ufe2f\";\n            var rsComboSymbolsRange = \"\\\\u20d0-\\\\u20ff\";\n            var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;\n            var rsVarRange = \"\\\\ufe0e\\\\ufe0f\";\n            /** Used to compose unicode capture groups. */\n\n            var rsZWJ = \"\\\\u200d\";\n            /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\n\n            var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']');\n            /**\n             * Checks if `string` contains Unicode symbols.\n             *\n             * @private\n             * @param {string} string The string to inspect.\n             * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n             */\n\n            function hasUnicode(string) {\n              return reHasUnicode.test(string);\n            }\n            /** Used to compose unicode character classes. */\n\n\n            var rsAstralRange$1 = \"\\\\ud800-\\\\udfff\";\n            var rsComboMarksRange$1 = \"\\\\u0300-\\\\u036f\";\n            var reComboHalfMarksRange$1 = \"\\\\ufe20-\\\\ufe2f\";\n            var rsComboSymbolsRange$1 = \"\\\\u20d0-\\\\u20ff\";\n            var rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1;\n            var rsVarRange$1 = \"\\\\ufe0e\\\\ufe0f\";\n            /** Used to compose unicode capture groups. */\n\n            var rsAstral = '[' + rsAstralRange$1 + ']';\n            var rsCombo = '[' + rsComboRange$1 + ']';\n            var rsFitz = \"\\\\ud83c[\\\\udffb-\\\\udfff]\";\n            var rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')';\n            var rsNonAstral = '[^' + rsAstralRange$1 + ']';\n            var rsRegional = \"(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}\";\n            var rsSurrPair = \"[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]\";\n            var rsZWJ$1 = \"\\\\u200d\";\n            /** Used to compose unicode regexes. */\n\n            var reOptMod = rsModifier + '?';\n            var rsOptVar = '[' + rsVarRange$1 + ']?';\n            var rsOptJoin = '(?:' + rsZWJ$1 + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*';\n            var rsSeq = rsOptVar + reOptMod + rsOptJoin;\n            var rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n            /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\n\n            var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n            /**\n             * Converts a Unicode `string` to an array.\n             *\n             * @private\n             * @param {string} string The string to convert.\n             * @returns {Array} Returns the converted array.\n             */\n\n            function unicodeToArray(string) {\n              return string.match(reUnicode) || [];\n            }\n            /**\n             * Converts `string` to an array.\n             *\n             * @private\n             * @param {string} string The string to convert.\n             * @returns {Array} Returns the converted array.\n             */\n\n\n            function stringToArray(string) {\n              return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);\n            }\n            /**\n             * Converts `value` to a string. An empty string is returned for `null`\n             * and `undefined` values. The sign of `-0` is preserved.\n             *\n             * @static\n             * @memberOf _\n             * @since 4.0.0\n             * @category Lang\n             * @param {*} value The value to convert.\n             * @returns {string} Returns the converted string.\n             * @example\n             *\n             * _.toString(null);\n             * // => ''\n             *\n             * _.toString(-0);\n             * // => '-0'\n             *\n             * _.toString([1, 2, 3]);\n             * // => '1,2,3'\n             */\n\n\n            function toString(value) {\n              return value == null ? '' : baseToString(value);\n            }\n            /** Used to match leading and trailing whitespace. */\n\n\n            var reTrim = /^\\s+|\\s+$/g;\n            /**\n             * Removes leading and trailing whitespace or specified characters from `string`.\n             *\n             * @static\n             * @memberOf _\n             * @since 3.0.0\n             * @category String\n             * @param {string} [string=''] The string to trim.\n             * @param {string} [chars=whitespace] The characters to trim.\n             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n             * @returns {string} Returns the trimmed string.\n             * @example\n             *\n             * _.trim('  abc  ');\n             * // => 'abc'\n             *\n             * _.trim('-_-abc-_-', '_-');\n             * // => 'abc'\n             *\n             * _.map(['  foo  ', '  bar  '], _.trim);\n             * // => ['foo', 'bar']\n             */\n\n            function trim(string, chars, guard) {\n              string = toString(string);\n\n              if (string && (guard || chars === undefined)) {\n                return string.replace(reTrim, '');\n              }\n\n              if (!string || !(chars = baseToString(chars))) {\n                return string;\n              }\n\n              var strSymbols = stringToArray(string),\n                  chrSymbols = stringToArray(chars),\n                  start = charsStartIndex(strSymbols, chrSymbols),\n                  end = charsEndIndex(strSymbols, chrSymbols) + 1;\n              return castSlice(strSymbols, start, end).join('');\n            }\n\n            var FN_ARGS = /^(?:async\\s+)?(function)?\\s*[^\\(]*\\(\\s*([^\\)]*)\\)/m;\n            var FN_ARG_SPLIT = /,/;\n            var FN_ARG = /(=.+)?(\\s*)$/;\n            var STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\n\n            function parseParams(func) {\n              func = func.toString().replace(STRIP_COMMENTS, '');\n              func = func.match(FN_ARGS)[2].replace(' ', '');\n              func = func ? func.split(FN_ARG_SPLIT) : [];\n              func = func.map(function (arg) {\n                return trim(arg.replace(FN_ARG, ''));\n              });\n              return func;\n            }\n            /**\n             * A dependency-injected version of the [async.auto]{@link module:ControlFlow.auto} function. Dependent\n             * tasks are specified as parameters to the function, after the usual callback\n             * parameter, with the parameter names matching the names of the tasks it\n             * depends on. This can provide even more readable task graphs which can be\n             * easier to maintain.\n             *\n             * If a final callback is specified, the task results are similarly injected,\n             * specified as named parameters after the initial error parameter.\n             *\n             * The autoInject function is purely syntactic sugar and its semantics are\n             * otherwise equivalent to [async.auto]{@link module:ControlFlow.auto}.\n             *\n             * @name autoInject\n             * @static\n             * @memberOf module:ControlFlow\n             * @method\n             * @see [async.auto]{@link module:ControlFlow.auto}\n             * @category Control Flow\n             * @param {Object} tasks - An object, each of whose properties is an {@link AsyncFunction} of\n             * the form 'func([dependencies...], callback). The object's key of a property\n             * serves as the name of the task defined by that property, i.e. can be used\n             * when specifying requirements for other tasks.\n             * * The `callback` parameter is a `callback(err, result)` which must be called\n             *   when finished, passing an `error` (which can be `null`) and the result of\n             *   the function's execution. The remaining parameters name other tasks on\n             *   which the task is dependent, and the results from those tasks are the\n             *   arguments of those parameters.\n             * @param {Function} [callback] - An optional callback which is called when all\n             * the tasks have been completed. It receives the `err` argument if any `tasks`\n             * pass an error to their callback, and a `results` object with any completed\n             * task results, similar to `auto`.\n             * @example\n             *\n             * //  The example from `auto` can be rewritten as follows:\n             * async.autoInject({\n             *     get_data: function(callback) {\n             *         // async code to get some data\n             *         callback(null, 'data', 'converted to array');\n             *     },\n             *     make_folder: function(callback) {\n             *         // async code to create a directory to store a file in\n             *         // this is run at the same time as getting the data\n             *         callback(null, 'folder');\n             *     },\n             *     write_file: function(get_data, make_folder, callback) {\n             *         // once there is some data and the directory exists,\n             *         // write the data to a file in the directory\n             *         callback(null, 'filename');\n             *     },\n             *     email_link: function(write_file, callback) {\n             *         // once the file is written let's email a link to it...\n             *         // write_file contains the filename returned by write_file.\n             *         callback(null, {'file':write_file, 'email':'user@example.com'});\n             *     }\n             * }, function(err, results) {\n             *     console.log('err = ', err);\n             *     console.log('email_link = ', results.email_link);\n             * });\n             *\n             * // If you are using a JS minifier that mangles parameter names, `autoInject`\n             * // will not work with plain functions, since the parameter names will be\n             * // collapsed to a single letter identifier.  To work around this, you can\n             * // explicitly specify the names of the parameters your task function needs\n             * // in an array, similar to Angular.js dependency injection.\n             *\n             * // This still has an advantage over plain `auto`, since the results a task\n             * // depends on are still spread into arguments.\n             * async.autoInject({\n             *     //...\n             *     write_file: ['get_data', 'make_folder', function(get_data, make_folder, callback) {\n             *         callback(null, 'filename');\n             *     }],\n             *     email_link: ['write_file', function(write_file, callback) {\n             *         callback(null, {'file':write_file, 'email':'user@example.com'});\n             *     }]\n             *     //...\n             * }, function(err, results) {\n             *     console.log('err = ', err);\n             *     console.log('email_link = ', results.email_link);\n             * });\n             */\n\n\n            function autoInject(tasks, callback) {\n              var newTasks = {};\n              baseForOwn(tasks, function (taskFn, key) {\n                var params;\n                var fnIsAsync = isAsync(taskFn);\n                var hasNoDeps = !fnIsAsync && taskFn.length === 1 || fnIsAsync && taskFn.length === 0;\n\n                if (isArray(taskFn)) {\n                  params = taskFn.slice(0, -1);\n                  taskFn = taskFn[taskFn.length - 1];\n                  newTasks[key] = params.concat(params.length > 0 ? newTask : taskFn);\n                } else if (hasNoDeps) {\n                  // no dependencies, use the function as-is\n                  newTasks[key] = taskFn;\n                } else {\n                  params = parseParams(taskFn);\n\n                  if (taskFn.length === 0 && !fnIsAsync && params.length === 0) {\n                    throw new Error(\"autoInject task functions require explicit parameters.\");\n                  } // remove callback param\n\n\n                  if (!fnIsAsync) params.pop();\n                  newTasks[key] = params.concat(newTask);\n                }\n\n                function newTask(results, taskCb) {\n                  var newArgs = arrayMap(params, function (name) {\n                    return results[name];\n                  });\n                  newArgs.push(taskCb);\n                  wrapAsync(taskFn).apply(null, newArgs);\n                }\n              });\n              auto(newTasks, callback);\n            } // Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation\n            // used for queues. This implementation assumes that the node provided by the user can be modified\n            // to adjust the next and last properties. We implement only the minimal functionality\n            // for queue support.\n\n\n            function DLL() {\n              this.head = this.tail = null;\n              this.length = 0;\n            }\n\n            function setInitial(dll, node) {\n              dll.length = 1;\n              dll.head = dll.tail = node;\n            }\n\n            DLL.prototype.removeLink = function (node) {\n              if (node.prev) node.prev.next = node.next;else this.head = node.next;\n              if (node.next) node.next.prev = node.prev;else this.tail = node.prev;\n              node.prev = node.next = null;\n              this.length -= 1;\n              return node;\n            };\n\n            DLL.prototype.empty = function () {\n              while (this.head) {\n                this.shift();\n              }\n\n              return this;\n            };\n\n            DLL.prototype.insertAfter = function (node, newNode) {\n              newNode.prev = node;\n              newNode.next = node.next;\n              if (node.next) node.next.prev = newNode;else this.tail = newNode;\n              node.next = newNode;\n              this.length += 1;\n            };\n\n            DLL.prototype.insertBefore = function (node, newNode) {\n              newNode.prev = node.prev;\n              newNode.next = node;\n              if (node.prev) node.prev.next = newNode;else this.head = newNode;\n              node.prev = newNode;\n              this.length += 1;\n            };\n\n            DLL.prototype.unshift = function (node) {\n              if (this.head) this.insertBefore(this.head, node);else setInitial(this, node);\n            };\n\n            DLL.prototype.push = function (node) {\n              if (this.tail) this.insertAfter(this.tail, node);else setInitial(this, node);\n            };\n\n            DLL.prototype.shift = function () {\n              return this.head && this.removeLink(this.head);\n            };\n\n            DLL.prototype.pop = function () {\n              return this.tail && this.removeLink(this.tail);\n            };\n\n            DLL.prototype.toArray = function () {\n              var arr = Array(this.length);\n              var curr = this.head;\n\n              for (var idx = 0; idx < this.length; idx++) {\n                arr[idx] = curr.data;\n                curr = curr.next;\n              }\n\n              return arr;\n            };\n\n            DLL.prototype.remove = function (testFn) {\n              var curr = this.head;\n\n              while (!!curr) {\n                var next = curr.next;\n\n                if (testFn(curr)) {\n                  this.removeLink(curr);\n                }\n\n                curr = next;\n              }\n\n              return this;\n            };\n\n            function queue(worker, concurrency, payload) {\n              if (concurrency == null) {\n                concurrency = 1;\n              } else if (concurrency === 0) {\n                throw new Error('Concurrency must not be zero');\n              }\n\n              var _worker = wrapAsync(worker);\n\n              var numRunning = 0;\n              var _workersList = [];\n              var processingScheduled = false;\n\n              function _insert(data, insertAtFront, callback) {\n                if (callback != null && typeof callback !== 'function') {\n                  throw new Error('task callback must be a function');\n                }\n\n                q.started = true;\n\n                if (!isArray(data)) {\n                  data = [data];\n                }\n\n                if (data.length === 0 && q.idle()) {\n                  // call drain immediately if there are no tasks\n                  return setImmediate$1(function () {\n                    q.drain();\n                  });\n                }\n\n                for (var i = 0, l = data.length; i < l; i++) {\n                  var item = {\n                    data: data[i],\n                    callback: callback || noop\n                  };\n\n                  if (insertAtFront) {\n                    q._tasks.unshift(item);\n                  } else {\n                    q._tasks.push(item);\n                  }\n                }\n\n                if (!processingScheduled) {\n                  processingScheduled = true;\n                  setImmediate$1(function () {\n                    processingScheduled = false;\n                    q.process();\n                  });\n                }\n              }\n\n              function _next(tasks) {\n                return function (err) {\n                  numRunning -= 1;\n\n                  for (var i = 0, l = tasks.length; i < l; i++) {\n                    var task = tasks[i];\n                    var index = baseIndexOf(_workersList, task, 0);\n\n                    if (index === 0) {\n                      _workersList.shift();\n                    } else if (index > 0) {\n                      _workersList.splice(index, 1);\n                    }\n\n                    task.callback.apply(task, arguments);\n\n                    if (err != null) {\n                      q.error(err, task.data);\n                    }\n                  }\n\n                  if (numRunning <= q.concurrency - q.buffer) {\n                    q.unsaturated();\n                  }\n\n                  if (q.idle()) {\n                    q.drain();\n                  }\n\n                  q.process();\n                };\n              }\n\n              var isProcessing = false;\n              var q = {\n                _tasks: new DLL(),\n                concurrency: concurrency,\n                payload: payload,\n                saturated: noop,\n                unsaturated: noop,\n                buffer: concurrency / 4,\n                empty: noop,\n                drain: noop,\n                error: noop,\n                started: false,\n                paused: false,\n                push: function push(data, callback) {\n                  _insert(data, false, callback);\n                },\n                kill: function kill() {\n                  q.drain = noop;\n\n                  q._tasks.empty();\n                },\n                unshift: function unshift(data, callback) {\n                  _insert(data, true, callback);\n                },\n                remove: function remove(testFn) {\n                  q._tasks.remove(testFn);\n                },\n                process: function process() {\n                  // Avoid trying to start too many processing operations. This can occur\n                  // when callbacks resolve synchronously (#1267).\n                  if (isProcessing) {\n                    return;\n                  }\n\n                  isProcessing = true;\n\n                  while (!q.paused && numRunning < q.concurrency && q._tasks.length) {\n                    var tasks = [],\n                        data = [];\n                    var l = q._tasks.length;\n                    if (q.payload) l = Math.min(l, q.payload);\n\n                    for (var i = 0; i < l; i++) {\n                      var node = q._tasks.shift();\n\n                      tasks.push(node);\n\n                      _workersList.push(node);\n\n                      data.push(node.data);\n                    }\n\n                    numRunning += 1;\n\n                    if (q._tasks.length === 0) {\n                      q.empty();\n                    }\n\n                    if (numRunning === q.concurrency) {\n                      q.saturated();\n                    }\n\n                    var cb = onlyOnce(_next(tasks));\n\n                    _worker(data, cb);\n                  }\n\n                  isProcessing = false;\n                },\n                length: function length() {\n                  return q._tasks.length;\n                },\n                running: function running() {\n                  return numRunning;\n                },\n                workersList: function workersList() {\n                  return _workersList;\n                },\n                idle: function idle() {\n                  return q._tasks.length + numRunning === 0;\n                },\n                pause: function pause() {\n                  q.paused = true;\n                },\n                resume: function resume() {\n                  if (q.paused === false) {\n                    return;\n                  }\n\n                  q.paused = false;\n                  setImmediate$1(q.process);\n                }\n              };\n              return q;\n            }\n            /**\n             * A cargo of tasks for the worker function to complete. Cargo inherits all of\n             * the same methods and event callbacks as [`queue`]{@link module:ControlFlow.queue}.\n             * @typedef {Object} CargoObject\n             * @memberOf module:ControlFlow\n             * @property {Function} length - A function returning the number of items\n             * waiting to be processed. Invoke like `cargo.length()`.\n             * @property {number} payload - An `integer` for determining how many tasks\n             * should be process per round. This property can be changed after a `cargo` is\n             * created to alter the payload on-the-fly.\n             * @property {Function} push - Adds `task` to the `queue`. The callback is\n             * called once the `worker` has finished processing the task. Instead of a\n             * single task, an array of `tasks` can be submitted. The respective callback is\n             * used for every task in the list. Invoke like `cargo.push(task, [callback])`.\n             * @property {Function} saturated - A callback that is called when the\n             * `queue.length()` hits the concurrency and further tasks will be queued.\n             * @property {Function} empty - A callback that is called when the last item\n             * from the `queue` is given to a `worker`.\n             * @property {Function} drain - A callback that is called when the last item\n             * from the `queue` has returned from the `worker`.\n             * @property {Function} idle - a function returning false if there are items\n             * waiting or being processed, or true if not. Invoke like `cargo.idle()`.\n             * @property {Function} pause - a function that pauses the processing of tasks\n             * until `resume()` is called. Invoke like `cargo.pause()`.\n             * @property {Function} resume - a function that resumes the processing of\n             * queued tasks when the queue is paused. Invoke like `cargo.resume()`.\n             * @property {Function} kill - a function that removes the `drain` callback and\n             * empties remaining tasks from the queue forcing it to go idle. Invoke like `cargo.kill()`.\n             */\n\n            /**\n             * Creates a `cargo` object with the specified payload. Tasks added to the\n             * cargo will be processed altogether (up to the `payload` limit). If the\n             * `worker` is in progress, the task is queued until it becomes available. Once\n             * the `worker` has completed some tasks, each callback of those tasks is\n             * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\n             * for how `cargo` and `queue` work.\n             *\n             * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n             * at a time, cargo passes an array of tasks to a single worker, repeating\n             * when the worker is finished.\n             *\n             * @name cargo\n             * @static\n             * @memberOf module:ControlFlow\n             * @method\n             * @see [async.queue]{@link module:ControlFlow.queue}\n             * @category Control Flow\n             * @param {AsyncFunction} worker - An asynchronous function for processing an array\n             * of queued tasks. Invoked with `(tasks, callback)`.\n             * @param {number} [payload=Infinity] - An optional `integer` for determining\n             * how many tasks should be processed per round; if omitted, the default is\n             * unlimited.\n             * @returns {module:ControlFlow.CargoObject} A cargo object to manage the tasks. Callbacks can\n             * attached as certain properties to listen for specific events during the\n             * lifecycle of the cargo and inner queue.\n             * @example\n             *\n             * // create a cargo object with payload 2\n             * var cargo = async.cargo(function(tasks, callback) {\n             *     for (var i=0; i<tasks.length; i++) {\n             *         console.log('hello ' + tasks[i].name);\n             *     }\n             *     callback();\n             * }, 2);\n             *\n             * // add some items\n             * cargo.push({name: 'foo'}, function(err) {\n             *     console.log('finished processing foo');\n             * });\n             * cargo.push({name: 'bar'}, function(err) {\n             *     console.log('finished processing bar');\n             * });\n             * cargo.push({name: 'baz'}, function(err) {\n             *     console.log('finished processing baz');\n             * });\n             */\n\n\n            function cargo(worker, payload) {\n              return queue(worker, 1, payload);\n            }\n            /**\n             * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.\n             *\n             * @name eachOfSeries\n             * @static\n             * @memberOf module:Collections\n             * @method\n             * @see [async.eachOf]{@link module:Collections.eachOf}\n             * @alias forEachOfSeries\n             * @category Collection\n             * @param {Array|Iterable|Object} coll - A collection to iterate over.\n             * @param {AsyncFunction} iteratee - An async function to apply to each item in\n             * `coll`.\n             * Invoked with (item, key, callback).\n             * @param {Function} [callback] - A callback which is called when all `iteratee`\n             * functions have finished, or an error occurs. Invoked with (err).\n             */\n\n\n            var eachOfSeries = doLimit(eachOfLimit, 1);\n            /**\n             * Reduces `coll` into a single value using an async `iteratee` to return each\n             * successive step. `memo` is the initial state of the reduction. This function\n             * only operates in series.\n             *\n             * For performance reasons, it may make sense to split a call to this function\n             * into a parallel map, and then use the normal `Array.prototype.reduce` on the\n             * results. This function is for situations where each step in the reduction\n             * needs to be async; if you can get the data before reducing it, then it's\n             * probably a good idea to do so.\n             *\n             * @name reduce\n             * @static\n             * @memberOf module:Collections\n             * @method\n             * @alias inject\n             * @alias foldl\n             * @category Collection\n             * @param {Array|Iterable|Object} coll - A collection to iterate over.\n             * @param {*} memo - The initial state of the reduction.\n             * @param {AsyncFunction} iteratee - A function applied to each item in the\n             * array to produce the next step in the reduction.\n             * The `iteratee` should complete with the next state of the reduction.\n             * If the iteratee complete with an error, the reduction is stopped and the\n             * main `callback` is immediately called with the error.\n             * Invoked with (memo, item, callback).\n             * @param {Function} [callback] - A callback which is called after all the\n             * `iteratee` functions have finished. Result is the reduced value. Invoked with\n             * (err, result).\n             * @example\n             *\n             * async.reduce([1,2,3], 0, function(memo, item, callback) {\n             *     // pointless async:\n             *     process.nextTick(function() {\n             *         callback(null, memo + item)\n             *     });\n             * }, function(err, result) {\n             *     // result is now equal to the last value of memo, which is 6\n             * });\n             */\n\n            function reduce(coll, memo, iteratee, callback) {\n              callback = once(callback || noop);\n\n              var _iteratee = wrapAsync(iteratee);\n\n              eachOfSeries(coll, function (x, i, callback) {\n                _iteratee(memo, x, function (err, v) {\n                  memo = v;\n                  callback(err);\n                });\n              }, function (err) {\n                callback(err, memo);\n              });\n            }\n            /**\n             * Version of the compose function that is more natural to read. Each function\n             * consumes the return value of the previous function. It is the equivalent of\n             * [compose]{@link module:ControlFlow.compose} with the arguments reversed.\n             *\n             * Each function is executed with the `this` binding of the composed function.\n             *\n             * @name seq\n             * @static\n             * @memberOf module:ControlFlow\n             * @method\n             * @see [async.compose]{@link module:ControlFlow.compose}\n             * @category Control Flow\n             * @param {...AsyncFunction} functions - the asynchronous functions to compose\n             * @returns {Function} a function that composes the `functions` in order\n             * @example\n             *\n             * // Requires lodash (or underscore), express3 and dresende's orm2.\n             * // Part of an app, that fetches cats of the logged user.\n             * // This example uses `seq` function to avoid overnesting and error\n             * // handling clutter.\n             * app.get('/cats', function(request, response) {\n             *     var User = request.models.User;\n             *     async.seq(\n             *         _.bind(User.get, User),  // 'User.get' has signature (id, callback(err, data))\n             *         function(user, fn) {\n             *             user.getCats(fn);      // 'getCats' has signature (callback(err, data))\n             *         }\n             *     )(req.session.user_id, function (err, cats) {\n             *         if (err) {\n             *             console.error(err);\n             *             response.json({ status: 'error', message: err.message });\n             *         } else {\n             *             response.json({ status: 'ok', message: 'Cats found', data: cats });\n             *         }\n             *     });\n             * });\n             */\n\n\n            function seq()\n            /*...functions*/\n            {\n              var _functions = arrayMap(arguments, wrapAsync);\n\n              return function ()\n              /*...args*/\n              {\n                var args = slice(arguments);\n                var that = this;\n                var cb = args[args.length - 1];\n\n                if (typeof cb == 'function') {\n                  args.pop();\n                } else {\n                  cb = noop;\n                }\n\n                reduce(_functions, args, function (newargs, fn, cb) {\n                  fn.apply(that, newargs.concat(function (err\n                  /*, ...nextargs*/\n                  ) {\n                    var nextargs = slice(arguments, 1);\n                    cb(err, nextargs);\n                  }));\n                }, function (err, results) {\n                  cb.apply(that, [err].concat(results));\n                });\n              };\n            }\n            /**\n             * Creates a function which is a composition of the passed asynchronous\n             * functions. Each function consumes the return value of the function that\n             * follows. Composing functions `f()`, `g()`, and `h()` would produce the result\n             * of `f(g(h()))`, only this version uses callbacks to obtain the return values.\n             *\n             * Each function is executed with the `this` binding of the composed function.\n             *\n             * @name compose\n             * @static\n             * @memberOf module:ControlFlow\n             * @method\n             * @category Control Flow\n             * @param {...AsyncFunction} functions - the asynchronous functions to compose\n             * @returns {Function} an asynchronous function that is the composed\n             * asynchronous `functions`\n             * @example\n             *\n             * function add1(n, callback) {\n             *     setTimeout(function () {\n             *         callback(null, n + 1);\n             *     }, 10);\n             * }\n             *\n             * function mul3(n, callback) {\n             *     setTimeout(function () {\n             *         callback(null, n * 3);\n             *     }, 10);\n             * }\n             *\n             * var add1mul3 = async.compose(mul3, add1);\n             * add1mul3(4, function (err, result) {\n             *     // result now equals 15\n             * });\n             */\n\n\n            var compose = function compose()\n            /*...args*/\n            {\n              return seq.apply(null, slice(arguments).reverse());\n            };\n\n            var _concat = Array.prototype.concat;\n            /**\n             * The same as [`concat`]{@link module:Collections.concat} but runs a maximum of `limit` async operations at a time.\n             *\n             * @name concatLimit\n             * @static\n             * @memberOf module:Collections\n             * @method\n             * @see [async.concat]{@link module:Collections.concat}\n             * @category Collection\n             * @param {Array|Iterable|Object} coll - A collection to iterate over.\n             * @param {number} limit - The maximum number of async operations at a time.\n             * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n             * which should use an array as its result. Invoked with (item, callback).\n             * @param {Function} [callback] - A callback which is called after all the\n             * `iteratee` functions have finished, or an error occurs. Results is an array\n             * containing the concatenated results of the `iteratee` function. Invoked with\n             * (err, results).\n             */\n\n            var concatLimit = function concatLimit(coll, limit, iteratee, callback) {\n              callback = callback || noop;\n\n              var _iteratee = wrapAsync(iteratee);\n\n              mapLimit(coll, limit, function (val, callback) {\n                _iteratee(val, function (err\n                /*, ...args*/\n                ) {\n                  if (err) return callback(err);\n                  return callback(null, slice(arguments, 1));\n                });\n              }, function (err, mapResults) {\n                var result = [];\n\n                for (var i = 0; i < mapResults.length; i++) {\n                  if (mapResults[i]) {\n                    result = _concat.apply(result, mapResults[i]);\n                  }\n                }\n\n                return callback(err, result);\n              });\n            };\n            /**\n             * Applies `iteratee` to each item in `coll`, concatenating the results. Returns\n             * the concatenated list. The `iteratee`s are called in parallel, and the\n             * results are concatenated as they return. There is no guarantee that the\n             * results array will be returned in the original order of `coll` passed to the\n             * `iteratee` function.\n             *\n             * @name concat\n             * @static\n             * @memberOf module:Collections\n             * @method\n             * @category Collection\n             * @param {Array|Iterable|Object} coll - A collection to iterate over.\n             * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n             * which should use an array as its result. Invoked with (item, callback).\n             * @param {Function} [callback(err)] - A callback which is called after all the\n             * `iteratee` functions have finished, or an error occurs. Results is an array\n             * containing the concatenated results of the `iteratee` function. Invoked with\n             * (err, results).\n             * @example\n             *\n             * async.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files) {\n             *     // files is now a list of filenames that exist in the 3 directories\n             * });\n             */\n\n\n            var concat = doLimit(concatLimit, Infinity);\n            /**\n             * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.\n             *\n             * @name concatSeries\n             * @static\n             * @memberOf module:Collections\n             * @method\n             * @see [async.concat]{@link module:Collections.concat}\n             * @category Collection\n             * @param {Array|Iterable|Object} coll - A collection to iterate over.\n             * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`.\n             * The iteratee should complete with an array an array of results.\n             * Invoked with (item, callback).\n             * @param {Function} [callback(err)] - A callback which is called after all the\n             * `iteratee` functions have finished, or an error occurs. Results is an array\n             * containing the concatenated results of the `iteratee` function. Invoked with\n             * (err, results).\n             */\n\n            var concatSeries = doLimit(concatLimit, 1);\n            /**\n             * Returns a function that when called, calls-back with the values provided.\n             * Useful as the first function in a [`waterfall`]{@link module:ControlFlow.waterfall}, or for plugging values in to\n             * [`auto`]{@link module:ControlFlow.auto}.\n             *\n             * @name constant\n             * @static\n             * @memberOf module:Utils\n             * @method\n             * @category Util\n             * @param {...*} arguments... - Any number of arguments to automatically invoke\n             * callback with.\n             * @returns {AsyncFunction} Returns a function that when invoked, automatically\n             * invokes the callback with the previous given arguments.\n             * @example\n             *\n             * async.waterfall([\n             *     async.constant(42),\n             *     function (value, next) {\n             *         // value === 42\n             *     },\n             *     //...\n             * ], callback);\n             *\n             * async.waterfall([\n             *     async.constant(filename, \"utf8\"),\n             *     fs.readFile,\n             *     function (fileData, next) {\n             *         //...\n             *     }\n             *     //...\n             * ], callback);\n             *\n             * async.auto({\n             *     hostname: async.constant(\"https://server.net/\"),\n             *     port: findFreePort,\n             *     launchServer: [\"hostname\", \"port\", function (options, cb) {\n             *         startServer(options, cb);\n             *     }],\n             *     //...\n             * }, callback);\n             */\n\n            var constant = function constant()\n            /*...values*/\n            {\n              var values = slice(arguments);\n              var args = [null].concat(values);\n              return function ()\n              /*...ignoredArgs, callback*/\n              {\n                var callback = arguments[arguments.length - 1];\n                return callback.apply(this, args);\n              };\n            };\n            /**\n             * This method returns the first argument it receives.\n             *\n             * @static\n             * @since 0.1.0\n             * @memberOf _\n             * @category Util\n             * @param {*} value Any value.\n             * @returns {*} Returns `value`.\n             * @example\n             *\n             * var object = { 'a': 1 };\n             *\n             * console.log(_.identity(object) === object);\n             * // => true\n             */\n\n\n            function identity(value) {\n              return value;\n            }\n\n            function _createTester(check, getResult) {\n              return function (eachfn, arr, iteratee, cb) {\n                cb = cb || noop;\n                var testPassed = false;\n                var testResult;\n                eachfn(arr, function (value, _, callback) {\n                  iteratee(value, function (err, result) {\n                    if (err) {\n                      callback(err);\n                    } else if (check(result) && !testResult) {\n                      testPassed = true;\n                      testResult = getResult(true, value);\n                      callback(null, breakLoop);\n                    } else {\n                      callback();\n                    }\n                  });\n                }, function (err) {\n                  if (err) {\n                    cb(err);\n                  } else {\n                    cb(null, testPassed ? testResult : getResult(false));\n                  }\n                });\n              };\n            }\n\n            function _findGetResult(v, x) {\n              return x;\n            }\n            /**\n             * Returns the first value in `coll` that passes an async truth test. The\n             * `iteratee` is applied in parallel, meaning the first iteratee to return\n             * `true` will fire the detect `callback` with that result. That means the\n             * result might not be the first item in the original `coll` (in terms of order)\n             * that passes the test.\n            \n             * If order within the original `coll` is important, then look at\n             * [`detectSeries`]{@link module:Collections.detectSeries}.\n             *\n             * @name detect\n             * @static\n             * @memberOf module:Collections\n             * @method\n             * @alias find\n             * @category Collections\n             * @param {Array|Iterable|Object} coll - A collection to iterate over.\n             * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n             * The iteratee must complete with a boolean value as its result.\n             * Invoked with (item, callback).\n             * @param {Function} [callback] - A callback which is called as soon as any\n             * iteratee returns `true`, or after all the `iteratee` functions have finished.\n             * Result will be the first item in the array that passes the truth test\n             * (iteratee) or the value `undefined` if none passed. Invoked with\n             * (err, result).\n             * @example\n             *\n             * async.detect(['file1','file2','file3'], function(filePath, callback) {\n             *     fs.access(filePath, function(err) {\n             *         callback(null, !err)\n             *     });\n             * }, function(err, result) {\n             *     // result now equals the first file in the list that exists\n             * });\n             */\n\n\n            var detect = doParallel(_createTester(identity, _findGetResult));\n            /**\n             * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a\n             * time.\n             *\n             * @name detectLimit\n             * @static\n             * @memberOf module:Collections\n             * @method\n             * @see [async.detect]{@link module:Collections.detect}\n             * @alias findLimit\n             * @category Collections\n             * @param {Array|Iterable|Object} coll - A collection to iterate over.\n             * @param {number} limit - The maximum number of async operations at a time.\n             * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n             * The iteratee must complete with a boolean value as its result.\n             * Invoked with (item, callback).\n             * @param {Function} [callback] - A callback which is called as soon as any\n             * iteratee returns `true`, or after all the `iteratee` functions have finished.\n             * Result will be the first item in the array that passes the truth test\n             * (iteratee) or the value `undefined` if none passed. Invoked with\n             * (err, result).\n             */\n\n            var detectLimit = doParallelLimit(_createTester(identity, _findGetResult));\n            /**\n             * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.\n             *\n             * @name detectSeries\n             * @static\n             * @memberOf module:Collections\n             * @method\n             * @see [async.detect]{@link module:Collections.detect}\n             * @alias findSeries\n             * @category Collections\n             * @param {Array|Iterable|Object} coll - A collection to iterate over.\n             * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n             * The iteratee must complete with a boolean value as its result.\n             * Invoked with (item, callback).\n             * @param {Function} [callback] - A callback which is called as soon as any\n             * iteratee returns `true`, or after all the `iteratee` functions have finished.\n             * Result will be the first item in the array that passes the truth test\n             * (iteratee) or the value `undefined` if none passed. Invoked with\n             * (err, result).\n             */\n\n            var detectSeries = doLimit(detectLimit, 1);\n\n            function consoleFunc(name) {\n              return function (fn\n              /*, ...args*/\n              ) {\n                var args = slice(arguments, 1);\n                args.push(function (err\n                /*, ...args*/\n                ) {\n                  var args = slice(arguments, 1);\n\n                  if (typeof console === 'object') {\n                    if (err) {\n                      if (console.error) {\n                        console.error(err);\n                      }\n                    } else if (console[name]) {\n                      arrayEach(args, function (x) {\n                        console[name](x);\n                      });\n                    }\n                  }\n                });\n                wrapAsync(fn).apply(null, args);\n              };\n            }\n            /**\n             * Logs the result of an [`async` function]{@link AsyncFunction} to the\n             * `console` using `console.dir` to display the properties of the resulting object.\n             * Only works in Node.js or in browsers that support `console.dir` and\n             * `console.error` (such as FF and Chrome).\n             * If multiple arguments are returned from the async function,\n             * `console.dir` is called on each argument in order.\n             *\n             * @name dir\n             * @static\n             * @memberOf module:Utils\n             * @method\n             * @category Util\n             * @param {AsyncFunction} function - The function you want to eventually apply\n             * all arguments to.\n             * @param {...*} arguments... - Any number of arguments to apply to the function.\n             * @example\n             *\n             * // in a module\n             * var hello = function(name, callback) {\n             *     setTimeout(function() {\n             *         callback(null, {hello: name});\n             *     }, 1000);\n             * };\n             *\n             * // in the node repl\n             * node> async.dir(hello, 'world');\n             * {hello: 'world'}\n             */\n\n\n            var dir = consoleFunc('dir');\n            /**\n             * The post-check version of [`during`]{@link module:ControlFlow.during}. To reflect the difference in\n             * the order of operations, the arguments `test` and `fn` are switched.\n             *\n             * Also a version of [`doWhilst`]{@link module:ControlFlow.doWhilst} with asynchronous `test` function.\n             * @name doDuring\n             * @static\n             * @memberOf module:ControlFlow\n             * @method\n             * @see [async.during]{@link module:ControlFlow.during}\n             * @category Control Flow\n             * @param {AsyncFunction} fn - An async function which is called each time\n             * `test` passes. Invoked with (callback).\n             * @param {AsyncFunction} test - asynchronous truth test to perform before each\n             * execution of `fn`. Invoked with (...args, callback), where `...args` are the\n             * non-error args from the previous callback of `fn`.\n             * @param {Function} [callback] - A callback which is called after the test\n             * function has failed and repeated execution of `fn` has stopped. `callback`\n             * will be passed an error if one occurred, otherwise `null`.\n             */\n\n            function doDuring(fn, test, callback) {\n              callback = onlyOnce(callback || noop);\n\n              var _fn = wrapAsync(fn);\n\n              var _test = wrapAsync(test);\n\n              function next(err\n              /*, ...args*/\n              ) {\n                if (err) return callback(err);\n                var args = slice(arguments, 1);\n                args.push(check);\n\n                _test.apply(this, args);\n              }\n\n              function check(err, truth) {\n                if (err) return callback(err);\n                if (!truth) return callback(null);\n\n                _fn(next);\n              }\n\n              check(null, true);\n            }\n            /**\n             * The post-check version of [`whilst`]{@link module:ControlFlow.whilst}. To reflect the difference in\n             * the order of operations, the arguments `test` and `iteratee` are switched.\n             *\n             * `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n             *\n             * @name doWhilst\n             * @static\n             * @memberOf module:ControlFlow\n             * @method\n             * @see [async.whilst]{@link module:ControlFlow.whilst}\n             * @category Control Flow\n             * @param {AsyncFunction} iteratee - A function which is called each time `test`\n             * passes. Invoked with (callback).\n             * @param {Function} test - synchronous truth test to perform after each\n             * execution of `iteratee`. Invoked with any non-error callback results of\n             * `iteratee`.\n             * @param {Function} [callback] - A callback which is called after the test\n             * function has failed and repeated execution of `iteratee` has stopped.\n             * `callback` will be passed an error and any arguments passed to the final\n             * `iteratee`'s callback. Invoked with (err, [results]);\n             */\n\n\n            function doWhilst(iteratee, test, callback) {\n              callback = onlyOnce(callback || noop);\n\n              var _iteratee = wrapAsync(iteratee);\n\n              var next = function next(err\n              /*, ...args*/\n              ) {\n                if (err) return callback(err);\n                var args = slice(arguments, 1);\n                if (test.apply(this, args)) return _iteratee(next);\n                callback.apply(null, [null].concat(args));\n              };\n\n              _iteratee(next);\n            }\n            /**\n             * Like ['doWhilst']{@link module:ControlFlow.doWhilst}, except the `test` is inverted. Note the\n             * argument ordering differs from `until`.\n             *\n             * @name doUntil\n             * @static\n             * @memberOf module:ControlFlow\n             * @method\n             * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}\n             * @category Control Flow\n             * @param {AsyncFunction} iteratee - An async function which is called each time\n             * `test` fails. Invoked with (callback).\n             * @param {Function} test - synchronous truth test to perform after each\n             * execution of `iteratee`. Invoked with any non-error callback results of\n             * `iteratee`.\n             * @param {Function} [callback] - A callback which is called after the test\n             * function has passed and repeated execution of `iteratee` has stopped. `callback`\n             * will be passed an error and any arguments passed to the final `iteratee`'s\n             * callback. Invoked with (err, [results]);\n             */\n\n\n            function doUntil(iteratee, test, callback) {\n              doWhilst(iteratee, function () {\n                return !test.apply(this, arguments);\n              }, callback);\n            }\n            /**\n             * Like [`whilst`]{@link module:ControlFlow.whilst}, except the `test` is an asynchronous function that\n             * is passed a callback in the form of `function (err, truth)`. If error is\n             * passed to `test` or `fn`, the main callback is immediately called with the\n             * value of the error.\n             *\n             * @name during\n             * @static\n             * @memberOf module:ControlFlow\n             * @method\n             * @see [async.whilst]{@link module:ControlFlow.whilst}\n             * @category Control Flow\n             * @param {AsyncFunction} test - asynchronous truth test to perform before each\n             * execution of `fn`. Invoked with (callback).\n             * @param {AsyncFunction} fn - An async function which is called each time\n             * `test` passes. Invoked with (callback).\n             * @param {Function} [callback] - A callback which is called after the test\n             * function has failed and repeated execution of `fn` has stopped. `callback`\n             * will be passed an error, if one occurred, otherwise `null`.\n             * @example\n             *\n             * var count = 0;\n             *\n             * async.during(\n             *     function (callback) {\n             *         return callback(null, count < 5);\n             *     },\n             *     function (callback) {\n             *         count++;\n             *         setTimeout(callback, 1000);\n             *     },\n             *     function (err) {\n             *         // 5 seconds have passed\n             *     }\n             * );\n             */\n\n\n            function during(test, fn, callback) {\n              callback = onlyOnce(callback || noop);\n\n              var _fn = wrapAsync(fn);\n\n              var _test = wrapAsync(test);\n\n              function next(err) {\n                if (err) return callback(err);\n\n                _test(check);\n              }\n\n              function check(err, truth) {\n                if (err) return callback(err);\n                if (!truth) return callback(null);\n\n                _fn(next);\n              }\n\n              _test(check);\n            }\n\n            function _withoutIndex(iteratee) {\n              return function (value, index, callback) {\n                return iteratee(value, callback);\n              };\n            }\n            /**\n             * Applies the function `iteratee` to each item in `coll`, in parallel.\n             * The `iteratee` is called with an item from the list, and a callback for when\n             * it has finished. If the `iteratee` passes an error to its `callback`, the\n             * main `callback` (for the `each` function) is immediately called with the\n             * error.\n             *\n             * Note, that since this function applies `iteratee` to each item in parallel,\n             * there is no guarantee that the iteratee functions will complete in order.\n             *\n             * @name each\n             * @static\n             * @memberOf module:Collections\n             * @method\n             * @alias forEach\n             * @category Collection\n             * @param {Array|Iterable|Object} coll - A collection to iterate over.\n             * @param {AsyncFunction} iteratee - An async function to apply to\n             * each item in `coll`. Invoked with (item, callback).\n             * The array index is not passed to the iteratee.\n             * If you need the index, use `eachOf`.\n             * @param {Function} [callback] - A callback which is called when all\n             * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n             * @example\n             *\n             * // assuming openFiles is an array of file names and saveFile is a function\n             * // to save the modified contents of that file:\n             *\n             * async.each(openFiles, saveFile, function(err){\n             *   // if any of the saves produced an error, err would equal that error\n             * });\n             *\n             * // assuming openFiles is an array of file names\n             * async.each(openFiles, function(file, callback) {\n             *\n             *     // Perform operation on file here.\n             *     console.log('Processing file ' + file);\n             *\n             *     if( file.length > 32 ) {\n             *       console.log('This file name is too long');\n             *       callback('File name too long');\n             *     } else {\n             *       // Do work to process file here\n             *       console.log('File processed');\n             *       callback();\n             *     }\n             * }, function(err) {\n             *     // if any of the file processing produced an error, err would equal that error\n             *     if( err ) {\n             *       // One of the iterations produced an error.\n             *       // All processing will now stop.\n             *       console.log('A file failed to process');\n             *     } else {\n             *       console.log('All files have been processed successfully');\n             *     }\n             * });\n             */\n\n\n            function eachLimit(coll, iteratee, callback) {\n              eachOf(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n            }\n            /**\n             * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.\n             *\n             * @name eachLimit\n             * @static\n             * @memberOf module:Collections\n             * @method\n             * @see [async.each]{@link module:Collections.each}\n             * @alias forEachLimit\n             * @category Collection\n             * @param {Array|Iterable|Object} coll - A collection to iterate over.\n             * @param {number} limit - The maximum number of async operations at a time.\n             * @param {AsyncFunction} iteratee - An async function to apply to each item in\n             * `coll`.\n             * The array index is not passed to the iteratee.\n             * If you need the index, use `eachOfLimit`.\n             * Invoked with (item, callback).\n             * @param {Function} [callback] - A callback which is called when all\n             * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n             */\n\n\n            function eachLimit$1(coll, limit, iteratee, callback) {\n              _eachOfLimit(limit)(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n            }\n            /**\n             * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.\n             *\n             * @name eachSeries\n             * @static\n             * @memberOf module:Collections\n             * @method\n             * @see [async.each]{@link module:Collections.each}\n             * @alias forEachSeries\n             * @category Collection\n             * @param {Array|Iterable|Object} coll - A collection to iterate over.\n             * @param {AsyncFunction} iteratee - An async function to apply to each\n             * item in `coll`.\n             * The array index is not passed to the iteratee.\n             * If you need the index, use `eachOfSeries`.\n             * Invoked with (item, callback).\n             * @param {Function} [callback] - A callback which is called when all\n             * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n             */\n\n\n            var eachSeries = doLimit(eachLimit$1, 1);\n            /**\n             * Wrap an async function and ensure it calls its callback on a later tick of\n             * the event loop.  If the function already calls its callback on a next tick,\n             * no extra deferral is added. This is useful for preventing stack overflows\n             * (`RangeError: Maximum call stack size exceeded`) and generally keeping\n             * [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)\n             * contained. ES2017 `async` functions are returned as-is -- they are immune\n             * to Zalgo's corrupting influences, as they always resolve on a later tick.\n             *\n             * @name ensureAsync\n             * @static\n             * @memberOf module:Utils\n             * @method\n             * @category Util\n             * @param {AsyncFunction} fn - an async function, one that expects a node-style\n             * callback as its last argument.\n             * @returns {AsyncFunction} Returns a wrapped function with the exact same call\n             * signature as the function passed in.\n             * @example\n             *\n             * function sometimesAsync(arg, callback) {\n             *     if (cache[arg]) {\n             *         return callback(null, cache[arg]); // this would be synchronous!!\n             *     } else {\n             *         doSomeIO(arg, callback); // this IO would be asynchronous\n             *     }\n             * }\n             *\n             * // this has a risk of stack overflows if many results are cached in a row\n             * async.mapSeries(args, sometimesAsync, done);\n             *\n             * // this will defer sometimesAsync's callback if necessary,\n             * // preventing stack overflows\n             * async.mapSeries(args, async.ensureAsync(sometimesAsync), done);\n             */\n\n            function ensureAsync(fn) {\n              if (isAsync(fn)) return fn;\n              return initialParams(function (args, callback) {\n                var sync = true;\n                args.push(function () {\n                  var innerArgs = arguments;\n\n                  if (sync) {\n                    setImmediate$1(function () {\n                      callback.apply(null, innerArgs);\n                    });\n                  } else {\n                    callback.apply(null, innerArgs);\n                  }\n                });\n                fn.apply(this, args);\n                sync = false;\n              });\n            }\n\n            function notId(v) {\n              return !v;\n            }\n            /**\n             * Returns `true` if every element in `coll` satisfies an async test. If any\n             * iteratee call returns `false`, the main `callback` is immediately called.\n             *\n             * @name every\n             * @static\n             * @memberOf module:Collections\n             * @method\n             * @alias all\n             * @category Collection\n             * @param {Array|Iterable|Object} coll - A collection to iterate over.\n             * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n             * in the collection in parallel.\n             * The iteratee must complete with a boolean result value.\n             * Invoked with (item, callback).\n             * @param {Function} [callback] - A callback which is called after all the\n             * `iteratee` functions have finished. Result will be either `true` or `false`\n             * depending on the values of the async tests. Invoked with (err, result).\n             * @example\n             *\n             * async.every(['file1','file2','file3'], function(filePath, callback) {\n             *     fs.access(filePath, function(err) {\n             *         callback(null, !err)\n             *     });\n             * }, function(err, result) {\n             *     // if result is true then every file exists\n             * });\n             */\n\n\n            var every = doParallel(_createTester(notId, notId));\n            /**\n             * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.\n             *\n             * @name everyLimit\n             * @static\n             * @memberOf module:Collections\n             * @method\n             * @see [async.every]{@link module:Collections.every}\n             * @alias allLimit\n             * @category Collection\n             * @param {Array|Iterable|Object} coll - A collection to iterate over.\n             * @param {number} limit - The maximum number of async operations at a time.\n             * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n             * in the collection in parallel.\n             * The iteratee must complete with a boolean result value.\n             * Invoked with (item, callback).\n             * @param {Function} [callback] - A callback which is called after all the\n             * `iteratee` functions have finished. Result will be either `true` or `false`\n             * depending on the values of the async tests. Invoked with (err, result).\n             */\n\n            var everyLimit = doParallelLimit(_createTester(notId, notId));\n            /**\n             * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.\n             *\n             * @name everySeries\n             * @static\n             * @memberOf module:Collections\n             * @method\n             * @see [async.every]{@link module:Collections.every}\n             * @alias allSeries\n             * @category Collection\n             * @param {Array|Iterable|Object} coll - A collection to iterate over.\n             * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n             * in the collection in series.\n             * The iteratee must complete with a boolean result value.\n             * Invoked with (item, callback).\n             * @param {Function} [callback] - A callback which is called after all the\n             * `iteratee` functions have finished. Result will be either `true` or `false`\n             * depending on the values of the async tests. Invoked with (err, result).\n             */\n\n            var everySeries = doLimit(everyLimit, 1);\n            /**\n             * The base implementation of `_.property` without support for deep paths.\n             *\n             * @private\n             * @param {string} key The key of the property to get.\n             * @returns {Function} Returns the new accessor function.\n             */\n\n            function baseProperty(key) {\n              return function (object) {\n                return object == null ? undefined : object[key];\n              };\n            }\n\n            function filterArray(eachfn, arr, iteratee, callback) {\n              var truthValues = new Array(arr.length);\n              eachfn(arr, function (x, index, callback) {\n                iteratee(x, function (err, v) {\n                  truthValues[index] = !!v;\n                  callback(err);\n                });\n              }, function (err) {\n                if (err) return callback(err);\n                var results = [];\n\n                for (var i = 0; i < arr.length; i++) {\n                  if (truthValues[i]) results.push(arr[i]);\n                }\n\n                callback(null, results);\n              });\n            }\n\n            function filterGeneric(eachfn, coll, iteratee, callback) {\n              var results = [];\n              eachfn(coll, function (x, index, callback) {\n                iteratee(x, function (err, v) {\n                  if (err) {\n                    callback(err);\n                  } else {\n                    if (v) {\n                      results.push({\n                        index: index,\n                        value: x\n                      });\n                    }\n\n                    callback();\n                  }\n                });\n              }, function (err) {\n                if (err) {\n                  callback(err);\n                } else {\n                  callback(null, arrayMap(results.sort(function (a, b) {\n                    return a.index - b.index;\n                  }), baseProperty('value')));\n                }\n              });\n            }\n\n            function _filter(eachfn, coll, iteratee, callback) {\n              var filter = isArrayLike(coll) ? filterArray : filterGeneric;\n              filter(eachfn, coll, wrapAsync(iteratee), callback || noop);\n            }\n            /**\n             * Returns a new array of all the values in `coll` which pass an async truth\n             * test. This operation is performed in parallel, but the results array will be\n             * in the same order as the original.\n             *\n             * @name filter\n             * @static\n             * @memberOf module:Collections\n             * @method\n             * @alias select\n             * @category Collection\n             * @param {Array|Iterable|Object} coll - A collection to iterate over.\n             * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n             * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n             * with a boolean argument once it has completed. Invoked with (item, callback).\n             * @param {Function} [callback] - A callback which is called after all the\n             * `iteratee` functions have finished. Invoked with (err, results).\n             * @example\n             *\n             * async.filter(['file1','file2','file3'], function(filePath, callback) {\n             *     fs.access(filePath, function(err) {\n             *         callback(null, !err)\n             *     });\n             * }, function(err, results) {\n             *     // results now equals an array of the existing files\n             * });\n             */\n\n\n            var filter = doParallel(_filter);\n            /**\n             * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a\n             * time.\n             *\n             * @name filterLimit\n             * @static\n             * @memberOf module:Collections\n             * @method\n             * @see [async.filter]{@link module:Collections.filter}\n             * @alias selectLimit\n             * @category Collection\n             * @param {Array|Iterable|Object} coll - A collection to iterate over.\n             * @param {number} limit - The maximum number of async operations at a time.\n             * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n             * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n             * with a boolean argument once it has completed. Invoked with (item, callback).\n             * @param {Function} [callback] - A callback which is called after all the\n             * `iteratee` functions have finished. Invoked with (err, results).\n             */\n\n            var filterLimit = doParallelLimit(_filter);\n            /**\n             * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.\n             *\n             * @name filterSeries\n             * @static\n             * @memberOf module:Collections\n             * @method\n             * @see [async.filter]{@link module:Collections.filter}\n             * @alias selectSeries\n             * @category Collection\n             * @param {Array|Iterable|Object} coll - A collection to iterate over.\n             * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n             * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n             * with a boolean argument once it has completed. Invoked with (item, callback).\n             * @param {Function} [callback] - A callback which is called after all the\n             * `iteratee` functions have finished. Invoked with (err, results)\n             */\n\n            var filterSeries = doLimit(filterLimit, 1);\n            /**\n             * Calls the asynchronous function `fn` with a callback parameter that allows it\n             * to call itself again, in series, indefinitely.\n            \n             * If an error is passed to the callback then `errback` is called with the\n             * error, and execution stops, otherwise it will never be called.\n             *\n             * @name forever\n             * @static\n             * @memberOf module:ControlFlow\n             * @method\n             * @category Control Flow\n             * @param {AsyncFunction} fn - an async function to call repeatedly.\n             * Invoked with (next).\n             * @param {Function} [errback] - when `fn` passes an error to it's callback,\n             * this function will be called, and execution stops. Invoked with (err).\n             * @example\n             *\n             * async.forever(\n             *     function(next) {\n             *         // next is suitable for passing to things that need a callback(err [, whatever]);\n             *         // it will result in this function being called again.\n             *     },\n             *     function(err) {\n             *         // if next is called with a value in its first parameter, it will appear\n             *         // in here as 'err', and execution will stop.\n             *     }\n             * );\n             */\n\n            function forever(fn, errback) {\n              var done = onlyOnce(errback || noop);\n              var task = wrapAsync(ensureAsync(fn));\n\n              function next(err) {\n                if (err) return done(err);\n                task(next);\n              }\n\n              next();\n            }\n            /**\n             * The same as [`groupBy`]{@link module:Collections.groupBy} but runs a maximum of `limit` async operations at a time.\n             *\n             * @name groupByLimit\n             * @static\n             * @memberOf module:Collections\n             * @method\n             * @see [async.groupBy]{@link module:Collections.groupBy}\n             * @category Collection\n             * @param {Array|Iterable|Object} coll - A collection to iterate over.\n             * @param {number} limit - The maximum number of async operations at a time.\n             * @param {AsyncFunction} iteratee - An async function to apply to each item in\n             * `coll`.\n             * The iteratee should complete with a `key` to group the value under.\n             * Invoked with (value, callback).\n             * @param {Function} [callback] - A callback which is called when all `iteratee`\n             * functions have finished, or an error occurs. Result is an `Object` whoses\n             * properties are arrays of values which returned the corresponding key.\n             */\n\n\n            var groupByLimit = function groupByLimit(coll, limit, iteratee, callback) {\n              callback = callback || noop;\n\n              var _iteratee = wrapAsync(iteratee);\n\n              mapLimit(coll, limit, function (val, callback) {\n                _iteratee(val, function (err, key) {\n                  if (err) return callback(err);\n                  return callback(null, {\n                    key: key,\n                    val: val\n                  });\n                });\n              }, function (err, mapResults) {\n                var result = {}; // from MDN, handle object having an `hasOwnProperty` prop\n\n                var hasOwnProperty = Object.prototype.hasOwnProperty;\n\n                for (var i = 0; i < mapResults.length; i++) {\n                  if (mapResults[i]) {\n                    var key = mapResults[i].key;\n                    var val = mapResults[i].val;\n\n                    if (hasOwnProperty.call(result, key)) {\n                      result[key].push(val);\n                    } else {\n                      result[key] = [val];\n                    }\n                  }\n                }\n\n                return callback(err, result);\n              });\n            };\n            /**\n             * Returns a new object, where each value corresponds to an array of items, from\n             * `coll`, that returned the corresponding key. That is, the keys of the object\n             * correspond to the values passed to the `iteratee` callback.\n             *\n             * Note: Since this function applies the `iteratee` to each item in parallel,\n             * there is no guarantee that the `iteratee` functions will complete in order.\n             * However, the values for each key in the `result` will be in the same order as\n             * the original `coll`. For Objects, the values will roughly be in the order of\n             * the original Objects' keys (but this can vary across JavaScript engines).\n             *\n             * @name groupBy\n             * @static\n             * @memberOf module:Collections\n             * @method\n             * @category Collection\n             * @param {Array|Iterable|Object} coll - A collection to iterate over.\n             * @param {AsyncFunction} iteratee - An async function to apply to each item in\n             * `coll`.\n             * The iteratee should complete with a `key` to group the value under.\n             * Invoked with (value, callback).\n             * @param {Function} [callback] - A callback which is called when all `iteratee`\n             * functions have finished, or an error occurs. Result is an `Object` whoses\n             * properties are arrays of values which returned the corresponding key.\n             * @example\n             *\n             * async.groupBy(['userId1', 'userId2', 'userId3'], function(userId, callback) {\n             *     db.findById(userId, function(err, user) {\n             *         if (err) return callback(err);\n             *         return callback(null, user.age);\n             *     });\n             * }, function(err, result) {\n             *     // result is object containing the userIds grouped by age\n             *     // e.g. { 30: ['userId1', 'userId3'], 42: ['userId2']};\n             * });\n             */\n\n\n            var groupBy = doLimit(groupByLimit, Infinity);\n            /**\n             * The same as [`groupBy`]{@link module:Collections.groupBy} but runs only a single async operation at a time.\n             *\n             * @name groupBySeries\n             * @static\n             * @memberOf module:Collections\n             * @method\n             * @see [async.groupBy]{@link module:Collections.groupBy}\n             * @category Collection\n             * @param {Array|Iterable|Object} coll - A collection to iterate over.\n             * @param {number} limit - The maximum number of async operations at a time.\n             * @param {AsyncFunction} iteratee - An async function to apply to each item in\n             * `coll`.\n             * The iteratee should complete with a `key` to group the value under.\n             * Invoked with (value, callback).\n             * @param {Function} [callback] - A callback which is called when all `iteratee`\n             * functions have finished, or an error occurs. Result is an `Object` whoses\n             * properties are arrays of values which returned the corresponding key.\n             */\n\n            var groupBySeries = doLimit(groupByLimit, 1);\n            /**\n             * Logs the result of an `async` function to the `console`. Only works in\n             * Node.js or in browsers that support `console.log` and `console.error` (such\n             * as FF and Chrome). If multiple arguments are returned from the async\n             * function, `console.log` is called on each argument in order.\n             *\n             * @name log\n             * @static\n             * @memberOf module:Utils\n             * @method\n             * @category Util\n             * @param {AsyncFunction} function - The function you want to eventually apply\n             * all arguments to.\n             * @param {...*} arguments... - Any number of arguments to apply to the function.\n             * @example\n             *\n             * // in a module\n             * var hello = function(name, callback) {\n             *     setTimeout(function() {\n             *         callback(null, 'hello ' + name);\n             *     }, 1000);\n             * };\n             *\n             * // in the node repl\n             * node> async.log(hello, 'world');\n             * 'hello world'\n             */\n\n            var log = consoleFunc('log');\n            /**\n             * The same as [`mapValues`]{@link module:Collections.mapValues} but runs a maximum of `limit` async operations at a\n             * time.\n             *\n             * @name mapValuesLimit\n             * @static\n             * @memberOf module:Collections\n             * @method\n             * @see [async.mapValues]{@link module:Collections.mapValues}\n             * @category Collection\n             * @param {Object} obj - A collection to iterate over.\n             * @param {number} limit - The maximum number of async operations at a time.\n             * @param {AsyncFunction} iteratee - A function to apply to each value and key\n             * in `coll`.\n             * The iteratee should complete with the transformed value as its result.\n             * Invoked with (value, key, callback).\n             * @param {Function} [callback] - A callback which is called when all `iteratee`\n             * functions have finished, or an error occurs. `result` is a new object consisting\n             * of each key from `obj`, with each transformed value on the right-hand side.\n             * Invoked with (err, result).\n             */\n\n            function mapValuesLimit(obj, limit, iteratee, callback) {\n              callback = once(callback || noop);\n              var newObj = {};\n\n              var _iteratee = wrapAsync(iteratee);\n\n              eachOfLimit(obj, limit, function (val, key, next) {\n                _iteratee(val, key, function (err, result) {\n                  if (err) return next(err);\n                  newObj[key] = result;\n                  next();\n                });\n              }, function (err) {\n                callback(err, newObj);\n              });\n            }\n            /**\n             * A relative of [`map`]{@link module:Collections.map}, designed for use with objects.\n             *\n             * Produces a new Object by mapping each value of `obj` through the `iteratee`\n             * function. The `iteratee` is called each `value` and `key` from `obj` and a\n             * callback for when it has finished processing. Each of these callbacks takes\n             * two arguments: an `error`, and the transformed item from `obj`. If `iteratee`\n             * passes an error to its callback, the main `callback` (for the `mapValues`\n             * function) is immediately called with the error.\n             *\n             * Note, the order of the keys in the result is not guaranteed.  The keys will\n             * be roughly in the order they complete, (but this is very engine-specific)\n             *\n             * @name mapValues\n             * @static\n             * @memberOf module:Collections\n             * @method\n             * @category Collection\n             * @param {Object} obj - A collection to iterate over.\n             * @param {AsyncFunction} iteratee - A function to apply to each value and key\n             * in `coll`.\n             * The iteratee should complete with the transformed value as its result.\n             * Invoked with (value, key, callback).\n             * @param {Function} [callback] - A callback which is called when all `iteratee`\n             * functions have finished, or an error occurs. `result` is a new object consisting\n             * of each key from `obj`, with each transformed value on the right-hand side.\n             * Invoked with (err, result).\n             * @example\n             *\n             * async.mapValues({\n             *     f1: 'file1',\n             *     f2: 'file2',\n             *     f3: 'file3'\n             * }, function (file, key, callback) {\n             *   fs.stat(file, callback);\n             * }, function(err, result) {\n             *     // result is now a map of stats for each file, e.g.\n             *     // {\n             *     //     f1: [stats for file1],\n             *     //     f2: [stats for file2],\n             *     //     f3: [stats for file3]\n             *     // }\n             * });\n             */\n\n\n            var mapValues = doLimit(mapValuesLimit, Infinity);\n            /**\n             * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.\n             *\n             * @name mapValuesSeries\n             * @static\n             * @memberOf module:Collections\n             * @method\n             * @see [async.mapValues]{@link module:Collections.mapValues}\n             * @category Collection\n             * @param {Object} obj - A collection to iterate over.\n             * @param {AsyncFunction} iteratee - A function to apply to each value and key\n             * in `coll`.\n             * The iteratee should complete with the transformed value as its result.\n             * Invoked with (value, key, callback).\n             * @param {Function} [callback] - A callback which is called when all `iteratee`\n             * functions have finished, or an error occurs. `result` is a new object consisting\n             * of each key from `obj`, with each transformed value on the right-hand side.\n             * Invoked with (err, result).\n             */\n\n            var mapValuesSeries = doLimit(mapValuesLimit, 1);\n\n            function has(obj, key) {\n              return key in obj;\n            }\n            /**\n             * Caches the results of an async function. When creating a hash to store\n             * function results against, the callback is omitted from the hash and an\n             * optional hash function can be used.\n             *\n             * If no hash function is specified, the first argument is used as a hash key,\n             * which may work reasonably if it is a string or a data type that converts to a\n             * distinct string. Note that objects and arrays will not behave reasonably.\n             * Neither will cases where the other arguments are significant. In such cases,\n             * specify your own hash function.\n             *\n             * The cache of results is exposed as the `memo` property of the function\n             * returned by `memoize`.\n             *\n             * @name memoize\n             * @static\n             * @memberOf module:Utils\n             * @method\n             * @category Util\n             * @param {AsyncFunction} fn - The async function to proxy and cache results from.\n             * @param {Function} hasher - An optional function for generating a custom hash\n             * for storing results. It has all the arguments applied to it apart from the\n             * callback, and must be synchronous.\n             * @returns {AsyncFunction} a memoized version of `fn`\n             * @example\n             *\n             * var slow_fn = function(name, callback) {\n             *     // do something\n             *     callback(null, result);\n             * };\n             * var fn = async.memoize(slow_fn);\n             *\n             * // fn can now be used as if it were slow_fn\n             * fn('some name', function() {\n             *     // callback\n             * });\n             */\n\n\n            function memoize(fn, hasher) {\n              var memo = Object.create(null);\n              var queues = Object.create(null);\n              hasher = hasher || identity;\n\n              var _fn = wrapAsync(fn);\n\n              var memoized = initialParams(function memoized(args, callback) {\n                var key = hasher.apply(null, args);\n\n                if (has(memo, key)) {\n                  setImmediate$1(function () {\n                    callback.apply(null, memo[key]);\n                  });\n                } else if (has(queues, key)) {\n                  queues[key].push(callback);\n                } else {\n                  queues[key] = [callback];\n\n                  _fn.apply(null, args.concat(function ()\n                  /*args*/\n                  {\n                    var args = slice(arguments);\n                    memo[key] = args;\n                    var q = queues[key];\n                    delete queues[key];\n\n                    for (var i = 0, l = q.length; i < l; i++) {\n                      q[i].apply(null, args);\n                    }\n                  }));\n                }\n              });\n              memoized.memo = memo;\n              memoized.unmemoized = fn;\n              return memoized;\n            }\n            /**\n             * Calls `callback` on a later loop around the event loop. In Node.js this just\n             * calls `process.nextTick`.  In the browser it will use `setImmediate` if\n             * available, otherwise `setTimeout(callback, 0)`, which means other higher\n             * priority events may precede the execution of `callback`.\n             *\n             * This is used internally for browser-compatibility purposes.\n             *\n             * @name nextTick\n             * @static\n             * @memberOf module:Utils\n             * @method\n             * @see [async.setImmediate]{@link module:Utils.setImmediate}\n             * @category Util\n             * @param {Function} callback - The function to call on a later loop around\n             * the event loop. Invoked with (args...).\n             * @param {...*} args... - any number of additional arguments to pass to the\n             * callback on the next tick.\n             * @example\n             *\n             * var call_order = [];\n             * async.nextTick(function() {\n             *     call_order.push('two');\n             *     // call_order now equals ['one','two']\n             * });\n             * call_order.push('one');\n             *\n             * async.setImmediate(function (a, b, c) {\n             *     // a, b, and c equal 1, 2, and 3\n             * }, 1, 2, 3);\n             */\n\n\n            var _defer$1;\n\n            if (hasNextTick) {\n              _defer$1 = process.nextTick;\n            } else if (hasSetImmediate) {\n              _defer$1 = setImmediate;\n            } else {\n              _defer$1 = fallback;\n            }\n\n            var nextTick = wrap(_defer$1);\n\n            function _parallel(eachfn, tasks, callback) {\n              callback = callback || noop;\n              var results = isArrayLike(tasks) ? [] : {};\n              eachfn(tasks, function (task, key, callback) {\n                wrapAsync(task)(function (err, result) {\n                  if (arguments.length > 2) {\n                    result = slice(arguments, 1);\n                  }\n\n                  results[key] = result;\n                  callback(err);\n                });\n              }, function (err) {\n                callback(err, results);\n              });\n            }\n            /**\n             * Run the `tasks` collection of functions in parallel, without waiting until\n             * the previous function has completed. If any of the functions pass an error to\n             * its callback, the main `callback` is immediately called with the value of the\n             * error. Once the `tasks` have completed, the results are passed to the final\n             * `callback` as an array.\n             *\n             * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about\n             * parallel execution of code.  If your tasks do not use any timers or perform\n             * any I/O, they will actually be executed in series.  Any synchronous setup\n             * sections for each task will happen one after the other.  JavaScript remains\n             * single-threaded.\n             *\n             * **Hint:** Use [`reflect`]{@link module:Utils.reflect} to continue the\n             * execution of other tasks when a task fails.\n             *\n             * It is also possible to use an object instead of an array. Each property will\n             * be run as a function and the results will be passed to the final `callback`\n             * as an object instead of an array. This can be a more readable way of handling\n             * results from {@link async.parallel}.\n             *\n             * @name parallel\n             * @static\n             * @memberOf module:ControlFlow\n             * @method\n             * @category Control Flow\n             * @param {Array|Iterable|Object} tasks - A collection of\n             * [async functions]{@link AsyncFunction} to run.\n             * Each async function can complete with any number of optional `result` values.\n             * @param {Function} [callback] - An optional callback to run once all the\n             * functions have completed successfully. This function gets a results array\n             * (or object) containing all the result arguments passed to the task callbacks.\n             * Invoked with (err, results).\n             *\n             * @example\n             * async.parallel([\n             *     function(callback) {\n             *         setTimeout(function() {\n             *             callback(null, 'one');\n             *         }, 200);\n             *     },\n             *     function(callback) {\n             *         setTimeout(function() {\n             *             callback(null, 'two');\n             *         }, 100);\n             *     }\n             * ],\n             * // optional callback\n             * function(err, results) {\n             *     // the results array will equal ['one','two'] even though\n             *     // the second function had a shorter timeout.\n             * });\n             *\n             * // an example using an object instead of an array\n             * async.parallel({\n             *     one: function(callback) {\n             *         setTimeout(function() {\n             *             callback(null, 1);\n             *         }, 200);\n             *     },\n             *     two: function(callback) {\n             *         setTimeout(function() {\n             *             callback(null, 2);\n             *         }, 100);\n             *     }\n             * }, function(err, results) {\n             *     // results is now equals to: {one: 1, two: 2}\n             * });\n             */\n\n\n            function parallelLimit(tasks, callback) {\n              _parallel(eachOf, tasks, callback);\n            }\n            /**\n             * The same as [`parallel`]{@link module:ControlFlow.parallel} but runs a maximum of `limit` async operations at a\n             * time.\n             *\n             * @name parallelLimit\n             * @static\n             * @memberOf module:ControlFlow\n             * @method\n             * @see [async.parallel]{@link module:ControlFlow.parallel}\n             * @category Control Flow\n             * @param {Array|Iterable|Object} tasks - A collection of\n             * [async functions]{@link AsyncFunction} to run.\n             * Each async function can complete with any number of optional `result` values.\n             * @param {number} limit - The maximum number of async operations at a time.\n             * @param {Function} [callback] - An optional callback to run once all the\n             * functions have completed successfully. This function gets a results array\n             * (or object) containing all the result arguments passed to the task callbacks.\n             * Invoked with (err, results).\n             */\n\n\n            function parallelLimit$1(tasks, limit, callback) {\n              _parallel(_eachOfLimit(limit), tasks, callback);\n            }\n            /**\n             * A queue of tasks for the worker function to complete.\n             * @typedef {Object} QueueObject\n             * @memberOf module:ControlFlow\n             * @property {Function} length - a function returning the number of items\n             * waiting to be processed. Invoke with `queue.length()`.\n             * @property {boolean} started - a boolean indicating whether or not any\n             * items have been pushed and processed by the queue.\n             * @property {Function} running - a function returning the number of items\n             * currently being processed. Invoke with `queue.running()`.\n             * @property {Function} workersList - a function returning the array of items\n             * currently being processed. Invoke with `queue.workersList()`.\n             * @property {Function} idle - a function returning false if there are items\n             * waiting or being processed, or true if not. Invoke with `queue.idle()`.\n             * @property {number} concurrency - an integer for determining how many `worker`\n             * functions should be run in parallel. This property can be changed after a\n             * `queue` is created to alter the concurrency on-the-fly.\n             * @property {Function} push - add a new task to the `queue`. Calls `callback`\n             * once the `worker` has finished processing the task. Instead of a single task,\n             * a `tasks` array can be submitted. The respective callback is used for every\n             * task in the list. Invoke with `queue.push(task, [callback])`,\n             * @property {Function} unshift - add a new task to the front of the `queue`.\n             * Invoke with `queue.unshift(task, [callback])`.\n             * @property {Function} remove - remove items from the queue that match a test\n             * function.  The test function will be passed an object with a `data` property,\n             * and a `priority` property, if this is a\n             * [priorityQueue]{@link module:ControlFlow.priorityQueue} object.\n             * Invoked with `queue.remove(testFn)`, where `testFn` is of the form\n             * `function ({data, priority}) {}` and returns a Boolean.\n             * @property {Function} saturated - a callback that is called when the number of\n             * running workers hits the `concurrency` limit, and further tasks will be\n             * queued.\n             * @property {Function} unsaturated - a callback that is called when the number\n             * of running workers is less than the `concurrency` & `buffer` limits, and\n             * further tasks will not be queued.\n             * @property {number} buffer - A minimum threshold buffer in order to say that\n             * the `queue` is `unsaturated`.\n             * @property {Function} empty - a callback that is called when the last item\n             * from the `queue` is given to a `worker`.\n             * @property {Function} drain - a callback that is called when the last item\n             * from the `queue` has returned from the `worker`.\n             * @property {Function} error - a callback that is called when a task errors.\n             * Has the signature `function(error, task)`.\n             * @property {boolean} paused - a boolean for determining whether the queue is\n             * in a paused state.\n             * @property {Function} pause - a function that pauses the processing of tasks\n             * until `resume()` is called. Invoke with `queue.pause()`.\n             * @property {Function} resume - a function that resumes the processing of\n             * queued tasks when the queue is paused. Invoke with `queue.resume()`.\n             * @property {Function} kill - a function that removes the `drain` callback and\n             * empties remaining tasks from the queue forcing it to go idle. No more tasks\n             * should be pushed to the queue after calling this function. Invoke with `queue.kill()`.\n             */\n\n            /**\n             * Creates a `queue` object with the specified `concurrency`. Tasks added to the\n             * `queue` are processed in parallel (up to the `concurrency` limit). If all\n             * `worker`s are in progress, the task is queued until one becomes available.\n             * Once a `worker` completes a `task`, that `task`'s callback is called.\n             *\n             * @name queue\n             * @static\n             * @memberOf module:ControlFlow\n             * @method\n             * @category Control Flow\n             * @param {AsyncFunction} worker - An async function for processing a queued task.\n             * If you want to handle errors from an individual task, pass a callback to\n             * `q.push()`. Invoked with (task, callback).\n             * @param {number} [concurrency=1] - An `integer` for determining how many\n             * `worker` functions should be run in parallel.  If omitted, the concurrency\n             * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n             * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can\n             * attached as certain properties to listen for specific events during the\n             * lifecycle of the queue.\n             * @example\n             *\n             * // create a queue object with concurrency 2\n             * var q = async.queue(function(task, callback) {\n             *     console.log('hello ' + task.name);\n             *     callback();\n             * }, 2);\n             *\n             * // assign a callback\n             * q.drain = function() {\n             *     console.log('all items have been processed');\n             * };\n             *\n             * // add some items to the queue\n             * q.push({name: 'foo'}, function(err) {\n             *     console.log('finished processing foo');\n             * });\n             * q.push({name: 'bar'}, function (err) {\n             *     console.log('finished processing bar');\n             * });\n             *\n             * // add some items to the queue (batch-wise)\n             * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {\n             *     console.log('finished processing item');\n             * });\n             *\n             * // add some items to the front of the queue\n             * q.unshift({name: 'bar'}, function (err) {\n             *     console.log('finished processing bar');\n             * });\n             */\n\n\n            var queue$1 = function queue$1(worker, concurrency) {\n              var _worker = wrapAsync(worker);\n\n              return queue(function (items, cb) {\n                _worker(items[0], cb);\n              }, concurrency, 1);\n            };\n            /**\n             * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and\n             * completed in ascending priority order.\n             *\n             * @name priorityQueue\n             * @static\n             * @memberOf module:ControlFlow\n             * @method\n             * @see [async.queue]{@link module:ControlFlow.queue}\n             * @category Control Flow\n             * @param {AsyncFunction} worker - An async function for processing a queued task.\n             * If you want to handle errors from an individual task, pass a callback to\n             * `q.push()`.\n             * Invoked with (task, callback).\n             * @param {number} concurrency - An `integer` for determining how many `worker`\n             * functions should be run in parallel.  If omitted, the concurrency defaults to\n             * `1`.  If the concurrency is `0`, an error is thrown.\n             * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are two\n             * differences between `queue` and `priorityQueue` objects:\n             * * `push(task, priority, [callback])` - `priority` should be a number. If an\n             *   array of `tasks` is given, all tasks will be assigned the same priority.\n             * * The `unshift` method was removed.\n             */\n\n\n            var priorityQueue = function priorityQueue(worker, concurrency) {\n              // Start with a normal queue\n              var q = queue$1(worker, concurrency); // Override push to accept second parameter representing priority\n\n              q.push = function (data, priority, callback) {\n                if (callback == null) callback = noop;\n\n                if (typeof callback !== 'function') {\n                  throw new Error('task callback must be a function');\n                }\n\n                q.started = true;\n\n                if (!isArray(data)) {\n                  data = [data];\n                }\n\n                if (data.length === 0) {\n                  // call drain immediately if there are no tasks\n                  return setImmediate$1(function () {\n                    q.drain();\n                  });\n                }\n\n                priority = priority || 0;\n                var nextNode = q._tasks.head;\n\n                while (nextNode && priority >= nextNode.priority) {\n                  nextNode = nextNode.next;\n                }\n\n                for (var i = 0, l = data.length; i < l; i++) {\n                  var item = {\n                    data: data[i],\n                    priority: priority,\n                    callback: callback\n                  };\n\n                  if (nextNode) {\n                    q._tasks.insertBefore(nextNode, item);\n                  } else {\n                    q._tasks.push(item);\n                  }\n                }\n\n                setImmediate$1(q.process);\n              }; // Remove unshift function\n\n\n              delete q.unshift;\n              return q;\n            };\n            /**\n             * Runs the `tasks` array of functions in parallel, without waiting until the\n             * previous function has completed. Once any of the `tasks` complete or pass an\n             * error to its callback, the main `callback` is immediately called. It's\n             * equivalent to `Promise.race()`.\n             *\n             * @name race\n             * @static\n             * @memberOf module:ControlFlow\n             * @method\n             * @category Control Flow\n             * @param {Array} tasks - An array containing [async functions]{@link AsyncFunction}\n             * to run. Each function can complete with an optional `result` value.\n             * @param {Function} callback - A callback to run once any of the functions have\n             * completed. This function gets an error or result from the first function that\n             * completed. Invoked with (err, result).\n             * @returns undefined\n             * @example\n             *\n             * async.race([\n             *     function(callback) {\n             *         setTimeout(function() {\n             *             callback(null, 'one');\n             *         }, 200);\n             *     },\n             *     function(callback) {\n             *         setTimeout(function() {\n             *             callback(null, 'two');\n             *         }, 100);\n             *     }\n             * ],\n             * // main callback\n             * function(err, result) {\n             *     // the result will be equal to 'two' as it finishes earlier\n             * });\n             */\n\n\n            function race(tasks, callback) {\n              callback = once(callback || noop);\n              if (!isArray(tasks)) return callback(new TypeError('First argument to race must be an array of functions'));\n              if (!tasks.length) return callback();\n\n              for (var i = 0, l = tasks.length; i < l; i++) {\n                wrapAsync(tasks[i])(callback);\n              }\n            }\n            /**\n             * Same as [`reduce`]{@link module:Collections.reduce}, only operates on `array` in reverse order.\n             *\n             * @name reduceRight\n             * @static\n             * @memberOf module:Collections\n             * @method\n             * @see [async.reduce]{@link module:Collections.reduce}\n             * @alias foldr\n             * @category Collection\n             * @param {Array} array - A collection to iterate over.\n             * @param {*} memo - The initial state of the reduction.\n             * @param {AsyncFunction} iteratee - A function applied to each item in the\n             * array to produce the next step in the reduction.\n             * The `iteratee` should complete with the next state of the reduction.\n             * If the iteratee complete with an error, the reduction is stopped and the\n             * main `callback` is immediately called with the error.\n             * Invoked with (memo, item, callback).\n             * @param {Function} [callback] - A callback which is called after all the\n             * `iteratee` functions have finished. Result is the reduced value. Invoked with\n             * (err, result).\n             */\n\n\n            function reduceRight(array, memo, iteratee, callback) {\n              var reversed = slice(array).reverse();\n              reduce(reversed, memo, iteratee, callback);\n            }\n            /**\n             * Wraps the async function in another function that always completes with a\n             * result object, even when it errors.\n             *\n             * The result object has either the property `error` or `value`.\n             *\n             * @name reflect\n             * @static\n             * @memberOf module:Utils\n             * @method\n             * @category Util\n             * @param {AsyncFunction} fn - The async function you want to wrap\n             * @returns {Function} - A function that always passes null to it's callback as\n             * the error. The second argument to the callback will be an `object` with\n             * either an `error` or a `value` property.\n             * @example\n             *\n             * async.parallel([\n             *     async.reflect(function(callback) {\n             *         // do some stuff ...\n             *         callback(null, 'one');\n             *     }),\n             *     async.reflect(function(callback) {\n             *         // do some more stuff but error ...\n             *         callback('bad stuff happened');\n             *     }),\n             *     async.reflect(function(callback) {\n             *         // do some more stuff ...\n             *         callback(null, 'two');\n             *     })\n             * ],\n             * // optional callback\n             * function(err, results) {\n             *     // values\n             *     // results[0].value = 'one'\n             *     // results[1].error = 'bad stuff happened'\n             *     // results[2].value = 'two'\n             * });\n             */\n\n\n            function reflect(fn) {\n              var _fn = wrapAsync(fn);\n\n              return initialParams(function reflectOn(args, reflectCallback) {\n                args.push(function callback(error, cbArg) {\n                  if (error) {\n                    reflectCallback(null, {\n                      error: error\n                    });\n                  } else {\n                    var value;\n\n                    if (arguments.length <= 2) {\n                      value = cbArg;\n                    } else {\n                      value = slice(arguments, 1);\n                    }\n\n                    reflectCallback(null, {\n                      value: value\n                    });\n                  }\n                });\n                return _fn.apply(this, args);\n              });\n            }\n            /**\n             * A helper function that wraps an array or an object of functions with `reflect`.\n             *\n             * @name reflectAll\n             * @static\n             * @memberOf module:Utils\n             * @method\n             * @see [async.reflect]{@link module:Utils.reflect}\n             * @category Util\n             * @param {Array|Object|Iterable} tasks - The collection of\n             * [async functions]{@link AsyncFunction} to wrap in `async.reflect`.\n             * @returns {Array} Returns an array of async functions, each wrapped in\n             * `async.reflect`\n             * @example\n             *\n             * let tasks = [\n             *     function(callback) {\n             *         setTimeout(function() {\n             *             callback(null, 'one');\n             *         }, 200);\n             *     },\n             *     function(callback) {\n             *         // do some more stuff but error ...\n             *         callback(new Error('bad stuff happened'));\n             *     },\n             *     function(callback) {\n             *         setTimeout(function() {\n             *             callback(null, 'two');\n             *         }, 100);\n             *     }\n             * ];\n             *\n             * async.parallel(async.reflectAll(tasks),\n             * // optional callback\n             * function(err, results) {\n             *     // values\n             *     // results[0].value = 'one'\n             *     // results[1].error = Error('bad stuff happened')\n             *     // results[2].value = 'two'\n             * });\n             *\n             * // an example using an object instead of an array\n             * let tasks = {\n             *     one: function(callback) {\n             *         setTimeout(function() {\n             *             callback(null, 'one');\n             *         }, 200);\n             *     },\n             *     two: function(callback) {\n             *         callback('two');\n             *     },\n             *     three: function(callback) {\n             *         setTimeout(function() {\n             *             callback(null, 'three');\n             *         }, 100);\n             *     }\n             * };\n             *\n             * async.parallel(async.reflectAll(tasks),\n             * // optional callback\n             * function(err, results) {\n             *     // values\n             *     // results.one.value = 'one'\n             *     // results.two.error = 'two'\n             *     // results.three.value = 'three'\n             * });\n             */\n\n\n            function reflectAll(tasks) {\n              var results;\n\n              if (isArray(tasks)) {\n                results = arrayMap(tasks, reflect);\n              } else {\n                results = {};\n                baseForOwn(tasks, function (task, key) {\n                  results[key] = reflect.call(this, task);\n                });\n              }\n\n              return results;\n            }\n\n            function reject$1(eachfn, arr, iteratee, callback) {\n              _filter(eachfn, arr, function (value, cb) {\n                iteratee(value, function (err, v) {\n                  cb(err, !v);\n                });\n              }, callback);\n            }\n            /**\n             * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.\n             *\n             * @name reject\n             * @static\n             * @memberOf module:Collections\n             * @method\n             * @see [async.filter]{@link module:Collections.filter}\n             * @category Collection\n             * @param {Array|Iterable|Object} coll - A collection to iterate over.\n             * @param {Function} iteratee - An async truth test to apply to each item in\n             * `coll`.\n             * The should complete with a boolean value as its `result`.\n             * Invoked with (item, callback).\n             * @param {Function} [callback] - A callback which is called after all the\n             * `iteratee` functions have finished. Invoked with (err, results).\n             * @example\n             *\n             * async.reject(['file1','file2','file3'], function(filePath, callback) {\n             *     fs.access(filePath, function(err) {\n             *         callback(null, !err)\n             *     });\n             * }, function(err, results) {\n             *     // results now equals an array of missing files\n             *     createFiles(results);\n             * });\n             */\n\n\n            var reject = doParallel(reject$1);\n            /**\n             * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a\n             * time.\n             *\n             * @name rejectLimit\n             * @static\n             * @memberOf module:Collections\n             * @method\n             * @see [async.reject]{@link module:Collections.reject}\n             * @category Collection\n             * @param {Array|Iterable|Object} coll - A collection to iterate over.\n             * @param {number} limit - The maximum number of async operations at a time.\n             * @param {Function} iteratee - An async truth test to apply to each item in\n             * `coll`.\n             * The should complete with a boolean value as its `result`.\n             * Invoked with (item, callback).\n             * @param {Function} [callback] - A callback which is called after all the\n             * `iteratee` functions have finished. Invoked with (err, results).\n             */\n\n            var rejectLimit = doParallelLimit(reject$1);\n            /**\n             * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.\n             *\n             * @name rejectSeries\n             * @static\n             * @memberOf module:Collections\n             * @method\n             * @see [async.reject]{@link module:Collections.reject}\n             * @category Collection\n             * @param {Array|Iterable|Object} coll - A collection to iterate over.\n             * @param {Function} iteratee - An async truth test to apply to each item in\n             * `coll`.\n             * The should complete with a boolean value as its `result`.\n             * Invoked with (item, callback).\n             * @param {Function} [callback] - A callback which is called after all the\n             * `iteratee` functions have finished. Invoked with (err, results).\n             */\n\n            var rejectSeries = doLimit(rejectLimit, 1);\n            /**\n             * Creates a function that returns `value`.\n             *\n             * @static\n             * @memberOf _\n             * @since 2.4.0\n             * @category Util\n             * @param {*} value The value to return from the new function.\n             * @returns {Function} Returns the new constant function.\n             * @example\n             *\n             * var objects = _.times(2, _.constant({ 'a': 1 }));\n             *\n             * console.log(objects);\n             * // => [{ 'a': 1 }, { 'a': 1 }]\n             *\n             * console.log(objects[0] === objects[1]);\n             * // => true\n             */\n\n            function constant$1(value) {\n              return function () {\n                return value;\n              };\n            }\n            /**\n             * Attempts to get a successful response from `task` no more than `times` times\n             * before returning an error. If the task is successful, the `callback` will be\n             * passed the result of the successful task. If all attempts fail, the callback\n             * will be passed the error and result (if any) of the final attempt.\n             *\n             * @name retry\n             * @static\n             * @memberOf module:ControlFlow\n             * @method\n             * @category Control Flow\n             * @see [async.retryable]{@link module:ControlFlow.retryable}\n             * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - Can be either an\n             * object with `times` and `interval` or a number.\n             * * `times` - The number of attempts to make before giving up.  The default\n             *   is `5`.\n             * * `interval` - The time to wait between retries, in milliseconds.  The\n             *   default is `0`. The interval may also be specified as a function of the\n             *   retry count (see example).\n             * * `errorFilter` - An optional synchronous function that is invoked on\n             *   erroneous result. If it returns `true` the retry attempts will continue;\n             *   if the function returns `false` the retry flow is aborted with the current\n             *   attempt's error and result being returned to the final callback.\n             *   Invoked with (err).\n             * * If `opts` is a number, the number specifies the number of times to retry,\n             *   with the default interval of `0`.\n             * @param {AsyncFunction} task - An async function to retry.\n             * Invoked with (callback).\n             * @param {Function} [callback] - An optional callback which is called when the\n             * task has succeeded, or after the final failed attempt. It receives the `err`\n             * and `result` arguments of the last attempt at completing the `task`. Invoked\n             * with (err, results).\n             *\n             * @example\n             *\n             * // The `retry` function can be used as a stand-alone control flow by passing\n             * // a callback, as shown below:\n             *\n             * // try calling apiMethod 3 times\n             * async.retry(3, apiMethod, function(err, result) {\n             *     // do something with the result\n             * });\n             *\n             * // try calling apiMethod 3 times, waiting 200 ms between each retry\n             * async.retry({times: 3, interval: 200}, apiMethod, function(err, result) {\n             *     // do something with the result\n             * });\n             *\n             * // try calling apiMethod 10 times with exponential backoff\n             * // (i.e. intervals of 100, 200, 400, 800, 1600, ... milliseconds)\n             * async.retry({\n             *   times: 10,\n             *   interval: function(retryCount) {\n             *     return 50 * Math.pow(2, retryCount);\n             *   }\n             * }, apiMethod, function(err, result) {\n             *     // do something with the result\n             * });\n             *\n             * // try calling apiMethod the default 5 times no delay between each retry\n             * async.retry(apiMethod, function(err, result) {\n             *     // do something with the result\n             * });\n             *\n             * // try calling apiMethod only when error condition satisfies, all other\n             * // errors will abort the retry control flow and return to final callback\n             * async.retry({\n             *   errorFilter: function(err) {\n             *     return err.message === 'Temporary error'; // only retry on a specific error\n             *   }\n             * }, apiMethod, function(err, result) {\n             *     // do something with the result\n             * });\n             *\n             * // to retry individual methods that are not as reliable within other\n             * // control flow functions, use the `retryable` wrapper:\n             * async.auto({\n             *     users: api.getUsers.bind(api),\n             *     payments: async.retryable(3, api.getPayments.bind(api))\n             * }, function(err, results) {\n             *     // do something with the results\n             * });\n             *\n             */\n\n\n            function retry(opts, task, callback) {\n              var DEFAULT_TIMES = 5;\n              var DEFAULT_INTERVAL = 0;\n              var options = {\n                times: DEFAULT_TIMES,\n                intervalFunc: constant$1(DEFAULT_INTERVAL)\n              };\n\n              function parseTimes(acc, t) {\n                if (typeof t === 'object') {\n                  acc.times = +t.times || DEFAULT_TIMES;\n                  acc.intervalFunc = typeof t.interval === 'function' ? t.interval : constant$1(+t.interval || DEFAULT_INTERVAL);\n                  acc.errorFilter = t.errorFilter;\n                } else if (typeof t === 'number' || typeof t === 'string') {\n                  acc.times = +t || DEFAULT_TIMES;\n                } else {\n                  throw new Error(\"Invalid arguments for async.retry\");\n                }\n              }\n\n              if (arguments.length < 3 && typeof opts === 'function') {\n                callback = task || noop;\n                task = opts;\n              } else {\n                parseTimes(options, opts);\n                callback = callback || noop;\n              }\n\n              if (typeof task !== 'function') {\n                throw new Error(\"Invalid arguments for async.retry\");\n              }\n\n              var _task = wrapAsync(task);\n\n              var attempt = 1;\n\n              function retryAttempt() {\n                _task(function (err) {\n                  if (err && attempt++ < options.times && (typeof options.errorFilter != 'function' || options.errorFilter(err))) {\n                    setTimeout(retryAttempt, options.intervalFunc(attempt));\n                  } else {\n                    callback.apply(null, arguments);\n                  }\n                });\n              }\n\n              retryAttempt();\n            }\n            /**\n             * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method\n             * wraps a task and makes it retryable, rather than immediately calling it\n             * with retries.\n             *\n             * @name retryable\n             * @static\n             * @memberOf module:ControlFlow\n             * @method\n             * @see [async.retry]{@link module:ControlFlow.retry}\n             * @category Control Flow\n             * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional\n             * options, exactly the same as from `retry`\n             * @param {AsyncFunction} task - the asynchronous function to wrap.\n             * This function will be passed any arguments passed to the returned wrapper.\n             * Invoked with (...args, callback).\n             * @returns {AsyncFunction} The wrapped function, which when invoked, will\n             * retry on an error, based on the parameters specified in `opts`.\n             * This function will accept the same parameters as `task`.\n             * @example\n             *\n             * async.auto({\n             *     dep1: async.retryable(3, getFromFlakyService),\n             *     process: [\"dep1\", async.retryable(3, function (results, cb) {\n             *         maybeProcessData(results.dep1, cb);\n             *     })]\n             * }, callback);\n             */\n\n\n            var retryable = function retryable(opts, task) {\n              if (!task) {\n                task = opts;\n                opts = null;\n              }\n\n              var _task = wrapAsync(task);\n\n              return initialParams(function (args, callback) {\n                function taskFn(cb) {\n                  _task.apply(null, args.concat(cb));\n                }\n\n                if (opts) retry(opts, taskFn, callback);else retry(taskFn, callback);\n              });\n            };\n            /**\n             * Run the functions in the `tasks` collection in series, each one running once\n             * the previous function has completed. If any functions in the series pass an\n             * error to its callback, no more functions are run, and `callback` is\n             * immediately called with the value of the error. Otherwise, `callback`\n             * receives an array of results when `tasks` have completed.\n             *\n             * It is also possible to use an object instead of an array. Each property will\n             * be run as a function, and the results will be passed to the final `callback`\n             * as an object instead of an array. This can be a more readable way of handling\n             *  results from {@link async.series}.\n             *\n             * **Note** that while many implementations preserve the order of object\n             * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)\n             * explicitly states that\n             *\n             * > The mechanics and order of enumerating the properties is not specified.\n             *\n             * So if you rely on the order in which your series of functions are executed,\n             * and want this to work on all platforms, consider using an array.\n             *\n             * @name series\n             * @static\n             * @memberOf module:ControlFlow\n             * @method\n             * @category Control Flow\n             * @param {Array|Iterable|Object} tasks - A collection containing\n             * [async functions]{@link AsyncFunction} to run in series.\n             * Each function can complete with any number of optional `result` values.\n             * @param {Function} [callback] - An optional callback to run once all the\n             * functions have completed. This function gets a results array (or object)\n             * containing all the result arguments passed to the `task` callbacks. Invoked\n             * with (err, result).\n             * @example\n             * async.series([\n             *     function(callback) {\n             *         // do some stuff ...\n             *         callback(null, 'one');\n             *     },\n             *     function(callback) {\n             *         // do some more stuff ...\n             *         callback(null, 'two');\n             *     }\n             * ],\n             * // optional callback\n             * function(err, results) {\n             *     // results is now equal to ['one', 'two']\n             * });\n             *\n             * async.series({\n             *     one: function(callback) {\n             *         setTimeout(function() {\n             *             callback(null, 1);\n             *         }, 200);\n             *     },\n             *     two: function(callback){\n             *         setTimeout(function() {\n             *             callback(null, 2);\n             *         }, 100);\n             *     }\n             * }, function(err, results) {\n             *     // results is now equal to: {one: 1, two: 2}\n             * });\n             */\n\n\n            function series(tasks, callback) {\n              _parallel(eachOfSeries, tasks, callback);\n            }\n            /**\n             * Returns `true` if at least one element in the `coll` satisfies an async test.\n             * If any iteratee call returns `true`, the main `callback` is immediately\n             * called.\n             *\n             * @name some\n             * @static\n             * @memberOf module:Collections\n             * @method\n             * @alias any\n             * @category Collection\n             * @param {Array|Iterable|Object} coll - A collection to iterate over.\n             * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n             * in the collections in parallel.\n             * The iteratee should complete with a boolean `result` value.\n             * Invoked with (item, callback).\n             * @param {Function} [callback] - A callback which is called as soon as any\n             * iteratee returns `true`, or after all the iteratee functions have finished.\n             * Result will be either `true` or `false` depending on the values of the async\n             * tests. Invoked with (err, result).\n             * @example\n             *\n             * async.some(['file1','file2','file3'], function(filePath, callback) {\n             *     fs.access(filePath, function(err) {\n             *         callback(null, !err)\n             *     });\n             * }, function(err, result) {\n             *     // if result is true then at least one of the files exists\n             * });\n             */\n\n\n            var some = doParallel(_createTester(Boolean, identity));\n            /**\n             * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.\n             *\n             * @name someLimit\n             * @static\n             * @memberOf module:Collections\n             * @method\n             * @see [async.some]{@link module:Collections.some}\n             * @alias anyLimit\n             * @category Collection\n             * @param {Array|Iterable|Object} coll - A collection to iterate over.\n             * @param {number} limit - The maximum number of async operations at a time.\n             * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n             * in the collections in parallel.\n             * The iteratee should complete with a boolean `result` value.\n             * Invoked with (item, callback).\n             * @param {Function} [callback] - A callback which is called as soon as any\n             * iteratee returns `true`, or after all the iteratee functions have finished.\n             * Result will be either `true` or `false` depending on the values of the async\n             * tests. Invoked with (err, result).\n             */\n\n            var someLimit = doParallelLimit(_createTester(Boolean, identity));\n            /**\n             * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.\n             *\n             * @name someSeries\n             * @static\n             * @memberOf module:Collections\n             * @method\n             * @see [async.some]{@link module:Collections.some}\n             * @alias anySeries\n             * @category Collection\n             * @param {Array|Iterable|Object} coll - A collection to iterate over.\n             * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n             * in the collections in series.\n             * The iteratee should complete with a boolean `result` value.\n             * Invoked with (item, callback).\n             * @param {Function} [callback] - A callback which is called as soon as any\n             * iteratee returns `true`, or after all the iteratee functions have finished.\n             * Result will be either `true` or `false` depending on the values of the async\n             * tests. Invoked with (err, result).\n             */\n\n            var someSeries = doLimit(someLimit, 1);\n            /**\n             * Sorts a list by the results of running each `coll` value through an async\n             * `iteratee`.\n             *\n             * @name sortBy\n             * @static\n             * @memberOf module:Collections\n             * @method\n             * @category Collection\n             * @param {Array|Iterable|Object} coll - A collection to iterate over.\n             * @param {AsyncFunction} iteratee - An async function to apply to each item in\n             * `coll`.\n             * The iteratee should complete with a value to use as the sort criteria as\n             * its `result`.\n             * Invoked with (item, callback).\n             * @param {Function} callback - A callback which is called after all the\n             * `iteratee` functions have finished, or an error occurs. Results is the items\n             * from the original `coll` sorted by the values returned by the `iteratee`\n             * calls. Invoked with (err, results).\n             * @example\n             *\n             * async.sortBy(['file1','file2','file3'], function(file, callback) {\n             *     fs.stat(file, function(err, stats) {\n             *         callback(err, stats.mtime);\n             *     });\n             * }, function(err, results) {\n             *     // results is now the original array of files sorted by\n             *     // modified date\n             * });\n             *\n             * // By modifying the callback parameter the\n             * // sorting order can be influenced:\n             *\n             * // ascending order\n             * async.sortBy([1,9,3,5], function(x, callback) {\n             *     callback(null, x);\n             * }, function(err,result) {\n             *     // result callback\n             * });\n             *\n             * // descending order\n             * async.sortBy([1,9,3,5], function(x, callback) {\n             *     callback(null, x*-1);    //<- x*-1 instead of x, turns the order around\n             * }, function(err,result) {\n             *     // result callback\n             * });\n             */\n\n            function sortBy(coll, iteratee, callback) {\n              var _iteratee = wrapAsync(iteratee);\n\n              map(coll, function (x, callback) {\n                _iteratee(x, function (err, criteria) {\n                  if (err) return callback(err);\n                  callback(null, {\n                    value: x,\n                    criteria: criteria\n                  });\n                });\n              }, function (err, results) {\n                if (err) return callback(err);\n                callback(null, arrayMap(results.sort(comparator), baseProperty('value')));\n              });\n\n              function comparator(left, right) {\n                var a = left.criteria,\n                    b = right.criteria;\n                return a < b ? -1 : a > b ? 1 : 0;\n              }\n            }\n            /**\n             * Sets a time limit on an asynchronous function. If the function does not call\n             * its callback within the specified milliseconds, it will be called with a\n             * timeout error. The code property for the error object will be `'ETIMEDOUT'`.\n             *\n             * @name timeout\n             * @static\n             * @memberOf module:Utils\n             * @method\n             * @category Util\n             * @param {AsyncFunction} asyncFn - The async function to limit in time.\n             * @param {number} milliseconds - The specified time limit.\n             * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)\n             * to timeout Error for more information..\n             * @returns {AsyncFunction} Returns a wrapped function that can be used with any\n             * of the control flow functions.\n             * Invoke this function with the same parameters as you would `asyncFunc`.\n             * @example\n             *\n             * function myFunction(foo, callback) {\n             *     doAsyncTask(foo, function(err, data) {\n             *         // handle errors\n             *         if (err) return callback(err);\n             *\n             *         // do some stuff ...\n             *\n             *         // return processed data\n             *         return callback(null, data);\n             *     });\n             * }\n             *\n             * var wrapped = async.timeout(myFunction, 1000);\n             *\n             * // call `wrapped` as you would `myFunction`\n             * wrapped({ bar: 'bar' }, function(err, data) {\n             *     // if `myFunction` takes < 1000 ms to execute, `err`\n             *     // and `data` will have their expected values\n             *\n             *     // else `err` will be an Error with the code 'ETIMEDOUT'\n             * });\n             */\n\n\n            function timeout(asyncFn, milliseconds, info) {\n              var fn = wrapAsync(asyncFn);\n              return initialParams(function (args, callback) {\n                var timedOut = false;\n                var timer;\n\n                function timeoutCallback() {\n                  var name = asyncFn.name || 'anonymous';\n                  var error = new Error('Callback function \"' + name + '\" timed out.');\n                  error.code = 'ETIMEDOUT';\n\n                  if (info) {\n                    error.info = info;\n                  }\n\n                  timedOut = true;\n                  callback(error);\n                }\n\n                args.push(function () {\n                  if (!timedOut) {\n                    callback.apply(null, arguments);\n                    clearTimeout(timer);\n                  }\n                }); // setup timer and call original function\n\n                timer = setTimeout(timeoutCallback, milliseconds);\n                fn.apply(null, args);\n              });\n            }\n            /* Built-in method references for those with the same name as other `lodash` methods. */\n\n\n            var nativeCeil = Math.ceil;\n            var nativeMax = Math.max;\n            /**\n             * The base implementation of `_.range` and `_.rangeRight` which doesn't\n             * coerce arguments.\n             *\n             * @private\n             * @param {number} start The start of the range.\n             * @param {number} end The end of the range.\n             * @param {number} step The value to increment or decrement by.\n             * @param {boolean} [fromRight] Specify iterating from right to left.\n             * @returns {Array} Returns the range of numbers.\n             */\n\n            function baseRange(start, end, step, fromRight) {\n              var index = -1,\n                  length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\n                  result = Array(length);\n\n              while (length--) {\n                result[fromRight ? length : ++index] = start;\n                start += step;\n              }\n\n              return result;\n            }\n            /**\n             * The same as [times]{@link module:ControlFlow.times} but runs a maximum of `limit` async operations at a\n             * time.\n             *\n             * @name timesLimit\n             * @static\n             * @memberOf module:ControlFlow\n             * @method\n             * @see [async.times]{@link module:ControlFlow.times}\n             * @category Control Flow\n             * @param {number} count - The number of times to run the function.\n             * @param {number} limit - The maximum number of async operations at a time.\n             * @param {AsyncFunction} iteratee - The async function to call `n` times.\n             * Invoked with the iteration index and a callback: (n, next).\n             * @param {Function} callback - see [async.map]{@link module:Collections.map}.\n             */\n\n\n            function timeLimit(count, limit, iteratee, callback) {\n              var _iteratee = wrapAsync(iteratee);\n\n              mapLimit(baseRange(0, count, 1), limit, _iteratee, callback);\n            }\n            /**\n             * Calls the `iteratee` function `n` times, and accumulates results in the same\n             * manner you would use with [map]{@link module:Collections.map}.\n             *\n             * @name times\n             * @static\n             * @memberOf module:ControlFlow\n             * @method\n             * @see [async.map]{@link module:Collections.map}\n             * @category Control Flow\n             * @param {number} n - The number of times to run the function.\n             * @param {AsyncFunction} iteratee - The async function to call `n` times.\n             * Invoked with the iteration index and a callback: (n, next).\n             * @param {Function} callback - see {@link module:Collections.map}.\n             * @example\n             *\n             * // Pretend this is some complicated async factory\n             * var createUser = function(id, callback) {\n             *     callback(null, {\n             *         id: 'user' + id\n             *     });\n             * };\n             *\n             * // generate 5 users\n             * async.times(5, function(n, next) {\n             *     createUser(n, function(err, user) {\n             *         next(err, user);\n             *     });\n             * }, function(err, users) {\n             *     // we should now have 5 users\n             * });\n             */\n\n\n            var times = doLimit(timeLimit, Infinity);\n            /**\n             * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.\n             *\n             * @name timesSeries\n             * @static\n             * @memberOf module:ControlFlow\n             * @method\n             * @see [async.times]{@link module:ControlFlow.times}\n             * @category Control Flow\n             * @param {number} n - The number of times to run the function.\n             * @param {AsyncFunction} iteratee - The async function to call `n` times.\n             * Invoked with the iteration index and a callback: (n, next).\n             * @param {Function} callback - see {@link module:Collections.map}.\n             */\n\n            var timesSeries = doLimit(timeLimit, 1);\n            /**\n             * A relative of `reduce`.  Takes an Object or Array, and iterates over each\n             * element in series, each step potentially mutating an `accumulator` value.\n             * The type of the accumulator defaults to the type of collection passed in.\n             *\n             * @name transform\n             * @static\n             * @memberOf module:Collections\n             * @method\n             * @category Collection\n             * @param {Array|Iterable|Object} coll - A collection to iterate over.\n             * @param {*} [accumulator] - The initial state of the transform.  If omitted,\n             * it will default to an empty Object or Array, depending on the type of `coll`\n             * @param {AsyncFunction} iteratee - A function applied to each item in the\n             * collection that potentially modifies the accumulator.\n             * Invoked with (accumulator, item, key, callback).\n             * @param {Function} [callback] - A callback which is called after all the\n             * `iteratee` functions have finished. Result is the transformed accumulator.\n             * Invoked with (err, result).\n             * @example\n             *\n             * async.transform([1,2,3], function(acc, item, index, callback) {\n             *     // pointless async:\n             *     process.nextTick(function() {\n             *         acc.push(item * 2)\n             *         callback(null)\n             *     });\n             * }, function(err, result) {\n             *     // result is now equal to [2, 4, 6]\n             * });\n             *\n             * @example\n             *\n             * async.transform({a: 1, b: 2, c: 3}, function (obj, val, key, callback) {\n             *     setImmediate(function () {\n             *         obj[key] = val * 2;\n             *         callback();\n             *     })\n             * }, function (err, result) {\n             *     // result is equal to {a: 2, b: 4, c: 6}\n             * })\n             */\n\n            function transform(coll, accumulator, iteratee, callback) {\n              if (arguments.length <= 3) {\n                callback = iteratee;\n                iteratee = accumulator;\n                accumulator = isArray(coll) ? [] : {};\n              }\n\n              callback = once(callback || noop);\n\n              var _iteratee = wrapAsync(iteratee);\n\n              eachOf(coll, function (v, k, cb) {\n                _iteratee(accumulator, v, k, cb);\n              }, function (err) {\n                callback(err, accumulator);\n              });\n            }\n            /**\n             * It runs each task in series but stops whenever any of the functions were\n             * successful. If one of the tasks were successful, the `callback` will be\n             * passed the result of the successful task. If all tasks fail, the callback\n             * will be passed the error and result (if any) of the final attempt.\n             *\n             * @name tryEach\n             * @static\n             * @memberOf module:ControlFlow\n             * @method\n             * @category Control Flow\n             * @param {Array|Iterable|Object} tasks - A collection containing functions to\n             * run, each function is passed a `callback(err, result)` it must call on\n             * completion with an error `err` (which can be `null`) and an optional `result`\n             * value.\n             * @param {Function} [callback] - An optional callback which is called when one\n             * of the tasks has succeeded, or all have failed. It receives the `err` and\n             * `result` arguments of the last attempt at completing the `task`. Invoked with\n             * (err, results).\n             * @example\n             * async.tryEach([\n             *     function getDataFromFirstWebsite(callback) {\n             *         // Try getting the data from the first website\n             *         callback(err, data);\n             *     },\n             *     function getDataFromSecondWebsite(callback) {\n             *         // First website failed,\n             *         // Try getting the data from the backup website\n             *         callback(err, data);\n             *     }\n             * ],\n             * // optional callback\n             * function(err, results) {\n             *     Now do something with the data.\n             * });\n             *\n             */\n\n\n            function tryEach(tasks, callback) {\n              var error = null;\n              var result;\n              callback = callback || noop;\n              eachSeries(tasks, function (task, callback) {\n                wrapAsync(task)(function (err, res\n                /*, ...args*/\n                ) {\n                  if (arguments.length > 2) {\n                    result = slice(arguments, 1);\n                  } else {\n                    result = res;\n                  }\n\n                  error = err;\n                  callback(!err);\n                });\n              }, function () {\n                callback(error, result);\n              });\n            }\n            /**\n             * Undoes a [memoize]{@link module:Utils.memoize}d function, reverting it to the original,\n             * unmemoized form. Handy for testing.\n             *\n             * @name unmemoize\n             * @static\n             * @memberOf module:Utils\n             * @method\n             * @see [async.memoize]{@link module:Utils.memoize}\n             * @category Util\n             * @param {AsyncFunction} fn - the memoized function\n             * @returns {AsyncFunction} a function that calls the original unmemoized function\n             */\n\n\n            function unmemoize(fn) {\n              return function () {\n                return (fn.unmemoized || fn).apply(null, arguments);\n              };\n            }\n            /**\n             * Repeatedly call `iteratee`, while `test` returns `true`. Calls `callback` when\n             * stopped, or an error occurs.\n             *\n             * @name whilst\n             * @static\n             * @memberOf module:ControlFlow\n             * @method\n             * @category Control Flow\n             * @param {Function} test - synchronous truth test to perform before each\n             * execution of `iteratee`. Invoked with ().\n             * @param {AsyncFunction} iteratee - An async function which is called each time\n             * `test` passes. Invoked with (callback).\n             * @param {Function} [callback] - A callback which is called after the test\n             * function has failed and repeated execution of `iteratee` has stopped. `callback`\n             * will be passed an error and any arguments passed to the final `iteratee`'s\n             * callback. Invoked with (err, [results]);\n             * @returns undefined\n             * @example\n             *\n             * var count = 0;\n             * async.whilst(\n             *     function() { return count < 5; },\n             *     function(callback) {\n             *         count++;\n             *         setTimeout(function() {\n             *             callback(null, count);\n             *         }, 1000);\n             *     },\n             *     function (err, n) {\n             *         // 5 seconds have passed, n = 5\n             *     }\n             * );\n             */\n\n\n            function whilst(test, iteratee, callback) {\n              callback = onlyOnce(callback || noop);\n\n              var _iteratee = wrapAsync(iteratee);\n\n              if (!test()) return callback(null);\n\n              var next = function next(err\n              /*, ...args*/\n              ) {\n                if (err) return callback(err);\n                if (test()) return _iteratee(next);\n                var args = slice(arguments, 1);\n                callback.apply(null, [null].concat(args));\n              };\n\n              _iteratee(next);\n            }\n            /**\n             * Repeatedly call `iteratee` until `test` returns `true`. Calls `callback` when\n             * stopped, or an error occurs. `callback` will be passed an error and any\n             * arguments passed to the final `iteratee`'s callback.\n             *\n             * The inverse of [whilst]{@link module:ControlFlow.whilst}.\n             *\n             * @name until\n             * @static\n             * @memberOf module:ControlFlow\n             * @method\n             * @see [async.whilst]{@link module:ControlFlow.whilst}\n             * @category Control Flow\n             * @param {Function} test - synchronous truth test to perform before each\n             * execution of `iteratee`. Invoked with ().\n             * @param {AsyncFunction} iteratee - An async function which is called each time\n             * `test` fails. Invoked with (callback).\n             * @param {Function} [callback] - A callback which is called after the test\n             * function has passed and repeated execution of `iteratee` has stopped. `callback`\n             * will be passed an error and any arguments passed to the final `iteratee`'s\n             * callback. Invoked with (err, [results]);\n             */\n\n\n            function until(test, iteratee, callback) {\n              whilst(function () {\n                return !test.apply(this, arguments);\n              }, iteratee, callback);\n            }\n            /**\n             * Runs the `tasks` array of functions in series, each passing their results to\n             * the next in the array. However, if any of the `tasks` pass an error to their\n             * own callback, the next function is not executed, and the main `callback` is\n             * immediately called with the error.\n             *\n             * @name waterfall\n             * @static\n             * @memberOf module:ControlFlow\n             * @method\n             * @category Control Flow\n             * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}\n             * to run.\n             * Each function should complete with any number of `result` values.\n             * The `result` values will be passed as arguments, in order, to the next task.\n             * @param {Function} [callback] - An optional callback to run once all the\n             * functions have completed. This will be passed the results of the last task's\n             * callback. Invoked with (err, [results]).\n             * @returns undefined\n             * @example\n             *\n             * async.waterfall([\n             *     function(callback) {\n             *         callback(null, 'one', 'two');\n             *     },\n             *     function(arg1, arg2, callback) {\n             *         // arg1 now equals 'one' and arg2 now equals 'two'\n             *         callback(null, 'three');\n             *     },\n             *     function(arg1, callback) {\n             *         // arg1 now equals 'three'\n             *         callback(null, 'done');\n             *     }\n             * ], function (err, result) {\n             *     // result now equals 'done'\n             * });\n             *\n             * // Or, with named functions:\n             * async.waterfall([\n             *     myFirstFunction,\n             *     mySecondFunction,\n             *     myLastFunction,\n             * ], function (err, result) {\n             *     // result now equals 'done'\n             * });\n             * function myFirstFunction(callback) {\n             *     callback(null, 'one', 'two');\n             * }\n             * function mySecondFunction(arg1, arg2, callback) {\n             *     // arg1 now equals 'one' and arg2 now equals 'two'\n             *     callback(null, 'three');\n             * }\n             * function myLastFunction(arg1, callback) {\n             *     // arg1 now equals 'three'\n             *     callback(null, 'done');\n             * }\n             */\n\n\n            var waterfall = function waterfall(tasks, callback) {\n              callback = once(callback || noop);\n              if (!isArray(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));\n              if (!tasks.length) return callback();\n              var taskIndex = 0;\n\n              function nextTask(args) {\n                var task = wrapAsync(tasks[taskIndex++]);\n                args.push(onlyOnce(next));\n                task.apply(null, args);\n              }\n\n              function next(err\n              /*, ...args*/\n              ) {\n                if (err || taskIndex === tasks.length) {\n                  return callback.apply(null, arguments);\n                }\n\n                nextTask(slice(arguments, 1));\n              }\n\n              nextTask([]);\n            };\n            /**\n             * An \"async function\" in the context of Async is an asynchronous function with\n             * a variable number of parameters, with the final parameter being a callback.\n             * (`function (arg1, arg2, ..., callback) {}`)\n             * The final callback is of the form `callback(err, results...)`, which must be\n             * called once the function is completed.  The callback should be called with a\n             * Error as its first argument to signal that an error occurred.\n             * Otherwise, if no error occurred, it should be called with `null` as the first\n             * argument, and any additional `result` arguments that may apply, to signal\n             * successful completion.\n             * The callback must be called exactly once, ideally on a later tick of the\n             * JavaScript event loop.\n             *\n             * This type of function is also referred to as a \"Node-style async function\",\n             * or a \"continuation passing-style function\" (CPS). Most of the methods of this\n             * library are themselves CPS/Node-style async functions, or functions that\n             * return CPS/Node-style async functions.\n             *\n             * Wherever we accept a Node-style async function, we also directly accept an\n             * [ES2017 `async` function]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function}.\n             * In this case, the `async` function will not be passed a final callback\n             * argument, and any thrown error will be used as the `err` argument of the\n             * implicit callback, and the return value will be used as the `result` value.\n             * (i.e. a `rejected` of the returned Promise becomes the `err` callback\n             * argument, and a `resolved` value becomes the `result`.)\n             *\n             * Note, due to JavaScript limitations, we can only detect native `async`\n             * functions and not transpilied implementations.\n             * Your environment must have `async`/`await` support for this to work.\n             * (e.g. Node > v7.6, or a recent version of a modern browser).\n             * If you are using `async` functions through a transpiler (e.g. Babel), you\n             * must still wrap the function with [asyncify]{@link module:Utils.asyncify},\n             * because the `async function` will be compiled to an ordinary function that\n             * returns a promise.\n             *\n             * @typedef {Function} AsyncFunction\n             * @static\n             */\n\n            /**\n             * Async is a utility module which provides straight-forward, powerful functions\n             * for working with asynchronous JavaScript. Although originally designed for\n             * use with [Node.js](http://nodejs.org) and installable via\n             * `npm install --save async`, it can also be used directly in the browser.\n             * @module async\n             * @see AsyncFunction\n             */\n\n            /**\n             * A collection of `async` functions for manipulating collections, such as\n             * arrays and objects.\n             * @module Collections\n             */\n\n            /**\n             * A collection of `async` functions for controlling the flow through a script.\n             * @module ControlFlow\n             */\n\n            /**\n             * A collection of `async` utility functions.\n             * @module Utils\n             */\n\n\n            var index = {\n              apply: apply,\n              applyEach: applyEach,\n              applyEachSeries: applyEachSeries,\n              asyncify: asyncify,\n              auto: auto,\n              autoInject: autoInject,\n              cargo: cargo,\n              compose: compose,\n              concat: concat,\n              concatLimit: concatLimit,\n              concatSeries: concatSeries,\n              constant: constant,\n              detect: detect,\n              detectLimit: detectLimit,\n              detectSeries: detectSeries,\n              dir: dir,\n              doDuring: doDuring,\n              doUntil: doUntil,\n              doWhilst: doWhilst,\n              during: during,\n              each: eachLimit,\n              eachLimit: eachLimit$1,\n              eachOf: eachOf,\n              eachOfLimit: eachOfLimit,\n              eachOfSeries: eachOfSeries,\n              eachSeries: eachSeries,\n              ensureAsync: ensureAsync,\n              every: every,\n              everyLimit: everyLimit,\n              everySeries: everySeries,\n              filter: filter,\n              filterLimit: filterLimit,\n              filterSeries: filterSeries,\n              forever: forever,\n              groupBy: groupBy,\n              groupByLimit: groupByLimit,\n              groupBySeries: groupBySeries,\n              log: log,\n              map: map,\n              mapLimit: mapLimit,\n              mapSeries: mapSeries,\n              mapValues: mapValues,\n              mapValuesLimit: mapValuesLimit,\n              mapValuesSeries: mapValuesSeries,\n              memoize: memoize,\n              nextTick: nextTick,\n              parallel: parallelLimit,\n              parallelLimit: parallelLimit$1,\n              priorityQueue: priorityQueue,\n              queue: queue$1,\n              race: race,\n              reduce: reduce,\n              reduceRight: reduceRight,\n              reflect: reflect,\n              reflectAll: reflectAll,\n              reject: reject,\n              rejectLimit: rejectLimit,\n              rejectSeries: rejectSeries,\n              retry: retry,\n              retryable: retryable,\n              seq: seq,\n              series: series,\n              setImmediate: setImmediate$1,\n              some: some,\n              someLimit: someLimit,\n              someSeries: someSeries,\n              sortBy: sortBy,\n              timeout: timeout,\n              times: times,\n              timesLimit: timeLimit,\n              timesSeries: timesSeries,\n              transform: transform,\n              tryEach: tryEach,\n              unmemoize: unmemoize,\n              until: until,\n              waterfall: waterfall,\n              whilst: whilst,\n              // aliases\n              all: every,\n              allLimit: everyLimit,\n              allSeries: everySeries,\n              any: some,\n              anyLimit: someLimit,\n              anySeries: someSeries,\n              find: detect,\n              findLimit: detectLimit,\n              findSeries: detectSeries,\n              forEach: eachLimit,\n              forEachSeries: eachSeries,\n              forEachLimit: eachLimit$1,\n              forEachOf: eachOf,\n              forEachOfSeries: eachOfSeries,\n              forEachOfLimit: eachOfLimit,\n              inject: reduce,\n              foldl: reduce,\n              foldr: reduceRight,\n              select: filter,\n              selectLimit: filterLimit,\n              selectSeries: filterSeries,\n              wrapSync: asyncify\n            };\n            exports['default'] = index;\n            exports.apply = apply;\n            exports.applyEach = applyEach;\n            exports.applyEachSeries = applyEachSeries;\n            exports.asyncify = asyncify;\n            exports.auto = auto;\n            exports.autoInject = autoInject;\n            exports.cargo = cargo;\n            exports.compose = compose;\n            exports.concat = concat;\n            exports.concatLimit = concatLimit;\n            exports.concatSeries = concatSeries;\n            exports.constant = constant;\n            exports.detect = detect;\n            exports.detectLimit = detectLimit;\n            exports.detectSeries = detectSeries;\n            exports.dir = dir;\n            exports.doDuring = doDuring;\n            exports.doUntil = doUntil;\n            exports.doWhilst = doWhilst;\n            exports.during = during;\n            exports.each = eachLimit;\n            exports.eachLimit = eachLimit$1;\n            exports.eachOf = eachOf;\n            exports.eachOfLimit = eachOfLimit;\n            exports.eachOfSeries = eachOfSeries;\n            exports.eachSeries = eachSeries;\n            exports.ensureAsync = ensureAsync;\n            exports.every = every;\n            exports.everyLimit = everyLimit;\n            exports.everySeries = everySeries;\n            exports.filter = filter;\n            exports.filterLimit = filterLimit;\n            exports.filterSeries = filterSeries;\n            exports.forever = forever;\n            exports.groupBy = groupBy;\n            exports.groupByLimit = groupByLimit;\n            exports.groupBySeries = groupBySeries;\n            exports.log = log;\n            exports.map = map;\n            exports.mapLimit = mapLimit;\n            exports.mapSeries = mapSeries;\n            exports.mapValues = mapValues;\n            exports.mapValuesLimit = mapValuesLimit;\n            exports.mapValuesSeries = mapValuesSeries;\n            exports.memoize = memoize;\n            exports.nextTick = nextTick;\n            exports.parallel = parallelLimit;\n            exports.parallelLimit = parallelLimit$1;\n            exports.priorityQueue = priorityQueue;\n            exports.queue = queue$1;\n            exports.race = race;\n            exports.reduce = reduce;\n            exports.reduceRight = reduceRight;\n            exports.reflect = reflect;\n            exports.reflectAll = reflectAll;\n            exports.reject = reject;\n            exports.rejectLimit = rejectLimit;\n            exports.rejectSeries = rejectSeries;\n            exports.retry = retry;\n            exports.retryable = retryable;\n            exports.seq = seq;\n            exports.series = series;\n            exports.setImmediate = setImmediate$1;\n            exports.some = some;\n            exports.someLimit = someLimit;\n            exports.someSeries = someSeries;\n            exports.sortBy = sortBy;\n            exports.timeout = timeout;\n            exports.times = times;\n            exports.timesLimit = timeLimit;\n            exports.timesSeries = timesSeries;\n            exports.transform = transform;\n            exports.tryEach = tryEach;\n            exports.unmemoize = unmemoize;\n            exports.until = until;\n            exports.waterfall = waterfall;\n            exports.whilst = whilst;\n            exports.all = every;\n            exports.allLimit = everyLimit;\n            exports.allSeries = everySeries;\n            exports.any = some;\n            exports.anyLimit = someLimit;\n            exports.anySeries = someSeries;\n            exports.find = detect;\n            exports.findLimit = detectLimit;\n            exports.findSeries = detectSeries;\n            exports.forEach = eachLimit;\n            exports.forEachSeries = eachSeries;\n            exports.forEachLimit = eachLimit$1;\n            exports.forEachOf = eachOf;\n            exports.forEachOfSeries = eachOfSeries;\n            exports.forEachOfLimit = eachOfLimit;\n            exports.inject = reduce;\n            exports.foldl = reduce;\n            exports.foldr = reduceRight;\n            exports.select = filter;\n            exports.selectLimit = filterLimit;\n            exports.selectSeries = filterSeries;\n            exports.wrapSync = asyncify;\n            Object.defineProperty(exports, '__esModule', {\n              value: true\n            });\n          });\n          /* WEBPACK VAR INJECTION */\n\n        }).call(this, __webpack_require__(\n        /*! ./../../timers-browserify/main.js */\n        \"./node_modules/timers-browserify/main.js\").setImmediate, __webpack_require__(\n        /*! ./../../process/browser.js */\n        \"./node_modules/process/browser.js\"), __webpack_require__(\n        /*! ./../../webpack/buildin/global.js */\n        \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(\n        /*! ./../../webpack/buildin/module.js */\n        \"./node_modules/webpack/buildin/module.js\")(module));\n        /***/\n      },\n\n      /***/\n      \"./node_modules/base64-js/index.js\":\n      /*!*****************************************!*\\\n        !*** ./node_modules/base64-js/index.js ***!\n        \\*****************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesBase64JsIndexJs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        exports.byteLength = byteLength;\n        exports.toByteArray = toByteArray;\n        exports.fromByteArray = fromByteArray;\n        var lookup = [];\n        var revLookup = [];\n        var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\n        var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n        for (var i = 0, len = code.length; i < len; ++i) {\n          lookup[i] = code[i];\n          revLookup[code.charCodeAt(i)] = i;\n        } // Support decoding URL-safe base64 strings, as Node.js does.\n        // See: https://en.wikipedia.org/wiki/Base64#URL_applications\n\n\n        revLookup['-'.charCodeAt(0)] = 62;\n        revLookup['_'.charCodeAt(0)] = 63;\n\n        function getLens(b64) {\n          var len = b64.length;\n\n          if (len % 4 > 0) {\n            throw new Error('Invalid string. Length must be a multiple of 4');\n          } // Trim off extra bytes after placeholder bytes are found\n          // See: https://github.com/beatgammit/base64-js/issues/42\n\n\n          var validLen = b64.indexOf('=');\n          if (validLen === -1) validLen = len;\n          var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;\n          return [validLen, placeHoldersLen];\n        } // base64 is 4/3 + up to two characters of the original data\n\n\n        function byteLength(b64) {\n          var lens = getLens(b64);\n          var validLen = lens[0];\n          var placeHoldersLen = lens[1];\n          return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n        }\n\n        function _byteLength(b64, validLen, placeHoldersLen) {\n          return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n        }\n\n        function toByteArray(b64) {\n          var tmp;\n          var lens = getLens(b64);\n          var validLen = lens[0];\n          var placeHoldersLen = lens[1];\n          var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));\n          var curByte = 0; // if there are placeholders, only get up to the last complete 4 chars\n\n          var len = placeHoldersLen > 0 ? validLen - 4 : validLen;\n          var i;\n\n          for (i = 0; i < len; i += 4) {\n            tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];\n            arr[curByte++] = tmp >> 16 & 0xFF;\n            arr[curByte++] = tmp >> 8 & 0xFF;\n            arr[curByte++] = tmp & 0xFF;\n          }\n\n          if (placeHoldersLen === 2) {\n            tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;\n            arr[curByte++] = tmp & 0xFF;\n          }\n\n          if (placeHoldersLen === 1) {\n            tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;\n            arr[curByte++] = tmp >> 8 & 0xFF;\n            arr[curByte++] = tmp & 0xFF;\n          }\n\n          return arr;\n        }\n\n        function tripletToBase64(num) {\n          return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];\n        }\n\n        function encodeChunk(uint8, start, end) {\n          var tmp;\n          var output = [];\n\n          for (var i = start; i < end; i += 3) {\n            tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);\n            output.push(tripletToBase64(tmp));\n          }\n\n          return output.join('');\n        }\n\n        function fromByteArray(uint8) {\n          var tmp;\n          var len = uint8.length;\n          var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\n\n          var parts = [];\n          var maxChunkLength = 16383; // must be multiple of 3\n          // go through the array every three bytes, we'll deal with trailing stuff later\n\n          for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n            parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));\n          } // pad the end with zeros, but make sure to not forget the extra bytes\n\n\n          if (extraBytes === 1) {\n            tmp = uint8[len - 1];\n            parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');\n          } else if (extraBytes === 2) {\n            tmp = (uint8[len - 2] << 8) + uint8[len - 1];\n            parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');\n          }\n\n          return parts.join('');\n        }\n        /***/\n\n      },\n\n      /***/\n      \"./node_modules/debug/src/browser.js\":\n      /*!*******************************************!*\\\n        !*** ./node_modules/debug/src/browser.js ***!\n        \\*******************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesDebugSrcBrowserJs(module, exports, __webpack_require__) {\n        /* WEBPACK VAR INJECTION */\n        (function (process) {\n          /* eslint-env browser */\n\n          /**\n           * This is the web browser implementation of `debug()`.\n           */\n          exports.formatArgs = formatArgs;\n          exports.save = save;\n          exports.load = load;\n          exports.useColors = useColors;\n          exports.storage = localstorage();\n\n          exports.destroy = function () {\n            var warned = false;\n            return function () {\n              if (!warned) {\n                warned = true;\n                console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n              }\n            };\n          }();\n          /**\n           * Colors.\n           */\n\n\n          exports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];\n          /**\n           * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n           * and the Firebug extension (any Firefox version) are known\n           * to support \"%c\" CSS customizations.\n           *\n           * TODO: add a `localStorage` variable to explicitly enable/disable colors\n           */\n          // eslint-disable-next-line complexity\n\n          function useColors() {\n            // NB: In an Electron preload script, document will be defined but not fully\n            // initialized. Since we know we're in Chrome, we'll just detect this case\n            // explicitly\n            if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n              return true;\n            } // Internet Explorer and Edge do not support colors.\n\n\n            if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n              return false;\n            } // Is webkit? http://stackoverflow.com/a/16459606/376773\n            // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\n\n            return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773\n            typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?\n            // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n            typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker\n            typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/);\n          }\n          /**\n           * Colorize log arguments if enabled.\n           *\n           * @api public\n           */\n\n\n          function formatArgs(args) {\n            args[0] = (this.useColors ? '%c' : '') + this.namespace + (this.useColors ? ' %c' : ' ') + args[0] + (this.useColors ? '%c ' : ' ') + '+' + module.exports.humanize(this.diff);\n\n            if (!this.useColors) {\n              return;\n            }\n\n            var c = 'color: ' + this.color;\n            args.splice(1, 0, c, 'color: inherit'); // The final \"%c\" is somewhat tricky, because there could be other\n            // arguments passed either before or after the %c, so we need to\n            // figure out the correct index to insert the CSS into\n\n            var index = 0;\n            var lastC = 0;\n            args[0].replace(/%[a-zA-Z%]/g, function (match) {\n              if (match === '%%') {\n                return;\n              }\n\n              index++;\n\n              if (match === '%c') {\n                // We only are interested in the *last* %c\n                // (the user may have provided their own)\n                lastC = index;\n              }\n            });\n            args.splice(lastC, 0, c);\n          }\n          /**\n           * Invokes `console.debug()` when available.\n           * No-op when `console.debug` is not a \"function\".\n           * If `console.debug` is not available, falls back\n           * to `console.log`.\n           *\n           * @api public\n           */\n\n\n          exports.log = console.debug || console.log || function () {};\n          /**\n           * Save `namespaces`.\n           *\n           * @param {String} namespaces\n           * @api private\n           */\n\n\n          function save(namespaces) {\n            try {\n              if (namespaces) {\n                exports.storage.setItem('debug', namespaces);\n              } else {\n                exports.storage.removeItem('debug');\n              }\n            } catch (error) {// Swallow\n              // XXX (@Qix-) should we be logging these?\n            }\n          }\n          /**\n           * Load `namespaces`.\n           *\n           * @return {String} returns the previously persisted debug modes\n           * @api private\n           */\n\n\n          function load() {\n            var r;\n\n            try {\n              r = exports.storage.getItem('debug');\n            } catch (error) {// Swallow\n              // XXX (@Qix-) should we be logging these?\n            } // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\n\n            if (!r && typeof process !== 'undefined' && 'env' in process) {\n              r = process.env.DEBUG;\n            }\n\n            return r;\n          }\n          /**\n           * Localstorage attempts to return the localstorage.\n           *\n           * This is necessary because safari throws\n           * when a user disables cookies/localstorage\n           * and you attempt to access it.\n           *\n           * @return {LocalStorage}\n           * @api private\n           */\n\n\n          function localstorage() {\n            try {\n              // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n              // The Browser also has localStorage in the global context.\n              return localStorage;\n            } catch (error) {// Swallow\n              // XXX (@Qix-) should we be logging these?\n            }\n          }\n\n          module.exports = __webpack_require__(\n          /*! ./common */\n          \"./node_modules/debug/src/common.js\")(exports);\n          var formatters = module.exports.formatters;\n          /**\n           * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n           */\n\n          formatters.j = function (v) {\n            try {\n              return JSON.stringify(v);\n            } catch (error) {\n              return '[UnexpectedJSONParseError]: ' + error.message;\n            }\n          };\n          /* WEBPACK VAR INJECTION */\n\n        }).call(this, __webpack_require__(\n        /*! ./../../process/browser.js */\n        \"./node_modules/process/browser.js\"));\n        /***/\n      },\n\n      /***/\n      \"./node_modules/debug/src/common.js\":\n      /*!******************************************!*\\\n        !*** ./node_modules/debug/src/common.js ***!\n        \\******************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesDebugSrcCommonJs(module, exports, __webpack_require__) {\n        /**\n         * This is the common logic for both the Node.js and web browser\n         * implementations of `debug()`.\n         */\n        function setup(env) {\n          createDebug.debug = createDebug;\n          createDebug.default = createDebug;\n          createDebug.coerce = coerce;\n          createDebug.disable = disable;\n          createDebug.enable = enable;\n          createDebug.enabled = enabled;\n          createDebug.humanize = __webpack_require__(\n          /*! ms */\n          \"./node_modules/ms/index.js\");\n          createDebug.destroy = destroy;\n          Object.keys(env).forEach(function (key) {\n            createDebug[key] = env[key];\n          });\n          /**\n          * The currently active debug mode names, and names to skip.\n          */\n\n          createDebug.names = [];\n          createDebug.skips = [];\n          /**\n          * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n          *\n          * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n          */\n\n          createDebug.formatters = {};\n          /**\n          * Selects a color for a debug namespace\n          * @param {String} namespace The namespace string for the for the debug instance to be colored\n          * @return {Number|String} An ANSI color code for the given namespace\n          * @api private\n          */\n\n          function selectColor(namespace) {\n            var hash = 0;\n\n            for (var i = 0; i < namespace.length; i++) {\n              hash = (hash << 5) - hash + namespace.charCodeAt(i);\n              hash |= 0; // Convert to 32bit integer\n            }\n\n            return createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n          }\n\n          createDebug.selectColor = selectColor;\n          /**\n          * Create a debugger with the given `namespace`.\n          *\n          * @param {String} namespace\n          * @return {Function}\n          * @api public\n          */\n\n          function createDebug(namespace) {\n            var prevTime;\n            var enableOverride = null;\n\n            function debug() {\n              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n              }\n\n              // Disabled?\n              if (!debug.enabled) {\n                return;\n              }\n\n              var self = debug; // Set `diff` timestamp\n\n              var curr = Number(new Date());\n              var ms = curr - (prevTime || curr);\n              self.diff = ms;\n              self.prev = prevTime;\n              self.curr = curr;\n              prevTime = curr;\n              args[0] = createDebug.coerce(args[0]);\n\n              if (typeof args[0] !== 'string') {\n                // Anything else let's inspect with %O\n                args.unshift('%O');\n              } // Apply any `formatters` transformations\n\n\n              var index = 0;\n              args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {\n                // If we encounter an escaped % then don't increase the array index\n                if (match === '%%') {\n                  return '%';\n                }\n\n                index++;\n                var formatter = createDebug.formatters[format];\n\n                if (typeof formatter === 'function') {\n                  var val = args[index];\n                  match = formatter.call(self, val); // Now we need to remove `args[index]` since it's inlined in the `format`\n\n                  args.splice(index, 1);\n                  index--;\n                }\n\n                return match;\n              }); // Apply env-specific formatting (colors, etc.)\n\n              createDebug.formatArgs.call(self, args);\n              var logFn = self.log || createDebug.log;\n              logFn.apply(self, args);\n            }\n\n            debug.namespace = namespace;\n            debug.useColors = createDebug.useColors();\n            debug.color = createDebug.selectColor(namespace);\n            debug.extend = extend;\n            debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\n\n            Object.defineProperty(debug, 'enabled', {\n              enumerable: true,\n              configurable: false,\n              get: function get() {\n                return enableOverride === null ? createDebug.enabled(namespace) : enableOverride;\n              },\n              set: function set(v) {\n                enableOverride = v;\n              }\n            }); // Env-specific initialization logic for debug instances\n\n            if (typeof createDebug.init === 'function') {\n              createDebug.init(debug);\n            }\n\n            return debug;\n          }\n\n          function extend(namespace, delimiter) {\n            var newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n            newDebug.log = this.log;\n            return newDebug;\n          }\n          /**\n          * Enables a debug mode by namespaces. This can include modes\n          * separated by a colon and wildcards.\n          *\n          * @param {String} namespaces\n          * @api public\n          */\n\n\n          function enable(namespaces) {\n            createDebug.save(namespaces);\n            createDebug.names = [];\n            createDebug.skips = [];\n            var i;\n            var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n            var len = split.length;\n\n            for (i = 0; i < len; i++) {\n              if (!split[i]) {\n                // ignore empty strings\n                continue;\n              }\n\n              namespaces = split[i].replace(/\\*/g, '.*?');\n\n              if (namespaces[0] === '-') {\n                createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n              } else {\n                createDebug.names.push(new RegExp('^' + namespaces + '$'));\n              }\n            }\n          }\n          /**\n          * Disable debug output.\n          *\n          * @return {String} namespaces\n          * @api public\n          */\n\n\n          function disable() {\n            var namespaces = [].concat(_toConsumableArray(createDebug.names.map(toNamespace)), _toConsumableArray(createDebug.skips.map(toNamespace).map(function (namespace) {\n              return '-' + namespace;\n            }))).join(',');\n            createDebug.enable('');\n            return namespaces;\n          }\n          /**\n          * Returns true if the given mode name is enabled, false otherwise.\n          *\n          * @param {String} name\n          * @return {Boolean}\n          * @api public\n          */\n\n\n          function enabled(name) {\n            if (name[name.length - 1] === '*') {\n              return true;\n            }\n\n            var i;\n            var len;\n\n            for (i = 0, len = createDebug.skips.length; i < len; i++) {\n              if (createDebug.skips[i].test(name)) {\n                return false;\n              }\n            }\n\n            for (i = 0, len = createDebug.names.length; i < len; i++) {\n              if (createDebug.names[i].test(name)) {\n                return true;\n              }\n            }\n\n            return false;\n          }\n          /**\n          * Convert regexp to namespace\n          *\n          * @param {RegExp} regxep\n          * @return {String} namespace\n          * @api private\n          */\n\n\n          function toNamespace(regexp) {\n            return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\\.\\*\\?$/, '*');\n          }\n          /**\n          * Coerce `val`.\n          *\n          * @param {Mixed} val\n          * @return {Mixed}\n          * @api private\n          */\n\n\n          function coerce(val) {\n            if (val instanceof Error) {\n              return val.stack || val.message;\n            }\n\n            return val;\n          }\n          /**\n          * XXX DO NOT USE. This is a temporary stub function.\n          * XXX It WILL be removed in the next major release.\n          */\n\n\n          function destroy() {\n            console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n          }\n\n          createDebug.enable(createDebug.load());\n          return createDebug;\n        }\n\n        module.exports = setup;\n        /***/\n      },\n\n      /***/\n      \"./node_modules/ethereumjs-block/from-rpc.js\":\n      /*!***************************************************!*\\\n        !*** ./node_modules/ethereumjs-block/from-rpc.js ***!\n        \\***************************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesEthereumjsBlockFromRpcJs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        var Transaction = __webpack_require__(\n        /*! ethereumjs-tx */\n        \"ethereumjs-tx\");\n\n        var ethUtil = __webpack_require__(\n        /*! ethereumjs-util */\n        \"ethereumjs-util\");\n\n        var Block = __webpack_require__(\n        /*! ./ */\n        \"./node_modules/ethereumjs-block/index.js\");\n\n        var blockHeaderFromRpc = __webpack_require__(\n        /*! ./header-from-rpc */\n        \"./node_modules/ethereumjs-block/header-from-rpc.js\");\n\n        module.exports = blockFromRpc;\n        /**\n         * Creates a new block object from Ethereum JSON RPC.\n         * @param {Object} blockParams - Ethereum JSON RPC of block (eth_getBlockByNumber)\n         * @param {Array.<Object>} Optional list of Ethereum JSON RPC of uncles (eth_getUncleByBlockHashAndIndex)\n         */\n\n        function blockFromRpc(blockParams, uncles) {\n          uncles = uncles || [];\n          var block = new Block({\n            transactions: [],\n            uncleHeaders: []\n          });\n          block.header = blockHeaderFromRpc(blockParams);\n          block.transactions = (blockParams.transactions || []).map(function (_txParams) {\n            var txParams = normalizeTxParams(_txParams); // override from address\n\n            var fromAddress = ethUtil.toBuffer(txParams.from);\n            delete txParams.from;\n            var tx = new Transaction(txParams);\n            tx._from = fromAddress;\n\n            tx.getSenderAddress = function () {\n              return fromAddress;\n            }; // override hash\n\n\n            var txHash = ethUtil.toBuffer(txParams.hash);\n\n            tx.hash = function () {\n              return txHash;\n            };\n\n            return tx;\n          });\n          block.uncleHeaders = uncles.map(function (uncleParams) {\n            return blockHeaderFromRpc(uncleParams);\n          });\n          return block;\n        }\n\n        function normalizeTxParams(_txParams) {\n          var txParams = Object.assign({}, _txParams); // hot fix for https://github.com/ethereumjs/ethereumjs-util/issues/40\n\n          txParams.gasLimit = txParams.gasLimit === undefined ? txParams.gas : txParams.gasLimit;\n          txParams.data = txParams.data === undefined ? txParams.input : txParams.data; // strict byte length checking\n\n          txParams.to = txParams.to ? ethUtil.setLengthLeft(ethUtil.toBuffer(txParams.to), 20) : null; // v as raw signature value {0,1}\n\n          txParams.v = txParams.v < 27 ? txParams.v + 27 : txParams.v;\n          return txParams;\n        }\n        /***/\n\n      },\n\n      /***/\n      \"./node_modules/ethereumjs-block/header-from-rpc.js\":\n      /*!**********************************************************!*\\\n        !*** ./node_modules/ethereumjs-block/header-from-rpc.js ***!\n        \\**********************************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesEthereumjsBlockHeaderFromRpcJs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        var BlockHeader = __webpack_require__(\n        /*! ./header */\n        \"./node_modules/ethereumjs-block/header.js\");\n\n        var ethUtil = __webpack_require__(\n        /*! ethereumjs-util */\n        \"ethereumjs-util\");\n\n        module.exports = blockHeaderFromRpc;\n        /**\n         * Creates a new block header object from Ethereum JSON RPC.\n         * @param {Object} blockParams - Ethereum JSON RPC of block (eth_getBlockByNumber)\n         */\n\n        function blockHeaderFromRpc(blockParams) {\n          var blockHeader = new BlockHeader({\n            parentHash: blockParams.parentHash,\n            uncleHash: blockParams.sha3Uncles,\n            coinbase: blockParams.miner,\n            stateRoot: blockParams.stateRoot,\n            transactionsTrie: blockParams.transactionsRoot,\n            receiptTrie: blockParams.receiptRoot || blockParams.receiptsRoot || ethUtil.SHA3_NULL,\n            bloom: blockParams.logsBloom,\n            difficulty: blockParams.difficulty,\n            number: blockParams.number,\n            gasLimit: blockParams.gasLimit,\n            gasUsed: blockParams.gasUsed,\n            timestamp: blockParams.timestamp,\n            extraData: blockParams.extraData,\n            mixHash: blockParams.mixHash,\n            nonce: blockParams.nonce\n          }); // override hash incase something was missing\n\n          blockHeader.hash = function () {\n            return ethUtil.toBuffer(blockParams.hash);\n          };\n\n          return blockHeader;\n        }\n        /***/\n\n      },\n\n      /***/\n      \"./node_modules/ethereumjs-block/header.js\":\n      /*!*************************************************!*\\\n        !*** ./node_modules/ethereumjs-block/header.js ***!\n        \\*************************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesEthereumjsBlockHeaderJs(module, exports, __webpack_require__) {\n        /* WEBPACK VAR INJECTION */\n        (function (Buffer) {\n          var Common = __webpack_require__(\n          /*! ethereumjs-common */\n          \"./node_modules/ethereumjs-common/dist/index.js\").default;\n\n          var utils = __webpack_require__(\n          /*! ethereumjs-util */\n          \"ethereumjs-util\");\n\n          var BN = utils.BN;\n          /**\n           * An object that repersents the block header\n           * @constructor\n           * @param {Array} data raw data, deserialized\n           * @param {Array} opts Options\n           * @param {String|Number} opts.chain The chain for the block header [default: 'mainnet']\n           * @param {String} opts.hardfork Hardfork for the block header [default: null, block number-based behaviour]\n           * @param {Object} opts.common Alternatively pass a Common instance instead of setting chain/hardfork directly\n           * @prop {Buffer} parentHash the blocks' parent's hash\n           * @prop {Buffer} uncleHash sha3(rlp_encode(uncle_list))\n           * @prop {Buffer} coinbase the miner address\n           * @prop {Buffer} stateRoot The root of a Merkle Patricia tree\n           * @prop {Buffer} transactionTrie the root of a Trie containing the transactions\n           * @prop {Buffer} receiptTrie the root of a Trie containing the transaction Reciept\n           * @prop {Buffer} bloom\n           * @prop {Buffer} difficulty\n           * @prop {Buffer} number the block's height\n           * @prop {Buffer} gasLimit\n           * @prop {Buffer} gasUsed\n           * @prop {Buffer} timestamp\n           * @prop {Buffer} extraData\n           * @prop {Array.<Buffer>} raw an array of buffers containing the raw blocks.\n           */\n\n          var BlockHeader = module.exports = function (data, opts) {\n            opts = opts || {};\n\n            if (opts.common) {\n              if (opts.chain) {\n                throw new Error('Instantiation with both opts.common and opts.chain parameter not allowed!');\n              }\n\n              this._common = opts.common;\n            } else {\n              var chain = opts.chain ? opts.chain : 'mainnet';\n              var hardfork = opts.hardfork ? opts.hardfork : null;\n              this._common = new Common(chain, hardfork);\n            }\n\n            var fields = [{\n              name: 'parentHash',\n              length: 32,\n              default: utils.zeros(32)\n            }, {\n              name: 'uncleHash',\n              default: utils.SHA3_RLP_ARRAY\n            }, {\n              name: 'coinbase',\n              length: 20,\n              default: utils.zeros(20)\n            }, {\n              name: 'stateRoot',\n              length: 32,\n              default: utils.zeros(32)\n            }, {\n              name: 'transactionsTrie',\n              length: 32,\n              default: utils.SHA3_RLP\n            }, {\n              name: 'receiptTrie',\n              length: 32,\n              default: utils.SHA3_RLP\n            }, {\n              name: 'bloom',\n              default: utils.zeros(256)\n            }, {\n              name: 'difficulty',\n              default: Buffer.from([])\n            }, {\n              name: 'number',\n              // TODO: params.homeSteadForkNumber.v left for legacy reasons, replace on future release\n              default: utils.intToBuffer(1150000)\n            }, {\n              name: 'gasLimit',\n              default: Buffer.from('ffffffffffffff', 'hex')\n            }, {\n              name: 'gasUsed',\n              empty: true,\n              default: Buffer.from([])\n            }, {\n              name: 'timestamp',\n              default: Buffer.from([])\n            }, {\n              name: 'extraData',\n              allowZero: true,\n              empty: true,\n              default: Buffer.from([])\n            }, {\n              name: 'mixHash',\n              default: utils.zeros(32) // length: 32\n\n            }, {\n              name: 'nonce',\n              default: utils.zeros(8) // sha3(42)\n\n            }];\n            utils.defineProperties(this, fields, data);\n          };\n          /**\n           * Returns the canoncical difficulty of the block\n           * @method canonicalDifficulty\n           * @param {Block} parentBlock the parent `Block` of the this header\n           * @return {BN}\n           */\n\n\n          BlockHeader.prototype.canonicalDifficulty = function (parentBlock) {\n            var hardfork = this._common.hardfork() || this._common.activeHardfork(utils.bufferToInt(this.number));\n\n            var blockTs = new BN(this.timestamp);\n            var parentTs = new BN(parentBlock.header.timestamp);\n            var parentDif = new BN(parentBlock.header.difficulty);\n            var minimumDifficulty = new BN(this._common.param('pow', 'minimumDifficulty', hardfork));\n            var offset = parentDif.div(new BN(this._common.param('pow', 'difficultyBoundDivisor', hardfork)));\n            var num = new BN(this.number);\n            var a;\n            var cutoff;\n            var dif;\n\n            if (this._common.hardforkGteHardfork(hardfork, 'byzantium')) {\n              // max((2 if len(parent.uncles) else 1) - ((timestamp - parent.timestamp) // 9), -99) (EIP100)\n              var uncleAddend = parentBlock.header.uncleHash.equals(utils.SHA3_RLP_ARRAY) ? 1 : 2;\n              a = blockTs.sub(parentTs).idivn(9).ineg().iaddn(uncleAddend);\n              cutoff = new BN(-99); // MAX(cutoff, a)\n\n              if (cutoff.cmp(a) === 1) {\n                a = cutoff;\n              }\n\n              dif = parentDif.add(offset.mul(a));\n            }\n\n            if (this._common.hardforkGteHardfork(hardfork, 'constantinople')) {\n              // Constantinople difficulty bomb delay (EIP1234)\n              num.isubn(5000000);\n\n              if (num.ltn(0)) {\n                num = new BN(0);\n              }\n            } else if (this._common.hardforkGteHardfork(hardfork, 'byzantium')) {\n              // Byzantium difficulty bomb delay (EIP649)\n              num.isubn(3000000);\n\n              if (num.ltn(0)) {\n                num = new BN(0);\n              }\n            } else if (this._common.hardforkGteHardfork(hardfork, 'homestead')) {\n              // 1 - (block_timestamp - parent_timestamp) // 10\n              a = blockTs.sub(parentTs).idivn(10).ineg().iaddn(1);\n              cutoff = new BN(-99); // MAX(cutoff, a)\n\n              if (cutoff.cmp(a) === 1) {\n                a = cutoff;\n              }\n\n              dif = parentDif.add(offset.mul(a));\n            } else {\n              // pre-homestead\n              if (parentTs.addn(this._common.param('pow', 'durationLimit', hardfork)).cmp(blockTs) === 1) {\n                dif = offset.add(parentDif);\n              } else {\n                dif = parentDif.sub(offset);\n              }\n            }\n\n            var exp = num.idivn(100000).isubn(2);\n\n            if (!exp.isNeg()) {\n              dif.iadd(new BN(2).pow(exp));\n            }\n\n            if (dif.cmp(minimumDifficulty) === -1) {\n              dif = minimumDifficulty;\n            }\n\n            return dif;\n          };\n          /**\n           * checks that the block's `difficuly` matches the canonical difficulty\n           * @method validateDifficulty\n           * @param {Block} parentBlock this block's parent\n           * @return {Boolean}\n           */\n\n\n          BlockHeader.prototype.validateDifficulty = function (parentBlock) {\n            var dif = this.canonicalDifficulty(parentBlock);\n            return dif.cmp(new BN(this.difficulty)) === 0;\n          };\n          /**\n           * Validates the gasLimit\n           * @method validateGasLimit\n           * @param {Block} parentBlock this block's parent\n           * @returns {Boolean}\n           */\n\n\n          BlockHeader.prototype.validateGasLimit = function (parentBlock) {\n            var pGasLimit = new BN(parentBlock.header.gasLimit);\n            var gasLimit = new BN(this.gasLimit);\n            var hardfork = this._common.hardfork() ? this._common.hardfork() : this._common.activeHardfork(this.number);\n            var a = pGasLimit.div(new BN(this._common.param('gasConfig', 'gasLimitBoundDivisor', hardfork)));\n            var maxGasLimit = pGasLimit.add(a);\n            var minGasLimit = pGasLimit.sub(a);\n            return gasLimit.lt(maxGasLimit) && gasLimit.gt(minGasLimit) && gasLimit.gte(this._common.param('gasConfig', 'minGasLimit', hardfork));\n          };\n          /**\n           * Validates the entire block header\n           * @method validate\n           * @param {Blockchain} blockChain the blockchain that this block is validating against\n           * @param {Bignum} [height] if this is an uncle header, this is the height of the block that is including it\n           * @param {Function} cb the callback function. The callback is given an `error` if the block is invalid\n           */\n\n\n          BlockHeader.prototype.validate = function (blockchain, height, cb) {\n            var self = this;\n\n            if (arguments.length === 2) {\n              cb = height;\n              height = false;\n            }\n\n            if (this.isGenesis()) {\n              return cb();\n            } // find the blocks parent\n\n\n            blockchain.getBlock(self.parentHash, function (err, parentBlock) {\n              if (err) {\n                return cb('could not find parent block');\n              }\n\n              self.parentBlock = parentBlock;\n              var number = new BN(self.number);\n\n              if (number.cmp(new BN(parentBlock.header.number).iaddn(1)) !== 0) {\n                return cb('invalid number');\n              }\n\n              if (height) {\n                var dif = height.sub(new BN(parentBlock.header.number));\n\n                if (!(dif.cmpn(8) === -1 && dif.cmpn(1) === 1)) {\n                  return cb('uncle block has a parent that is too old or to young');\n                }\n              }\n\n              if (!self.validateDifficulty(parentBlock)) {\n                return cb('invalid Difficulty');\n              }\n\n              if (!self.validateGasLimit(parentBlock)) {\n                return cb('invalid gas limit');\n              }\n\n              if (utils.bufferToInt(parentBlock.header.number) + 1 !== utils.bufferToInt(self.number)) {\n                return cb('invalid heigth');\n              }\n\n              if (utils.bufferToInt(self.timestamp) <= utils.bufferToInt(parentBlock.header.timestamp)) {\n                return cb('invalid timestamp');\n              }\n\n              var hardfork = self._common.hardfork() ? self._common.hardfork() : self._common.activeHardfork(height);\n\n              if (self.extraData.length > self._common.param('vm', 'maxExtraDataSize', hardfork)) {\n                return cb('invalid amount of extra data');\n              }\n\n              cb();\n            });\n          };\n          /**\n           * Returns the sha3 hash of the blockheader\n           * @method hash\n           * @return {Buffer}\n           */\n\n\n          BlockHeader.prototype.hash = function () {\n            return utils.rlphash(this.raw);\n          };\n          /**\n           * checks if the blockheader is a genesis header\n           * @method isGenesis\n           * @return {Boolean}\n           */\n\n\n          BlockHeader.prototype.isGenesis = function () {\n            return this.number.toString('hex') === '';\n          };\n          /**\n           * turns the header into the canonical genesis block header\n           * @method setGenesisParams\n           */\n\n\n          BlockHeader.prototype.setGenesisParams = function () {\n            this.timestamp = this._common.genesis().timestamp;\n            this.gasLimit = this._common.genesis().gasLimit;\n            this.difficulty = this._common.genesis().difficulty;\n            this.extraData = this._common.genesis().extraData;\n            this.nonce = this._common.genesis().nonce;\n            this.stateRoot = this._common.genesis().stateRoot;\n            this.number = Buffer.from([]);\n          };\n          /* WEBPACK VAR INJECTION */\n\n        }).call(this, __webpack_require__(\n        /*! ./../node-libs-browser/node_modules/buffer/index.js */\n        \"./node_modules/node-libs-browser/node_modules/buffer/index.js\").Buffer);\n        /***/\n      },\n\n      /***/\n      \"./node_modules/ethereumjs-block/index.js\":\n      /*!************************************************!*\\\n        !*** ./node_modules/ethereumjs-block/index.js ***!\n        \\************************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesEthereumjsBlockIndexJs(module, exports, __webpack_require__) {\n        /* WEBPACK VAR INJECTION */\n        (function (Buffer) {\n          var Common = __webpack_require__(\n          /*! ethereumjs-common */\n          \"./node_modules/ethereumjs-common/dist/index.js\").default;\n\n          var ethUtil = __webpack_require__(\n          /*! ethereumjs-util */\n          \"ethereumjs-util\");\n\n          var Tx = __webpack_require__(\n          /*! ethereumjs-tx */\n          \"ethereumjs-tx\");\n\n          var Trie = __webpack_require__(\n          /*! merkle-patricia-tree */\n          \"merkle-patricia-tree\");\n\n          var BN = ethUtil.BN;\n          var rlp = ethUtil.rlp;\n\n          var async = __webpack_require__(\n          /*! async */\n          \"./node_modules/async/dist/async.js\");\n\n          var BlockHeader = __webpack_require__(\n          /*! ./header */\n          \"./node_modules/ethereumjs-block/header.js\");\n          /**\n           * Creates a new block object\n           * @constructor the raw serialized or the deserialized block.\n           * @param {Array|Buffer|Object} data\n           * @param {Array} opts Options\n           * @param {String|Number} opts.chain The chain for the block [default: 'mainnet']\n           * @param {String} opts.hardfork Hardfork for the block [default: null, block number-based behaviour]\n           * @param {Object} opts.common Alternatively pass a Common instance (ethereumjs-common) instead of setting chain/hardfork directly\n           * @prop {Header} header the block's header\n           * @prop {Array.<Header>} uncleList an array of uncle headers\n           * @prop {Array.<Buffer>} raw an array of buffers containing the raw blocks.\n           */\n\n\n          var Block = module.exports = function (data, opts) {\n            opts = opts || {};\n\n            if (opts.common) {\n              if (opts.chain) {\n                throw new Error('Instantiation with both opts.common and opts.chain parameter not allowed!');\n              }\n\n              this._common = opts.common;\n            } else {\n              var chain = opts.chain ? opts.chain : 'mainnet';\n              var hardfork = opts.hardfork ? opts.hardfork : null;\n              this._common = new Common(chain, hardfork);\n            }\n\n            this.transactions = [];\n            this.uncleHeaders = [];\n            this._inBlockChain = false;\n            this.txTrie = new Trie();\n            Object.defineProperty(this, 'raw', {\n              get: function get() {\n                return this.serialize(false);\n              }\n            });\n            var rawTransactions, rawUncleHeaders; // defaults\n\n            if (!data) {\n              data = [[], [], []];\n            }\n\n            if (Buffer.isBuffer(data)) {\n              data = rlp.decode(data);\n            }\n\n            if (Array.isArray(data)) {\n              this.header = new BlockHeader(data[0], opts);\n              rawTransactions = data[1];\n              rawUncleHeaders = data[2];\n            } else {\n              this.header = new BlockHeader(data.header, opts);\n              rawTransactions = data.transactions || [];\n              rawUncleHeaders = data.uncleHeaders || [];\n            } // parse uncle headers\n\n\n            for (var i = 0; i < rawUncleHeaders.length; i++) {\n              this.uncleHeaders.push(new BlockHeader(rawUncleHeaders[i], opts));\n            } // parse transactions\n\n\n            for (i = 0; i < rawTransactions.length; i++) {\n              var tx = new Tx(rawTransactions[i]);\n              tx._homestead = true;\n              this.transactions.push(tx);\n            }\n          };\n\n          Block.Header = BlockHeader;\n          /**\n           * Produces a hash the RLP of the block\n           * @method hash\n           */\n\n          Block.prototype.hash = function () {\n            return this.header.hash();\n          };\n          /**\n           * Determines if a given block is the genesis block\n           * @method isGenisis\n           * @return Boolean\n           */\n\n\n          Block.prototype.isGenesis = function () {\n            return this.header.isGenesis();\n          };\n          /**\n           * turns the block into the canonical genesis block\n           * @method setGenesisParams\n           */\n\n\n          Block.prototype.setGenesisParams = function () {\n            this.header.setGenesisParams();\n          };\n          /**\n           * Produces a serialization of the block.\n           * @method serialize\n           * @param {Boolean} rlpEncode whether to rlp encode the block or not\n           */\n\n\n          Block.prototype.serialize = function (rlpEncode) {\n            var raw = [this.header.raw, [], []]; // rlpEnode defaults to true\n\n            if (typeof rlpEncode === 'undefined') {\n              rlpEncode = true;\n            }\n\n            this.transactions.forEach(function (tx) {\n              raw[1].push(tx.raw);\n            });\n            this.uncleHeaders.forEach(function (uncle) {\n              raw[2].push(uncle.raw);\n            });\n            return rlpEncode ? rlp.encode(raw) : raw;\n          };\n          /**\n           * Generate transaction trie. The tx trie must be generated before the transaction trie can\n           * be validated with `validateTransactionTrie`\n           * @method genTxTrie\n           * @param {Function} cb the callback\n           */\n\n\n          Block.prototype.genTxTrie = function (cb) {\n            var i = 0;\n            var self = this;\n            async.eachSeries(this.transactions, function (tx, done) {\n              self.txTrie.put(rlp.encode(i), tx.serialize(), done);\n              i++;\n            }, cb);\n          };\n          /**\n           * Validates the transaction trie\n           * @method validateTransactionTrie\n           * @return {Boolean}\n           */\n\n\n          Block.prototype.validateTransactionsTrie = function () {\n            var txT = this.header.transactionsTrie.toString('hex');\n\n            if (this.transactions.length) {\n              return txT === this.txTrie.root.toString('hex');\n            } else {\n              return txT === ethUtil.SHA3_RLP.toString('hex');\n            }\n          };\n          /**\n           * Validates the transactions\n           * @method validateTransactions\n           * @param {Boolean} [stringError=false] whether to return a string with a dscription of why the validation failed or return a Bloolean\n           * @return {Boolean}\n           */\n\n\n          Block.prototype.validateTransactions = function (stringError) {\n            var errors = [];\n            this.transactions.forEach(function (tx, i) {\n              var error = tx.validate(true);\n\n              if (error) {\n                errors.push(error + ' at tx ' + i);\n              }\n            });\n\n            if (stringError === undefined || stringError === false) {\n              return errors.length === 0;\n            } else {\n              return arrayToString(errors);\n            }\n          };\n          /**\n           * Validates the entire block. Returns a string to the callback if block is invalid\n           * @method validate\n           * @param {BlockChain} blockChain the blockchain that this block wants to be part of\n           * @param {Function} cb the callback which is given a `String` if the block is not valid\n           */\n\n\n          Block.prototype.validate = function (blockChain, cb) {\n            var self = this;\n            var errors = [];\n            async.parallel([// validate uncles\n            self.validateUncles.bind(self, blockChain), // validate block\n            self.header.validate.bind(self.header, blockChain), // generate the transaction trie\n            self.genTxTrie.bind(self)], function (err) {\n              if (err) {\n                errors.push(err);\n              }\n\n              if (!self.validateTransactionsTrie()) {\n                errors.push('invalid transaction trie');\n              }\n\n              var txErrors = self.validateTransactions(true);\n\n              if (txErrors !== '') {\n                errors.push(txErrors);\n              }\n\n              if (!self.validateUnclesHash()) {\n                errors.push('invalid uncle hash');\n              }\n\n              cb(arrayToString(errors));\n            });\n          };\n          /**\n           * Validates the uncle's hash\n           * @method validateUncleHash\n           * @return {Boolean}\n           */\n\n\n          Block.prototype.validateUnclesHash = function () {\n            var raw = [];\n            this.uncleHeaders.forEach(function (uncle) {\n              raw.push(uncle.raw);\n            });\n            raw = rlp.encode(raw);\n            return ethUtil.sha3(raw).toString('hex') === this.header.uncleHash.toString('hex');\n          };\n          /**\n           * Validates the uncles that are in the block if any. Returns a string to the callback if uncles are invalid\n           * @method validateUncles\n           * @param {Blockchain} blockChaina an instance of the Blockchain\n           * @param {Function} cb the callback\n           */\n\n\n          Block.prototype.validateUncles = function (blockChain, cb) {\n            if (this.isGenesis()) {\n              return cb();\n            }\n\n            var self = this;\n\n            if (self.uncleHeaders.length > 2) {\n              return cb('too many uncle headers');\n            }\n\n            var uncleHashes = self.uncleHeaders.map(function (header) {\n              return header.hash().toString('hex');\n            });\n\n            if (!(new Set(uncleHashes).size === uncleHashes.length)) {\n              return cb('duplicate uncles');\n            }\n\n            async.each(self.uncleHeaders, function (uncle, cb2) {\n              var height = new BN(self.header.number);\n              async.parallel([uncle.validate.bind(uncle, blockChain, height), // check to make sure the uncle is not already in the blockchain\n              function (cb3) {\n                blockChain.getDetails(uncle.hash(), function (err, blockInfo) {\n                  // TODO: remove uncles from BC\n                  if (blockInfo && blockInfo.isUncle) {\n                    cb3(err || 'uncle already included');\n                  } else {\n                    cb3();\n                  }\n                });\n              }], cb2);\n            }, cb);\n          };\n          /**\n           * Converts the block toJSON\n           * @method toJSON\n           * @param {Bool} labeled whether to create an labeled object or an array\n           * @return {Object}\n           */\n\n\n          Block.prototype.toJSON = function (labeled) {\n            if (labeled) {\n              var obj = {\n                header: this.header.toJSON(true),\n                transactions: [],\n                uncleHeaders: []\n              };\n              this.transactions.forEach(function (tx) {\n                obj.transactions.push(tx.toJSON(labeled));\n              });\n              this.uncleHeaders.forEach(function (uh) {\n                obj.uncleHeaders.push(uh.toJSON());\n              });\n              return obj;\n            } else {\n              return ethUtil.baToJSON(this.raw);\n            }\n          };\n\n          function arrayToString(array) {\n            try {\n              return array.reduce(function (str, err) {\n                if (str) {\n                  str += ' ';\n                }\n\n                return str + err;\n              });\n            } catch (e) {\n              return '';\n            }\n          }\n          /* WEBPACK VAR INJECTION */\n\n        }).call(this, __webpack_require__(\n        /*! ./../node-libs-browser/node_modules/buffer/index.js */\n        \"./node_modules/node-libs-browser/node_modules/buffer/index.js\").Buffer);\n        /***/\n      },\n\n      /***/\n      \"./node_modules/ethereumjs-common/dist/chains/goerli.json\":\n      /*!****************************************************************!*\\\n        !*** ./node_modules/ethereumjs-common/dist/chains/goerli.json ***!\n        \\****************************************************************/\n\n      /*! exports provided: name, chainId, networkId, comment, url, genesis, hardforks, bootstrapNodes, default */\n\n      /***/\n      function node_modulesEthereumjsCommonDistChainsGoerliJson(module) {\n        module.exports = JSON.parse(\"{\\\"name\\\":\\\"goerli\\\",\\\"chainId\\\":5,\\\"networkId\\\":5,\\\"comment\\\":\\\"Cross-client PoA test network\\\",\\\"url\\\":\\\"https://github.com/goerli/testnet\\\",\\\"genesis\\\":{\\\"hash\\\":\\\"0xbf7e331f7f7c1dd2e05159666b3bf8bc7a8a3a9eb1d518969eab529dd9b88c1a\\\",\\\"timestamp\\\":\\\"0x5c51a607\\\",\\\"gasLimit\\\":10485760,\\\"difficulty\\\":1,\\\"nonce\\\":\\\"0x0000000000000000\\\",\\\"extraData\\\":\\\"0x22466c6578692069732061207468696e6722202d204166726900000000000000e0a2bd4258d2768837baa26a28fe71dc079f84c70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\\",\\\"stateRoot\\\":\\\"0x5d6cded585e73c4e322c30c2f782a336316f17dd85a4863b9d838d2d4b8b3008\\\"},\\\"hardforks\\\":[{\\\"name\\\":\\\"chainstart\\\",\\\"block\\\":0,\\\"consensus\\\":\\\"poa\\\",\\\"finality\\\":null},{\\\"name\\\":\\\"homestead\\\",\\\"block\\\":0,\\\"consensus\\\":\\\"poa\\\",\\\"finality\\\":null},{\\\"name\\\":\\\"dao\\\",\\\"block\\\":0,\\\"consensus\\\":\\\"poa\\\",\\\"finality\\\":null},{\\\"name\\\":\\\"tangerineWhistle\\\",\\\"block\\\":0,\\\"consensus\\\":\\\"poa\\\",\\\"finality\\\":null},{\\\"name\\\":\\\"spuriousDragon\\\",\\\"block\\\":0,\\\"consensus\\\":\\\"poa\\\",\\\"finality\\\":null},{\\\"name\\\":\\\"byzantium\\\",\\\"block\\\":0,\\\"consensus\\\":\\\"poa\\\",\\\"finality\\\":null},{\\\"name\\\":\\\"constantinople\\\",\\\"block\\\":0,\\\"consensus\\\":\\\"poa\\\",\\\"finality\\\":null},{\\\"name\\\":\\\"petersburg\\\",\\\"block\\\":0,\\\"consensus\\\":\\\"poa\\\",\\\"finality\\\":null},{\\\"name\\\":\\\"istanbul\\\",\\\"block\\\":1561651,\\\"consensus\\\":\\\"poa\\\",\\\"finality\\\":null}],\\\"bootstrapNodes\\\":[{\\\"ip\\\":\\\"51.141.78.53\\\",\\\"port\\\":30303,\\\"id\\\":\\\"011f758e6552d105183b1761c5e2dea0111bc20fd5f6422bc7f91e0fabbec9a6595caf6239b37feb773dddd3f87240d99d859431891e4a642cf2a0a9e6cbb98a\\\",\\\"location\\\":\\\"\\\",\\\"comment\\\":\\\"Upstream bootnode 1\\\"},{\\\"ip\\\":\\\"13.93.54.137\\\",\\\"port\\\":30303,\\\"id\\\":\\\"176b9417f511d05b6b2cf3e34b756cf0a7096b3094572a8f6ef4cdcb9d1f9d00683bf0f83347eebdf3b81c3521c2332086d9592802230bf528eaf606a1d9677b\\\",\\\"location\\\":\\\"\\\",\\\"comment\\\":\\\"Upstream bootnode 2\\\"},{\\\"ip\\\":\\\"94.237.54.114\\\",\\\"port\\\":30313,\\\"id\\\":\\\"46add44b9f13965f7b9875ac6b85f016f341012d84f975377573800a863526f4da19ae2c620ec73d11591fa9510e992ecc03ad0751f53cc02f7c7ed6d55c7291\\\",\\\"location\\\":\\\"\\\",\\\"comment\\\":\\\"Upstream bootnode 3\\\"},{\\\"ip\\\":\\\"52.64.155.147\\\",\\\"port\\\":30303,\\\"id\\\":\\\"c1f8b7c2ac4453271fa07d8e9ecf9a2e8285aa0bd0c07df0131f47153306b0736fd3db8924e7a9bf0bed6b1d8d4f87362a71b033dc7c64547728d953e43e59b2\\\",\\\"location\\\":\\\"\\\",\\\"comment\\\":\\\"Upstream bootnode 4\\\"},{\\\"ip\\\":\\\"213.186.16.82\\\",\\\"port\\\":30303,\\\"id\\\":\\\"f4a9c6ee28586009fb5a96c8af13a58ed6d8315a9eee4772212c1d4d9cebe5a8b8a78ea4434f318726317d04a3f531a1ef0420cf9752605a562cfe858c46e263\\\",\\\"location\\\":\\\"\\\",\\\"comment\\\":\\\"Upstream bootnode 5\\\"},{\\\"ip\\\":\\\"3.11.147.67\\\",\\\"port\\\":30303,\\\"id\\\":\\\"a61215641fb8714a373c80edbfa0ea8878243193f57c96eeb44d0bc019ef295abd4e044fd619bfc4c59731a73fb79afe84e9ab6da0c743ceb479cbb6d263fa91\\\",\\\"location\\\":\\\"\\\",\\\"comment\\\":\\\"Ethereum Foundation bootnode\\\"}]}\");\n        /***/\n      },\n\n      /***/\n      \"./node_modules/ethereumjs-common/dist/chains/index.js\":\n      /*!*************************************************************!*\\\n        !*** ./node_modules/ethereumjs-common/dist/chains/index.js ***!\n        \\*************************************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesEthereumjsCommonDistChainsIndexJs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.chains = void 0;\n        exports.chains = {\n          names: {\n            '1': 'mainnet',\n            '3': 'ropsten',\n            '4': 'rinkeby',\n            '42': 'kovan',\n            '5': 'goerli'\n          },\n          mainnet: __webpack_require__(\n          /*! ./mainnet.json */\n          \"./node_modules/ethereumjs-common/dist/chains/mainnet.json\"),\n          ropsten: __webpack_require__(\n          /*! ./ropsten.json */\n          \"./node_modules/ethereumjs-common/dist/chains/ropsten.json\"),\n          rinkeby: __webpack_require__(\n          /*! ./rinkeby.json */\n          \"./node_modules/ethereumjs-common/dist/chains/rinkeby.json\"),\n          kovan: __webpack_require__(\n          /*! ./kovan.json */\n          \"./node_modules/ethereumjs-common/dist/chains/kovan.json\"),\n          goerli: __webpack_require__(\n          /*! ./goerli.json */\n          \"./node_modules/ethereumjs-common/dist/chains/goerli.json\")\n        };\n        /***/\n      },\n\n      /***/\n      \"./node_modules/ethereumjs-common/dist/chains/kovan.json\":\n      /*!***************************************************************!*\\\n        !*** ./node_modules/ethereumjs-common/dist/chains/kovan.json ***!\n        \\***************************************************************/\n\n      /*! exports provided: name, chainId, networkId, comment, url, genesis, hardforks, bootstrapNodes, default */\n\n      /***/\n      function node_modulesEthereumjsCommonDistChainsKovanJson(module) {\n        module.exports = JSON.parse(\"{\\\"name\\\":\\\"kovan\\\",\\\"chainId\\\":42,\\\"networkId\\\":42,\\\"comment\\\":\\\"Parity PoA test network\\\",\\\"url\\\":\\\"https://kovan-testnet.github.io/website/\\\",\\\"genesis\\\":{\\\"hash\\\":\\\"0xa3c565fc15c7478862d50ccd6561e3c06b24cc509bf388941c25ea985ce32cb9\\\",\\\"timestamp\\\":null,\\\"gasLimit\\\":6000000,\\\"difficulty\\\":131072,\\\"nonce\\\":\\\"0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\\",\\\"extraData\\\":\\\"0x\\\",\\\"stateRoot\\\":\\\"0x2480155b48a1cea17d67dbfdfaafe821c1d19cdd478c5358e8ec56dec24502b2\\\"},\\\"hardforks\\\":[{\\\"name\\\":\\\"chainstart\\\",\\\"block\\\":0,\\\"consensus\\\":\\\"poa\\\",\\\"finality\\\":null},{\\\"name\\\":\\\"homestead\\\",\\\"block\\\":0,\\\"consensus\\\":\\\"poa\\\",\\\"finality\\\":null},{\\\"name\\\":\\\"dao\\\",\\\"block\\\":0,\\\"consensus\\\":\\\"poa\\\",\\\"finality\\\":null},{\\\"name\\\":\\\"tangerineWhistle\\\",\\\"block\\\":0,\\\"consensus\\\":\\\"poa\\\",\\\"finality\\\":null},{\\\"name\\\":\\\"spuriousDragon\\\",\\\"block\\\":0,\\\"consensus\\\":\\\"poa\\\",\\\"finality\\\":null},{\\\"name\\\":\\\"byzantium\\\",\\\"block\\\":5067000,\\\"consensus\\\":\\\"poa\\\",\\\"finality\\\":null},{\\\"name\\\":\\\"constantinople\\\",\\\"block\\\":9200000,\\\"consensus\\\":\\\"poa\\\",\\\"finality\\\":null},{\\\"name\\\":\\\"petersburg\\\",\\\"block\\\":10255201,\\\"consensus\\\":\\\"poa\\\",\\\"finality\\\":null},{\\\"name\\\":\\\"istanbul\\\",\\\"block\\\":14111141,\\\"consensus\\\":\\\"poa\\\",\\\"finality\\\":null}],\\\"bootstrapNodes\\\":[{\\\"ip\\\":\\\"116.203.116.241\\\",\\\"port\\\":30303,\\\"id\\\":\\\"16898006ba2cd4fa8bf9a3dfe32684c178fa861df144bfc21fe800dc4838a03e342056951fa9fd533dcb0be1219e306106442ff2cf1f7e9f8faa5f2fc1a3aa45\\\",\\\"location\\\":\\\"\\\",\\\"comment\\\":\\\"1\\\"},{\\\"ip\\\":\\\"3.217.96.11\\\",\\\"port\\\":30303,\\\"id\\\":\\\"2909846f78c37510cc0e306f185323b83bb2209e5ff4fdd279d93c60e3f365e3c6e62ad1d2133ff11f9fd6d23ad9c3dad73bb974d53a22f7d1ac5b7dea79d0b0\\\",\\\"location\\\":\\\"\\\",\\\"comment\\\":\\\"2\\\"},{\\\"ip\\\":\\\"108.61.170.124\\\",\\\"port\\\":30303,\\\"id\\\":\\\"740e1c8ea64e71762c71a463a04e2046070a0c9394fcab5891d41301dc473c0cff00ebab5a9bc87fbcb610ab98ac18225ff897bc8b7b38def5975d5ceb0a7d7c\\\",\\\"location\\\":\\\"\\\",\\\"comment\\\":\\\"3\\\"},{\\\"ip\\\":\\\"157.230.31.163\\\",\\\"port\\\":30303,\\\"id\\\":\\\"2909846f78c37510cc0e306f185323b83bb2209e5ff4fdd279d93c60e3f365e3c6e62ad1d2133ff11f9fd6d23ad9c3dad73bb974d53a22f7d1ac5b7dea79d0b0\\\",\\\"location\\\":\\\"\\\",\\\"comment\\\":\\\"4\\\"}]}\");\n        /***/\n      },\n\n      /***/\n      \"./node_modules/ethereumjs-common/dist/chains/mainnet.json\":\n      /*!*****************************************************************!*\\\n        !*** ./node_modules/ethereumjs-common/dist/chains/mainnet.json ***!\n        \\*****************************************************************/\n\n      /*! exports provided: name, chainId, networkId, comment, url, genesis, hardforks, bootstrapNodes, default */\n\n      /***/\n      function node_modulesEthereumjsCommonDistChainsMainnetJson(module) {\n        module.exports = JSON.parse(\"{\\\"name\\\":\\\"mainnet\\\",\\\"chainId\\\":1,\\\"networkId\\\":1,\\\"comment\\\":\\\"The Ethereum main chain\\\",\\\"url\\\":\\\"https://ethstats.net/\\\",\\\"genesis\\\":{\\\"hash\\\":\\\"0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3\\\",\\\"timestamp\\\":null,\\\"gasLimit\\\":5000,\\\"difficulty\\\":17179869184,\\\"nonce\\\":\\\"0x0000000000000042\\\",\\\"extraData\\\":\\\"0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa\\\",\\\"stateRoot\\\":\\\"0xd7f8974fb5ac78d9ac099b9ad5018bedc2ce0a72dad1827a1709da30580f0544\\\"},\\\"hardforks\\\":[{\\\"name\\\":\\\"chainstart\\\",\\\"block\\\":0,\\\"consensus\\\":\\\"pow\\\",\\\"finality\\\":null},{\\\"name\\\":\\\"homestead\\\",\\\"block\\\":1150000,\\\"consensus\\\":\\\"pow\\\",\\\"finality\\\":null},{\\\"name\\\":\\\"dao\\\",\\\"block\\\":1920000,\\\"consensus\\\":\\\"pow\\\",\\\"finality\\\":null},{\\\"name\\\":\\\"tangerineWhistle\\\",\\\"block\\\":2463000,\\\"consensus\\\":\\\"pow\\\",\\\"finality\\\":null},{\\\"name\\\":\\\"spuriousDragon\\\",\\\"block\\\":2675000,\\\"consensus\\\":\\\"pow\\\",\\\"finality\\\":null},{\\\"name\\\":\\\"byzantium\\\",\\\"block\\\":4370000,\\\"consensus\\\":\\\"pow\\\",\\\"finality\\\":null},{\\\"name\\\":\\\"constantinople\\\",\\\"block\\\":7280000,\\\"consensus\\\":\\\"pow\\\",\\\"finality\\\":null},{\\\"name\\\":\\\"petersburg\\\",\\\"block\\\":7280000,\\\"consensus\\\":\\\"pow\\\",\\\"finality\\\":null},{\\\"name\\\":\\\"istanbul\\\",\\\"block\\\":9069000,\\\"consensus\\\":\\\"pow\\\",\\\"finality\\\":null},{\\\"name\\\":\\\"muirGlacier\\\",\\\"block\\\":9200000,\\\"consensus\\\":\\\"pow\\\",\\\"finality\\\":null}],\\\"bootstrapNodes\\\":[{\\\"ip\\\":\\\"18.138.108.67\\\",\\\"port\\\":30303,\\\"id\\\":\\\"d860a01f9722d78051619d1e2351aba3f43f943f6f00718d1b9baa4101932a1f5011f16bb2b1bb35db20d6fe28fa0bf09636d26a87d31de9ec6203eeedb1f666\\\",\\\"location\\\":\\\"ap-southeast-1-001\\\",\\\"comment\\\":\\\"bootnode-aws-ap-southeast-1-001\\\"},{\\\"ip\\\":\\\"3.209.45.79\\\",\\\"port\\\":30303,\\\"id\\\":\\\"22a8232c3abc76a16ae9d6c3b164f98775fe226f0917b0ca871128a74a8e9630b458460865bab457221f1d448dd9791d24c4e5d88786180ac185df813a68d4de\\\",\\\"location\\\":\\\"us-east-1-001\\\",\\\"comment\\\":\\\"bootnode-aws-us-east-1-001\\\"},{\\\"ip\\\":\\\"34.255.23.113\\\",\\\"port\\\":30303,\\\"id\\\":\\\"ca6de62fce278f96aea6ec5a2daadb877e51651247cb96ee310a318def462913b653963c155a0ef6c7d50048bba6e6cea881130857413d9f50a621546b590758\\\",\\\"location\\\":\\\"eu-west-1-001\\\",\\\"comment\\\":\\\"bootnode-aws-eu-west-1-001\\\"},{\\\"ip\\\":\\\"35.158.244.151\\\",\\\"port\\\":30303,\\\"id\\\":\\\"279944d8dcd428dffaa7436f25ca0ca43ae19e7bcf94a8fb7d1641651f92d121e972ac2e8f381414b80cc8e5555811c2ec6e1a99bb009b3f53c4c69923e11bd8\\\",\\\"location\\\":\\\"eu-central-1-001\\\",\\\"comment\\\":\\\"bootnode-aws-eu-central-1-001\\\"},{\\\"ip\\\":\\\"52.187.207.27\\\",\\\"port\\\":30303,\\\"id\\\":\\\"8499da03c47d637b20eee24eec3c356c9a2e6148d6fe25ca195c7949ab8ec2c03e3556126b0d7ed644675e78c4318b08691b7b57de10e5f0d40d05b09238fa0a\\\",\\\"location\\\":\\\"australiaeast-001\\\",\\\"comment\\\":\\\"bootnode-azure-australiaeast-001\\\"},{\\\"ip\\\":\\\"191.234.162.198\\\",\\\"port\\\":30303,\\\"id\\\":\\\"103858bdb88756c71f15e9b5e09b56dc1be52f0a5021d46301dbbfb7e130029cc9d0d6f73f693bc29b665770fff7da4d34f3c6379fe12721b5d7a0bcb5ca1fc1\\\",\\\"location\\\":\\\"brazilsouth-001\\\",\\\"comment\\\":\\\"bootnode-azure-brazilsouth-001\\\"},{\\\"ip\\\":\\\"52.231.165.108\\\",\\\"port\\\":30303,\\\"id\\\":\\\"715171f50508aba88aecd1250af392a45a330af91d7b90701c436b618c86aaa1589c9184561907bebbb56439b8f8787bc01f49a7c77276c58c1b09822d75e8e8\\\",\\\"location\\\":\\\"koreasouth-001\\\",\\\"comment\\\":\\\"bootnode-azure-koreasouth-001\\\"},{\\\"ip\\\":\\\"104.42.217.25\\\",\\\"port\\\":30303,\\\"id\\\":\\\"5d6d7cd20d6da4bb83a1d28cadb5d409b64edf314c0335df658c1a54e32c7c4a7ab7823d57c39b6a757556e68ff1df17c748b698544a55cb488b52479a92b60f\\\",\\\"location\\\":\\\"westus-001\\\",\\\"comment\\\":\\\"bootnode-azure-westus-001\\\"}]}\");\n        /***/\n      },\n\n      /***/\n      \"./node_modules/ethereumjs-common/dist/chains/rinkeby.json\":\n      /*!*****************************************************************!*\\\n        !*** ./node_modules/ethereumjs-common/dist/chains/rinkeby.json ***!\n        \\*****************************************************************/\n\n      /*! exports provided: name, chainId, networkId, comment, url, genesis, hardforks, bootstrapNodes, default */\n\n      /***/\n      function node_modulesEthereumjsCommonDistChainsRinkebyJson(module) {\n        module.exports = JSON.parse(\"{\\\"name\\\":\\\"rinkeby\\\",\\\"chainId\\\":4,\\\"networkId\\\":4,\\\"comment\\\":\\\"PoA test network\\\",\\\"url\\\":\\\"https://www.rinkeby.io\\\",\\\"genesis\\\":{\\\"hash\\\":\\\"0x6341fd3daf94b748c72ced5a5b26028f2474f5f00d824504e4fa37a75767e177\\\",\\\"timestamp\\\":\\\"0x58ee40ba\\\",\\\"gasLimit\\\":4700000,\\\"difficulty\\\":1,\\\"nonce\\\":\\\"0x0000000000000000\\\",\\\"extraData\\\":\\\"0x52657370656374206d7920617574686f7269746168207e452e436172746d616e42eb768f2244c8811c63729a21a3569731535f067ffc57839b00206d1ad20c69a1981b489f772031b279182d99e65703f0076e4812653aab85fca0f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\\",\\\"stateRoot\\\":\\\"0x53580584816f617295ea26c0e17641e0120cab2f0a8ffb53a866fd53aa8e8c2d\\\"},\\\"hardforks\\\":[{\\\"name\\\":\\\"chainstart\\\",\\\"block\\\":0,\\\"consensus\\\":\\\"poa\\\",\\\"finality\\\":null},{\\\"name\\\":\\\"homestead\\\",\\\"block\\\":1,\\\"consensus\\\":\\\"poa\\\",\\\"finality\\\":null},{\\\"name\\\":\\\"dao\\\",\\\"block\\\":null,\\\"consensus\\\":\\\"poa\\\",\\\"finality\\\":null},{\\\"name\\\":\\\"tangerineWhistle\\\",\\\"block\\\":2,\\\"consensus\\\":\\\"poa\\\",\\\"finality\\\":null},{\\\"name\\\":\\\"spuriousDragon\\\",\\\"block\\\":3,\\\"consensus\\\":\\\"poa\\\",\\\"finality\\\":null},{\\\"name\\\":\\\"byzantium\\\",\\\"block\\\":1035301,\\\"consensus\\\":\\\"poa\\\",\\\"finality\\\":null},{\\\"name\\\":\\\"constantinople\\\",\\\"block\\\":3660663,\\\"consensus\\\":\\\"poa\\\",\\\"finality\\\":null},{\\\"name\\\":\\\"petersburg\\\",\\\"block\\\":4321234,\\\"consensus\\\":\\\"poa\\\",\\\"finality\\\":null},{\\\"name\\\":\\\"istanbul\\\",\\\"block\\\":5435345,\\\"consensus\\\":\\\"poa\\\",\\\"finality\\\":null}],\\\"bootstrapNodes\\\":[{\\\"ip\\\":\\\"52.169.42.101\\\",\\\"port\\\":30303,\\\"id\\\":\\\"a24ac7c5484ef4ed0c5eb2d36620ba4e4aa13b8c84684e1b4aab0cebea2ae45cb4d375b77eab56516d34bfbd3c1a833fc51296ff084b770b94fb9028c4d25ccf\\\",\\\"location\\\":\\\"\\\",\\\"comment\\\":\\\"IE\\\"},{\\\"ip\\\":\\\"52.3.158.184\\\",\\\"port\\\":30303,\\\"id\\\":\\\"343149e4feefa15d882d9fe4ac7d88f885bd05ebb735e547f12e12080a9fa07c8014ca6fd7f373123488102fe5e34111f8509cf0b7de3f5b44339c9f25e87cb8\\\",\\\"location\\\":\\\"\\\",\\\"comment\\\":\\\"INFURA\\\"},{\\\"ip\\\":\\\"159.89.28.211\\\",\\\"port\\\":30303,\\\"id\\\":\\\"b6b28890b006743680c52e64e0d16db57f28124885595fa03a562be1d2bf0f3a1da297d56b13da25fb992888fd556d4c1a27b1f39d531bde7de1921c90061cc6\\\",\\\"location\\\":\\\"\\\",\\\"comment\\\":\\\"AKASHA\\\"}]}\");\n        /***/\n      },\n\n      /***/\n      \"./node_modules/ethereumjs-common/dist/chains/ropsten.json\":\n      /*!*****************************************************************!*\\\n        !*** ./node_modules/ethereumjs-common/dist/chains/ropsten.json ***!\n        \\*****************************************************************/\n\n      /*! exports provided: name, chainId, networkId, comment, url, genesis, hardforks, bootstrapNodes, default */\n\n      /***/\n      function node_modulesEthereumjsCommonDistChainsRopstenJson(module) {\n        module.exports = JSON.parse(\"{\\\"name\\\":\\\"ropsten\\\",\\\"chainId\\\":3,\\\"networkId\\\":3,\\\"comment\\\":\\\"PoW test network\\\",\\\"url\\\":\\\"https://github.com/ethereum/ropsten\\\",\\\"genesis\\\":{\\\"hash\\\":\\\"0x41941023680923e0fe4d74a34bdac8141f2540e3ae90623718e47d66d1ca4a2d\\\",\\\"timestamp\\\":null,\\\"gasLimit\\\":16777216,\\\"difficulty\\\":1048576,\\\"nonce\\\":\\\"0x0000000000000042\\\",\\\"extraData\\\":\\\"0x3535353535353535353535353535353535353535353535353535353535353535\\\",\\\"stateRoot\\\":\\\"0x217b0bbcfb72e2d57e28f33cb361b9983513177755dc3f33ce3e7022ed62b77b\\\"},\\\"hardforks\\\":[{\\\"name\\\":\\\"chainstart\\\",\\\"block\\\":0,\\\"consensus\\\":\\\"pow\\\",\\\"finality\\\":null},{\\\"name\\\":\\\"homestead\\\",\\\"block\\\":0,\\\"consensus\\\":\\\"pow\\\",\\\"finality\\\":null},{\\\"name\\\":\\\"dao\\\",\\\"block\\\":null,\\\"consensus\\\":\\\"pow\\\",\\\"finality\\\":null},{\\\"name\\\":\\\"tangerineWhistle\\\",\\\"block\\\":0,\\\"consensus\\\":\\\"pow\\\",\\\"finality\\\":null},{\\\"name\\\":\\\"spuriousDragon\\\",\\\"block\\\":10,\\\"consensus\\\":\\\"pow\\\",\\\"finality\\\":null},{\\\"name\\\":\\\"byzantium\\\",\\\"block\\\":1700000,\\\"consensus\\\":\\\"pow\\\",\\\"finality\\\":null},{\\\"name\\\":\\\"constantinople\\\",\\\"block\\\":4230000,\\\"consensus\\\":\\\"pow\\\",\\\"finality\\\":null},{\\\"name\\\":\\\"petersburg\\\",\\\"block\\\":4939394,\\\"consensus\\\":\\\"pow\\\",\\\"finality\\\":null},{\\\"name\\\":\\\"istanbul\\\",\\\"block\\\":6485846,\\\"consensus\\\":\\\"pow\\\",\\\"finality\\\":null},{\\\"name\\\":\\\"muirGlacier\\\",\\\"block\\\":7117117,\\\"consensus\\\":\\\"pow\\\",\\\"finality\\\":null}],\\\"bootstrapNodes\\\":[{\\\"ip\\\":\\\"52.176.7.10\\\",\\\"port\\\":30303,\\\"id\\\":\\\"30b7ab30a01c124a6cceca36863ece12c4f5fa68e3ba9b0b51407ccc002eeed3b3102d20a88f1c1d3c3154e2449317b8ef95090e77b312d5cc39354f86d5d606\\\",\\\"location\\\":\\\"\\\",\\\"comment\\\":\\\"US-Azure geth\\\"},{\\\"ip\\\":\\\"52.176.100.77\\\",\\\"port\\\":30303,\\\"id\\\":\\\"865a63255b3bb68023b6bffd5095118fcc13e79dcf014fe4e47e065c350c7cc72af2e53eff895f11ba1bbb6a2b33271c1116ee870f266618eadfc2e78aa7349c\\\",\\\"location\\\":\\\"\\\",\\\"comment\\\":\\\"US-Azure parity\\\"},{\\\"ip\\\":\\\"52.232.243.152\\\",\\\"port\\\":30303,\\\"id\\\":\\\"6332792c4a00e3e4ee0926ed89e0d27ef985424d97b6a45bf0f23e51f0dcb5e66b875777506458aea7af6f9e4ffb69f43f3778ee73c81ed9d34c51c4b16b0b0f\\\",\\\"location\\\":\\\"\\\",\\\"comment\\\":\\\"Parity\\\"},{\\\"ip\\\":\\\"192.81.208.223\\\",\\\"port\\\":30303,\\\"id\\\":\\\"94c15d1b9e2fe7ce56e458b9a3b672ef11894ddedd0c6f247e0f1d3487f52b66208fb4aeb8179fce6e3a749ea93ed147c37976d67af557508d199d9594c35f09\\\",\\\"location\\\":\\\"\\\",\\\"comment\\\":\\\"@gpip\\\"}]}\");\n        /***/\n      },\n\n      /***/\n      \"./node_modules/ethereumjs-common/dist/hardforks/byzantium.json\":\n      /*!**********************************************************************!*\\\n        !*** ./node_modules/ethereumjs-common/dist/hardforks/byzantium.json ***!\n        \\**********************************************************************/\n\n      /*! exports provided: name, comment, eip, gasConfig, gasPrices, vm, pow, casper, sharding, default */\n\n      /***/\n      function node_modulesEthereumjsCommonDistHardforksByzantiumJson(module) {\n        module.exports = JSON.parse(\"{\\\"name\\\":\\\"byzantium\\\",\\\"comment\\\":\\\"Hardfork with new precompiles, instructions and other protocol changes\\\",\\\"eip\\\":{\\\"url\\\":\\\"https://eips.ethereum.org/EIPS/eip-609\\\",\\\"status\\\":\\\"Final\\\"},\\\"gasConfig\\\":{},\\\"gasPrices\\\":{\\\"modexpGquaddivisor\\\":{\\\"v\\\":20,\\\"d\\\":\\\"Gquaddivisor from modexp precompile for gas calculation\\\"},\\\"ecAdd\\\":{\\\"v\\\":500,\\\"d\\\":\\\"Gas costs for curve addition precompile\\\"},\\\"ecMul\\\":{\\\"v\\\":40000,\\\"d\\\":\\\"Gas costs for curve multiplication precompile\\\"},\\\"ecPairing\\\":{\\\"v\\\":100000,\\\"d\\\":\\\"Base gas costs for curve pairing precompile\\\"},\\\"ecPairingWord\\\":{\\\"v\\\":80000,\\\"d\\\":\\\"Gas costs regarding curve pairing precompile input length\\\"}},\\\"vm\\\":{},\\\"pow\\\":{\\\"minerReward\\\":{\\\"v\\\":\\\"3000000000000000000\\\",\\\"d\\\":\\\"the amount a miner get rewarded for mining a block\\\"}},\\\"casper\\\":{},\\\"sharding\\\":{}}\");\n        /***/\n      },\n\n      /***/\n      \"./node_modules/ethereumjs-common/dist/hardforks/chainstart.json\":\n      /*!***********************************************************************!*\\\n        !*** ./node_modules/ethereumjs-common/dist/hardforks/chainstart.json ***!\n        \\***********************************************************************/\n\n      /*! exports provided: name, comment, eip, status, gasConfig, gasPrices, vm, pow, casper, sharding, default */\n\n      /***/\n      function node_modulesEthereumjsCommonDistHardforksChainstartJson(module) {\n        module.exports = JSON.parse(\"{\\\"name\\\":\\\"chainstart\\\",\\\"comment\\\":\\\"Start of the Ethereum main chain\\\",\\\"eip\\\":{\\\"url\\\":\\\"\\\",\\\"status\\\":\\\"\\\"},\\\"status\\\":\\\"\\\",\\\"gasConfig\\\":{\\\"minGasLimit\\\":{\\\"v\\\":5000,\\\"d\\\":\\\"Minimum the gas limit may ever be\\\"},\\\"gasLimitBoundDivisor\\\":{\\\"v\\\":1024,\\\"d\\\":\\\"The bound divisor of the gas limit, used in update calculations\\\"}},\\\"gasPrices\\\":{\\\"base\\\":{\\\"v\\\":2,\\\"d\\\":\\\"Gas base cost, used e.g. for ChainID opcode (Istanbul)\\\"},\\\"tierStep\\\":{\\\"v\\\":[0,2,3,5,8,10,20],\\\"d\\\":\\\"Once per operation, for a selection of them\\\"},\\\"exp\\\":{\\\"v\\\":10,\\\"d\\\":\\\"Once per EXP instuction\\\"},\\\"expByte\\\":{\\\"v\\\":10,\\\"d\\\":\\\"Times ceil(log256(exponent)) for the EXP instruction\\\"},\\\"sha3\\\":{\\\"v\\\":30,\\\"d\\\":\\\"Once per SHA3 operation\\\"},\\\"sha3Word\\\":{\\\"v\\\":6,\\\"d\\\":\\\"Once per word of the SHA3 operation's data\\\"},\\\"sload\\\":{\\\"v\\\":50,\\\"d\\\":\\\"Once per SLOAD operation\\\"},\\\"sstoreSet\\\":{\\\"v\\\":20000,\\\"d\\\":\\\"Once per SSTORE operation if the zeroness changes from zero\\\"},\\\"sstoreReset\\\":{\\\"v\\\":5000,\\\"d\\\":\\\"Once per SSTORE operation if the zeroness does not change from zero\\\"},\\\"sstoreRefund\\\":{\\\"v\\\":15000,\\\"d\\\":\\\"Once per SSTORE operation if the zeroness changes to zero\\\"},\\\"jumpdest\\\":{\\\"v\\\":1,\\\"d\\\":\\\"Refunded gas, once per SSTORE operation if the zeroness changes to zero\\\"},\\\"log\\\":{\\\"v\\\":375,\\\"d\\\":\\\"Per LOG* operation\\\"},\\\"logData\\\":{\\\"v\\\":8,\\\"d\\\":\\\"Per byte in a LOG* operation's data\\\"},\\\"logTopic\\\":{\\\"v\\\":375,\\\"d\\\":\\\"Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas\\\"},\\\"create\\\":{\\\"v\\\":32000,\\\"d\\\":\\\"Once per CREATE operation & contract-creation transaction\\\"},\\\"call\\\":{\\\"v\\\":40,\\\"d\\\":\\\"Once per CALL operation & message call transaction\\\"},\\\"callStipend\\\":{\\\"v\\\":2300,\\\"d\\\":\\\"Free gas given at beginning of call\\\"},\\\"callValueTransfer\\\":{\\\"v\\\":9000,\\\"d\\\":\\\"Paid for CALL when the value transfor is non-zero\\\"},\\\"callNewAccount\\\":{\\\"v\\\":25000,\\\"d\\\":\\\"Paid for CALL when the destination address didn't exist prior\\\"},\\\"selfdestructRefund\\\":{\\\"v\\\":24000,\\\"d\\\":\\\"Refunded following a selfdestruct operation\\\"},\\\"memory\\\":{\\\"v\\\":3,\\\"d\\\":\\\"Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL\\\"},\\\"quadCoeffDiv\\\":{\\\"v\\\":512,\\\"d\\\":\\\"Divisor for the quadratic particle of the memory cost equation\\\"},\\\"createData\\\":{\\\"v\\\":200,\\\"d\\\":\\\"\\\"},\\\"tx\\\":{\\\"v\\\":21000,\\\"d\\\":\\\"Per transaction. NOTE: Not payable on data of calls between transactions\\\"},\\\"txCreation\\\":{\\\"v\\\":32000,\\\"d\\\":\\\"The cost of creating a contract via tx\\\"},\\\"txDataZero\\\":{\\\"v\\\":4,\\\"d\\\":\\\"Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions\\\"},\\\"txDataNonZero\\\":{\\\"v\\\":68,\\\"d\\\":\\\"Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions\\\"},\\\"copy\\\":{\\\"v\\\":3,\\\"d\\\":\\\"Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added\\\"},\\\"ecRecover\\\":{\\\"v\\\":3000,\\\"d\\\":\\\"\\\"},\\\"sha256\\\":{\\\"v\\\":60,\\\"d\\\":\\\"\\\"},\\\"sha256Word\\\":{\\\"v\\\":12,\\\"d\\\":\\\"\\\"},\\\"ripemd160\\\":{\\\"v\\\":600,\\\"d\\\":\\\"\\\"},\\\"ripemd160Word\\\":{\\\"v\\\":120,\\\"d\\\":\\\"\\\"},\\\"identity\\\":{\\\"v\\\":15,\\\"d\\\":\\\"\\\"},\\\"identityWord\\\":{\\\"v\\\":3,\\\"d\\\":\\\"\\\"}},\\\"vm\\\":{\\\"stackLimit\\\":{\\\"v\\\":1024,\\\"d\\\":\\\"Maximum size of VM stack allowed\\\"},\\\"callCreateDepth\\\":{\\\"v\\\":1024,\\\"d\\\":\\\"Maximum depth of call/create stack\\\"},\\\"maxExtraDataSize\\\":{\\\"v\\\":32,\\\"d\\\":\\\"Maximum size extra data may be after Genesis\\\"}},\\\"pow\\\":{\\\"minimumDifficulty\\\":{\\\"v\\\":131072,\\\"d\\\":\\\"The minimum that the difficulty may ever be\\\"},\\\"difficultyBoundDivisor\\\":{\\\"v\\\":2048,\\\"d\\\":\\\"The bound divisor of the difficulty, used in the update calculations\\\"},\\\"durationLimit\\\":{\\\"v\\\":13,\\\"d\\\":\\\"The decision boundary on the blocktime duration used to determine whether difficulty should go up or not\\\"},\\\"epochDuration\\\":{\\\"v\\\":30000,\\\"d\\\":\\\"Duration between proof-of-work epochs\\\"},\\\"timebombPeriod\\\":{\\\"v\\\":100000,\\\"d\\\":\\\"Exponential difficulty timebomb period\\\"},\\\"minerReward\\\":{\\\"v\\\":\\\"5000000000000000000\\\",\\\"d\\\":\\\"the amount a miner get rewarded for mining a block\\\"}},\\\"casper\\\":{},\\\"sharding\\\":{}}\");\n        /***/\n      },\n\n      /***/\n      \"./node_modules/ethereumjs-common/dist/hardforks/constantinople.json\":\n      /*!***************************************************************************!*\\\n        !*** ./node_modules/ethereumjs-common/dist/hardforks/constantinople.json ***!\n        \\***************************************************************************/\n\n      /*! exports provided: name, comment, eip, gasConfig, gasPrices, vm, pow, casper, sharding, default */\n\n      /***/\n      function node_modulesEthereumjsCommonDistHardforksConstantinopleJson(module) {\n        module.exports = JSON.parse(\"{\\\"name\\\":\\\"constantinople\\\",\\\"comment\\\":\\\"Postponed hardfork including EIP-1283 (SSTORE gas metering changes)\\\",\\\"eip\\\":{\\\"url\\\":\\\"https://eips.ethereum.org/EIPS/eip-1013\\\",\\\"status\\\":\\\"Final\\\"},\\\"gasConfig\\\":{},\\\"gasPrices\\\":{\\\"netSstoreNoopGas\\\":{\\\"v\\\":200,\\\"d\\\":\\\"Once per SSTORE operation if the value doesn't change\\\"},\\\"netSstoreInitGas\\\":{\\\"v\\\":20000,\\\"d\\\":\\\"Once per SSTORE operation from clean zero\\\"},\\\"netSstoreCleanGas\\\":{\\\"v\\\":5000,\\\"d\\\":\\\"Once per SSTORE operation from clean non-zero\\\"},\\\"netSstoreDirtyGas\\\":{\\\"v\\\":200,\\\"d\\\":\\\"Once per SSTORE operation from dirty\\\"},\\\"netSstoreClearRefund\\\":{\\\"v\\\":15000,\\\"d\\\":\\\"Once per SSTORE operation for clearing an originally existing storage slot\\\"},\\\"netSstoreResetRefund\\\":{\\\"v\\\":4800,\\\"d\\\":\\\"Once per SSTORE operation for resetting to the original non-zero value\\\"},\\\"netSstoreResetClearRefund\\\":{\\\"v\\\":19800,\\\"d\\\":\\\"Once per SSTORE operation for resetting to the original zero value\\\"}},\\\"vm\\\":{},\\\"pow\\\":{\\\"minerReward\\\":{\\\"v\\\":\\\"2000000000000000000\\\",\\\"d\\\":\\\"The amount a miner gets rewarded for mining a block\\\"}},\\\"casper\\\":{},\\\"sharding\\\":{}}\");\n        /***/\n      },\n\n      /***/\n      \"./node_modules/ethereumjs-common/dist/hardforks/dao.json\":\n      /*!****************************************************************!*\\\n        !*** ./node_modules/ethereumjs-common/dist/hardforks/dao.json ***!\n        \\****************************************************************/\n\n      /*! exports provided: name, comment, eip, gasConfig, gasPrices, vm, pow, casper, sharding, default */\n\n      /***/\n      function node_modulesEthereumjsCommonDistHardforksDaoJson(module) {\n        module.exports = JSON.parse(\"{\\\"name\\\":\\\"dao\\\",\\\"comment\\\":\\\"DAO rescue hardfork\\\",\\\"eip\\\":{\\\"url\\\":\\\"https://eips.ethereum.org/EIPS/eip-779\\\",\\\"status\\\":\\\"Final\\\"},\\\"gasConfig\\\":{},\\\"gasPrices\\\":{},\\\"vm\\\":{},\\\"pow\\\":{},\\\"casper\\\":{},\\\"sharding\\\":{}}\");\n        /***/\n      },\n\n      /***/\n      \"./node_modules/ethereumjs-common/dist/hardforks/homestead.json\":\n      /*!**********************************************************************!*\\\n        !*** ./node_modules/ethereumjs-common/dist/hardforks/homestead.json ***!\n        \\**********************************************************************/\n\n      /*! exports provided: name, comment, eip, gasConfig, gasPrices, vm, pow, casper, sharding, default */\n\n      /***/\n      function node_modulesEthereumjsCommonDistHardforksHomesteadJson(module) {\n        module.exports = JSON.parse(\"{\\\"name\\\":\\\"homestead\\\",\\\"comment\\\":\\\"Homestead hardfork with protocol and network changes\\\",\\\"eip\\\":{\\\"url\\\":\\\"https://eips.ethereum.org/EIPS/eip-606\\\",\\\"status\\\":\\\"Final\\\"},\\\"gasConfig\\\":{},\\\"gasPrices\\\":{},\\\"vm\\\":{},\\\"pow\\\":{},\\\"casper\\\":{},\\\"sharding\\\":{}}\");\n        /***/\n      },\n\n      /***/\n      \"./node_modules/ethereumjs-common/dist/hardforks/index.js\":\n      /*!****************************************************************!*\\\n        !*** ./node_modules/ethereumjs-common/dist/hardforks/index.js ***!\n        \\****************************************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesEthereumjsCommonDistHardforksIndexJs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.hardforks = void 0;\n        exports.hardforks = [['chainstart', __webpack_require__(\n        /*! ./chainstart.json */\n        \"./node_modules/ethereumjs-common/dist/hardforks/chainstart.json\")], ['homestead', __webpack_require__(\n        /*! ./homestead.json */\n        \"./node_modules/ethereumjs-common/dist/hardforks/homestead.json\")], ['dao', __webpack_require__(\n        /*! ./dao.json */\n        \"./node_modules/ethereumjs-common/dist/hardforks/dao.json\")], ['tangerineWhistle', __webpack_require__(\n        /*! ./tangerineWhistle.json */\n        \"./node_modules/ethereumjs-common/dist/hardforks/tangerineWhistle.json\")], ['spuriousDragon', __webpack_require__(\n        /*! ./spuriousDragon.json */\n        \"./node_modules/ethereumjs-common/dist/hardforks/spuriousDragon.json\")], ['byzantium', __webpack_require__(\n        /*! ./byzantium.json */\n        \"./node_modules/ethereumjs-common/dist/hardforks/byzantium.json\")], ['constantinople', __webpack_require__(\n        /*! ./constantinople.json */\n        \"./node_modules/ethereumjs-common/dist/hardforks/constantinople.json\")], ['petersburg', __webpack_require__(\n        /*! ./petersburg.json */\n        \"./node_modules/ethereumjs-common/dist/hardforks/petersburg.json\")], ['istanbul', __webpack_require__(\n        /*! ./istanbul.json */\n        \"./node_modules/ethereumjs-common/dist/hardforks/istanbul.json\")], ['muirGlacier', __webpack_require__(\n        /*! ./muirGlacier.json */\n        \"./node_modules/ethereumjs-common/dist/hardforks/muirGlacier.json\")]];\n        /***/\n      },\n\n      /***/\n      \"./node_modules/ethereumjs-common/dist/hardforks/istanbul.json\":\n      /*!*********************************************************************!*\\\n        !*** ./node_modules/ethereumjs-common/dist/hardforks/istanbul.json ***!\n        \\*********************************************************************/\n\n      /*! exports provided: name, comment, eip, gasConfig, gasPrices, vm, pow, casper, sharding, default */\n\n      /***/\n      function node_modulesEthereumjsCommonDistHardforksIstanbulJson(module) {\n        module.exports = JSON.parse(\"{\\\"name\\\":\\\"istanbul\\\",\\\"comment\\\":\\\"HF targeted for December 2019 following the Constantinople/Petersburg HF\\\",\\\"eip\\\":{\\\"url\\\":\\\"https://eips.ethereum.org/EIPS/eip-1679\\\",\\\"status\\\":\\\"Draft\\\"},\\\"gasConfig\\\":{},\\\"gasPrices\\\":{\\\"blake2Round\\\":{\\\"v\\\":1,\\\"d\\\":\\\"Gas cost per round for the Blake2 F precompile\\\"},\\\"ecAdd\\\":{\\\"v\\\":150,\\\"d\\\":\\\"Gas costs for curve addition precompile\\\"},\\\"ecMul\\\":{\\\"v\\\":6000,\\\"d\\\":\\\"Gas costs for curve multiplication precompile\\\"},\\\"ecPairing\\\":{\\\"v\\\":45000,\\\"d\\\":\\\"Base gas costs for curve pairing precompile\\\"},\\\"ecPairingWord\\\":{\\\"v\\\":34000,\\\"d\\\":\\\"Gas costs regarding curve pairing precompile input length\\\"},\\\"txDataNonZero\\\":{\\\"v\\\":16,\\\"d\\\":\\\"Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions\\\"},\\\"sstoreSentryGasEIP2200\\\":{\\\"v\\\":2300,\\\"d\\\":\\\"Minimum gas required to be present for an SSTORE call, not consumed\\\"},\\\"sstoreNoopGasEIP2200\\\":{\\\"v\\\":800,\\\"d\\\":\\\"Once per SSTORE operation if the value doesn't change\\\"},\\\"sstoreDirtyGasEIP2200\\\":{\\\"v\\\":800,\\\"d\\\":\\\"Once per SSTORE operation if a dirty value is changed\\\"},\\\"sstoreInitGasEIP2200\\\":{\\\"v\\\":20000,\\\"d\\\":\\\"Once per SSTORE operation from clean zero to non-zero\\\"},\\\"sstoreInitRefundEIP2200\\\":{\\\"v\\\":19200,\\\"d\\\":\\\"Once per SSTORE operation for resetting to the original zero value\\\"},\\\"sstoreCleanGasEIP2200\\\":{\\\"v\\\":5000,\\\"d\\\":\\\"Once per SSTORE operation from clean non-zero to something else\\\"},\\\"sstoreCleanRefundEIP2200\\\":{\\\"v\\\":4200,\\\"d\\\":\\\"Once per SSTORE operation for resetting to the original non-zero value\\\"},\\\"sstoreClearRefundEIP2200\\\":{\\\"v\\\":15000,\\\"d\\\":\\\"Once per SSTORE operation for clearing an originally existing storage slot\\\"}},\\\"vm\\\":{},\\\"pow\\\":{},\\\"casper\\\":{},\\\"sharding\\\":{}}\");\n        /***/\n      },\n\n      /***/\n      \"./node_modules/ethereumjs-common/dist/hardforks/muirGlacier.json\":\n      /*!************************************************************************!*\\\n        !*** ./node_modules/ethereumjs-common/dist/hardforks/muirGlacier.json ***!\n        \\************************************************************************/\n\n      /*! exports provided: name, comment, eip, gasConfig, gasPrices, vm, pow, casper, sharding, default */\n\n      /***/\n      function node_modulesEthereumjsCommonDistHardforksMuirGlacierJson(module) {\n        module.exports = JSON.parse(\"{\\\"name\\\":\\\"muirGlacier\\\",\\\"comment\\\":\\\"HF to delay the difficulty bomb\\\",\\\"eip\\\":{\\\"url\\\":\\\"https://eips.ethereum.org/EIPS/eip-2384\\\",\\\"status\\\":\\\"Last Call\\\"},\\\"gasConfig\\\":{},\\\"gasPrices\\\":{},\\\"vm\\\":{},\\\"pow\\\":{},\\\"casper\\\":{},\\\"sharding\\\":{}}\");\n        /***/\n      },\n\n      /***/\n      \"./node_modules/ethereumjs-common/dist/hardforks/petersburg.json\":\n      /*!***********************************************************************!*\\\n        !*** ./node_modules/ethereumjs-common/dist/hardforks/petersburg.json ***!\n        \\***********************************************************************/\n\n      /*! exports provided: name, comment, eip, gasConfig, gasPrices, vm, pow, casper, sharding, default */\n\n      /***/\n      function node_modulesEthereumjsCommonDistHardforksPetersburgJson(module) {\n        module.exports = JSON.parse(\"{\\\"name\\\":\\\"petersburg\\\",\\\"comment\\\":\\\"Aka constantinopleFix, removes EIP-1283, activate together with or after constantinople\\\",\\\"eip\\\":{\\\"url\\\":\\\"https://eips.ethereum.org/EIPS/eip-1716\\\",\\\"status\\\":\\\"Draft\\\"},\\\"gasConfig\\\":{},\\\"gasPrices\\\":{\\\"netSstoreNoopGas\\\":{\\\"v\\\":null,\\\"d\\\":\\\"Removed along EIP-1283\\\"},\\\"netSstoreInitGas\\\":{\\\"v\\\":null,\\\"d\\\":\\\"Removed along EIP-1283\\\"},\\\"netSstoreCleanGas\\\":{\\\"v\\\":null,\\\"d\\\":\\\"Removed along EIP-1283\\\"},\\\"netSstoreDirtyGas\\\":{\\\"v\\\":null,\\\"d\\\":\\\"Removed along EIP-1283\\\"},\\\"netSstoreClearRefund\\\":{\\\"v\\\":null,\\\"d\\\":\\\"Removed along EIP-1283\\\"},\\\"netSstoreResetRefund\\\":{\\\"v\\\":null,\\\"d\\\":\\\"Removed along EIP-1283\\\"},\\\"netSstoreResetClearRefund\\\":{\\\"v\\\":null,\\\"d\\\":\\\"Removed along EIP-1283\\\"}},\\\"vm\\\":{},\\\"pow\\\":{},\\\"casper\\\":{},\\\"sharding\\\":{}}\");\n        /***/\n      },\n\n      /***/\n      \"./node_modules/ethereumjs-common/dist/hardforks/spuriousDragon.json\":\n      /*!***************************************************************************!*\\\n        !*** ./node_modules/ethereumjs-common/dist/hardforks/spuriousDragon.json ***!\n        \\***************************************************************************/\n\n      /*! exports provided: name, comment, eip, gasConfig, gasPrices, vm, pow, casper, sharding, default */\n\n      /***/\n      function node_modulesEthereumjsCommonDistHardforksSpuriousDragonJson(module) {\n        module.exports = JSON.parse(\"{\\\"name\\\":\\\"spuriousDragon\\\",\\\"comment\\\":\\\"HF with EIPs for simple replay attack protection, EXP cost increase, state trie clearing, contract code size limit\\\",\\\"eip\\\":{\\\"url\\\":\\\"https://eips.ethereum.org/EIPS/eip-607\\\",\\\"status\\\":\\\"Final\\\"},\\\"gasConfig\\\":{},\\\"gasPrices\\\":{\\\"expByte\\\":{\\\"v\\\":50,\\\"d\\\":\\\"Times ceil(log256(exponent)) for the EXP instruction\\\"}},\\\"vm\\\":{\\\"maxCodeSize\\\":{\\\"v\\\":24576,\\\"d\\\":\\\"Maximum length of contract code\\\"}},\\\"pow\\\":{},\\\"casper\\\":{},\\\"sharding\\\":{}}\");\n        /***/\n      },\n\n      /***/\n      \"./node_modules/ethereumjs-common/dist/hardforks/tangerineWhistle.json\":\n      /*!*****************************************************************************!*\\\n        !*** ./node_modules/ethereumjs-common/dist/hardforks/tangerineWhistle.json ***!\n        \\*****************************************************************************/\n\n      /*! exports provided: name, comment, eip, gasConfig, gasPrices, vm, pow, casper, sharding, default */\n\n      /***/\n      function node_modulesEthereumjsCommonDistHardforksTangerineWhistleJson(module) {\n        module.exports = JSON.parse(\"{\\\"name\\\":\\\"tangerineWhistle\\\",\\\"comment\\\":\\\"Hardfork with gas cost changes for IO-heavy operations\\\",\\\"eip\\\":{\\\"url\\\":\\\"https://eips.ethereum.org/EIPS/eip-608\\\",\\\"status\\\":\\\"Final\\\"},\\\"gasConfig\\\":{},\\\"gasPrices\\\":{\\\"sload\\\":{\\\"v\\\":200,\\\"d\\\":\\\"Once per SLOAD operation\\\"},\\\"call\\\":{\\\"v\\\":700,\\\"d\\\":\\\"Once per CALL operation & message call transaction\\\"}},\\\"vm\\\":{},\\\"pow\\\":{},\\\"casper\\\":{},\\\"sharding\\\":{}}\");\n        /***/\n      },\n\n      /***/\n      \"./node_modules/ethereumjs-common/dist/index.js\":\n      /*!******************************************************!*\\\n        !*** ./node_modules/ethereumjs-common/dist/index.js ***!\n        \\******************************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesEthereumjsCommonDistIndexJs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        var __assign = this && this.__assign || function () {\n          __assign = Object.assign || function (t) {\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\n              s = arguments[i];\n\n              for (var p in s) {\n                if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n              }\n            }\n\n            return t;\n          };\n\n          return __assign.apply(this, arguments);\n        };\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n\n        var chains_1 = __webpack_require__(\n        /*! ./chains */\n        \"./node_modules/ethereumjs-common/dist/chains/index.js\");\n\n        var hardforks_1 = __webpack_require__(\n        /*! ./hardforks */\n        \"./node_modules/ethereumjs-common/dist/hardforks/index.js\");\n        /**\n         * Common class to access chain and hardfork parameters\n         */\n\n\n        var Common =\n        /** @class */\n        function () {\n          /**\n           * @constructor\n           * @param chain String ('mainnet') or Number (1) chain\n           * @param hardfork String identifier ('byzantium') for hardfork (optional)\n           * @param supportedHardforks Limit parameter returns to the given hardforks (optional)\n           */\n          function Common(chain, hardfork, supportedHardforks) {\n            this._chainParams = this.setChain(chain);\n            this._hardfork = null;\n            this._supportedHardforks = supportedHardforks === undefined ? [] : supportedHardforks;\n\n            if (hardfork) {\n              this.setHardfork(hardfork);\n            }\n          }\n          /**\n           * Creates a Common object for a custom chain, based on a standard one. It uses all the [[Chain]]\n           * params from [[baseChain]] except the ones overridden in [[customChainParams]].\n           *\n           * @param baseChain The name (`mainnet`) or id (`1`) of a standard chain used to base the custom\n           * chain params on.\n           * @param customChainParams The custom parameters of the chain.\n           * @param hardfork String identifier ('byzantium') for hardfork (optional)\n           * @param supportedHardforks Limit parameter returns to the given hardforks (optional)\n           */\n\n\n          Common.forCustomChain = function (baseChain, customChainParams, hardfork, supportedHardforks) {\n            var standardChainParams = Common._getChainParams(baseChain);\n\n            return new Common(__assign(__assign({}, standardChainParams), customChainParams), hardfork, supportedHardforks);\n          };\n\n          Common._getChainParams = function (chain) {\n            if (typeof chain === 'number') {\n              if (chains_1.chains['names'][chain]) {\n                return chains_1.chains[chains_1.chains['names'][chain]];\n              }\n\n              throw new Error(\"Chain with ID \" + chain + \" not supported\");\n            }\n\n            if (chains_1.chains[chain]) {\n              return chains_1.chains[chain];\n            }\n\n            throw new Error(\"Chain with name \" + chain + \" not supported\");\n          };\n          /**\n           * Sets the chain\n           * @param chain String ('mainnet') or Number (1) chain\n           *     representation. Or, a Dictionary of chain parameters for a private network.\n           * @returns The dictionary with parameters set as chain\n           */\n\n\n          Common.prototype.setChain = function (chain) {\n            if (typeof chain === 'number' || typeof chain === 'string') {\n              this._chainParams = Common._getChainParams(chain);\n            } else if (typeof chain === 'object') {\n              var required = ['networkId', 'genesis', 'hardforks', 'bootstrapNodes'];\n\n              for (var _i = 0, required_1 = required; _i < required_1.length; _i++) {\n                var param = required_1[_i];\n\n                if (chain[param] === undefined) {\n                  throw new Error(\"Missing required chain parameter: \" + param);\n                }\n              }\n\n              this._chainParams = chain;\n            } else {\n              throw new Error('Wrong input format');\n            }\n\n            return this._chainParams;\n          };\n          /**\n           * Sets the hardfork to get params for\n           * @param hardfork String identifier ('byzantium')\n           */\n\n\n          Common.prototype.setHardfork = function (hardfork) {\n            if (!this._isSupportedHardfork(hardfork)) {\n              throw new Error(\"Hardfork \" + hardfork + \" not set as supported in supportedHardforks\");\n            }\n\n            var changed = false;\n\n            for (var _i = 0, hardforkChanges_1 = hardforks_1.hardforks; _i < hardforkChanges_1.length; _i++) {\n              var hfChanges = hardforkChanges_1[_i];\n\n              if (hfChanges[0] === hardfork) {\n                this._hardfork = hardfork;\n                changed = true;\n              }\n            }\n\n            if (!changed) {\n              throw new Error(\"Hardfork with name \" + hardfork + \" not supported\");\n            }\n          };\n          /**\n           * Internal helper function to choose between hardfork set and hardfork provided as param\n           * @param hardfork Hardfork given to function as a parameter\n           * @returns Hardfork chosen to be used\n           */\n\n\n          Common.prototype._chooseHardfork = function (hardfork, onlySupported) {\n            onlySupported = onlySupported === undefined ? true : onlySupported;\n\n            if (!hardfork) {\n              if (!this._hardfork) {\n                throw new Error('Method called with neither a hardfork set nor provided by param');\n              } else {\n                hardfork = this._hardfork;\n              }\n            } else if (onlySupported && !this._isSupportedHardfork(hardfork)) {\n              throw new Error(\"Hardfork \" + hardfork + \" not set as supported in supportedHardforks\");\n            }\n\n            return hardfork;\n          };\n          /**\n           * Internal helper function, returns the params for the given hardfork for the chain set\n           * @param hardfork Hardfork name\n           * @returns Dictionary with hardfork params\n           */\n\n\n          Common.prototype._getHardfork = function (hardfork) {\n            var hfs = this.hardforks();\n\n            for (var _i = 0, hfs_1 = hfs; _i < hfs_1.length; _i++) {\n              var hf = hfs_1[_i];\n              if (hf['name'] === hardfork) return hf;\n            }\n\n            throw new Error(\"Hardfork \" + hardfork + \" not defined for chain \" + this.chainName());\n          };\n          /**\n           * Internal helper function to check if a hardfork is set to be supported by the library\n           * @param hardfork Hardfork name\n           * @returns True if hardfork is supported\n           */\n\n\n          Common.prototype._isSupportedHardfork = function (hardfork) {\n            if (this._supportedHardforks.length > 0) {\n              for (var _i = 0, _a = this._supportedHardforks; _i < _a.length; _i++) {\n                var supportedHf = _a[_i];\n                if (hardfork === supportedHf) return true;\n              }\n            } else {\n              return true;\n            }\n\n            return false;\n          };\n          /**\n           * Returns the parameter corresponding to a hardfork\n           * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow', 'casper', 'sharding')\n           * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n           * @param hardfork Hardfork name, optional if hardfork set\n           */\n\n\n          Common.prototype.param = function (topic, name, hardfork) {\n            hardfork = this._chooseHardfork(hardfork);\n            var value;\n\n            for (var _i = 0, hardforkChanges_2 = hardforks_1.hardforks; _i < hardforkChanges_2.length; _i++) {\n              var hfChanges = hardforkChanges_2[_i];\n\n              if (!hfChanges[1][topic]) {\n                throw new Error(\"Topic \" + topic + \" not defined\");\n              }\n\n              if (hfChanges[1][topic][name] !== undefined) {\n                value = hfChanges[1][topic][name].v;\n              }\n\n              if (hfChanges[0] === hardfork) break;\n            }\n\n            if (value === undefined) {\n              throw new Error(topic + \" value for \" + name + \" not found\");\n            }\n\n            return value;\n          };\n          /**\n           * Returns a parameter for the hardfork active on block number\n           * @param topic Parameter topic\n           * @param name Parameter name\n           * @param blockNumber Block number\n           */\n\n\n          Common.prototype.paramByBlock = function (topic, name, blockNumber) {\n            var activeHfs = this.activeHardforks(blockNumber);\n            var hardfork = activeHfs[activeHfs.length - 1]['name'];\n            return this.param(topic, name, hardfork);\n          };\n          /**\n           * Checks if set or provided hardfork is active on block number\n           * @param hardfork Hardfork name or null (for HF set)\n           * @param blockNumber\n           * @param opts Hardfork options (onlyActive unused)\n           * @returns True if HF is active on block number\n           */\n\n\n          Common.prototype.hardforkIsActiveOnBlock = function (hardfork, blockNumber, opts) {\n            opts = opts !== undefined ? opts : {};\n            var onlySupported = opts.onlySupported === undefined ? false : opts.onlySupported;\n            hardfork = this._chooseHardfork(hardfork, onlySupported);\n            var hfBlock = this.hardforkBlock(hardfork);\n            if (hfBlock !== null && blockNumber >= hfBlock) return true;\n            return false;\n          };\n          /**\n           * Alias to hardforkIsActiveOnBlock when hardfork is set\n           * @param blockNumber\n           * @param opts Hardfork options (onlyActive unused)\n           * @returns True if HF is active on block number\n           */\n\n\n          Common.prototype.activeOnBlock = function (blockNumber, opts) {\n            return this.hardforkIsActiveOnBlock(null, blockNumber, opts);\n          };\n          /**\n           * Sequence based check if given or set HF1 is greater than or equal HF2\n           * @param hardfork1 Hardfork name or null (if set)\n           * @param hardfork2 Hardfork name\n           * @param opts Hardfork options\n           * @returns True if HF1 gte HF2\n           */\n\n\n          Common.prototype.hardforkGteHardfork = function (hardfork1, hardfork2, opts) {\n            opts = opts !== undefined ? opts : {};\n            var onlyActive = opts.onlyActive === undefined ? false : opts.onlyActive;\n            hardfork1 = this._chooseHardfork(hardfork1, opts.onlySupported);\n            var hardforks;\n\n            if (onlyActive) {\n              hardforks = this.activeHardforks(null, opts);\n            } else {\n              hardforks = this.hardforks();\n            }\n\n            var posHf1 = -1,\n                posHf2 = -1;\n            var index = 0;\n\n            for (var _i = 0, hardforks_2 = hardforks; _i < hardforks_2.length; _i++) {\n              var hf = hardforks_2[_i];\n              if (hf['name'] === hardfork1) posHf1 = index;\n              if (hf['name'] === hardfork2) posHf2 = index;\n              index += 1;\n            }\n\n            return posHf1 >= posHf2;\n          };\n          /**\n           * Alias to hardforkGteHardfork when hardfork is set\n           * @param hardfork Hardfork name\n           * @param opts Hardfork options\n           * @returns True if hardfork set is greater than hardfork provided\n           */\n\n\n          Common.prototype.gteHardfork = function (hardfork, opts) {\n            return this.hardforkGteHardfork(null, hardfork, opts);\n          };\n          /**\n           * Checks if given or set hardfork is active on the chain\n           * @param hardfork Hardfork name, optional if HF set\n           * @param opts Hardfork options (onlyActive unused)\n           * @returns True if hardfork is active on the chain\n           */\n\n\n          Common.prototype.hardforkIsActiveOnChain = function (hardfork, opts) {\n            opts = opts !== undefined ? opts : {};\n            var onlySupported = opts.onlySupported === undefined ? false : opts.onlySupported;\n            hardfork = this._chooseHardfork(hardfork, onlySupported);\n\n            for (var _i = 0, _a = this.hardforks(); _i < _a.length; _i++) {\n              var hf = _a[_i];\n              if (hf['name'] === hardfork && hf['block'] !== null) return true;\n            }\n\n            return false;\n          };\n          /**\n           * Returns the active hardfork switches for the current chain\n           * @param blockNumber up to block if provided, otherwise for the whole chain\n           * @param opts Hardfork options (onlyActive unused)\n           * @return Array with hardfork arrays\n           */\n\n\n          Common.prototype.activeHardforks = function (blockNumber, opts) {\n            opts = opts !== undefined ? opts : {};\n            var activeHardforks = [];\n            var hfs = this.hardforks();\n\n            for (var _i = 0, hfs_2 = hfs; _i < hfs_2.length; _i++) {\n              var hf = hfs_2[_i];\n              if (hf['block'] === null) continue;\n              if (blockNumber !== undefined && blockNumber !== null && blockNumber < hf['block']) break;\n              if (opts.onlySupported && !this._isSupportedHardfork(hf['name'])) continue;\n              activeHardforks.push(hf);\n            }\n\n            return activeHardforks;\n          };\n          /**\n           * Returns the latest active hardfork name for chain or block or throws if unavailable\n           * @param blockNumber up to block if provided, otherwise for the whole chain\n           * @param opts Hardfork options (onlyActive unused)\n           * @return Hardfork name\n           */\n\n\n          Common.prototype.activeHardfork = function (blockNumber, opts) {\n            opts = opts !== undefined ? opts : {};\n            var activeHardforks = this.activeHardforks(blockNumber, opts);\n\n            if (activeHardforks.length > 0) {\n              return activeHardforks[activeHardforks.length - 1]['name'];\n            } else {\n              throw new Error(\"No (supported) active hardfork found\");\n            }\n          };\n          /**\n           * Returns the hardfork change block for hardfork provided or set\n           * @param hardfork Hardfork name, optional if HF set\n           * @returns Block number\n           */\n\n\n          Common.prototype.hardforkBlock = function (hardfork) {\n            hardfork = this._chooseHardfork(hardfork, false);\n            return this._getHardfork(hardfork)['block'];\n          };\n          /**\n           * True if block number provided is the hardfork (given or set) change block of the current chain\n           * @param blockNumber Number of the block to check\n           * @param hardfork Hardfork name, optional if HF set\n           * @returns True if blockNumber is HF block\n           */\n\n\n          Common.prototype.isHardforkBlock = function (blockNumber, hardfork) {\n            hardfork = this._chooseHardfork(hardfork, false);\n\n            if (this.hardforkBlock(hardfork) === blockNumber) {\n              return true;\n            } else {\n              return false;\n            }\n          };\n          /**\n           * Provide the consensus type for the hardfork set or provided as param\n           * @param hardfork Hardfork name, optional if hardfork set\n           * @returns Consensus type (e.g. 'pow', 'poa')\n           */\n\n\n          Common.prototype.consensus = function (hardfork) {\n            hardfork = this._chooseHardfork(hardfork);\n            return this._getHardfork(hardfork)['consensus'];\n          };\n          /**\n           * Provide the finality type for the hardfork set or provided as param\n           * @param {String} hardfork Hardfork name, optional if hardfork set\n           * @returns {String} Finality type (e.g. 'pos', null of no finality)\n           */\n\n\n          Common.prototype.finality = function (hardfork) {\n            hardfork = this._chooseHardfork(hardfork);\n            return this._getHardfork(hardfork)['finality'];\n          };\n          /**\n           * Returns the Genesis parameters of current chain\n           * @returns Genesis dictionary\n           */\n\n\n          Common.prototype.genesis = function () {\n            return this._chainParams['genesis'];\n          };\n          /**\n           * Returns the hardforks for current chain\n           * @returns {Array} Array with arrays of hardforks\n           */\n\n\n          Common.prototype.hardforks = function () {\n            return this._chainParams['hardforks'];\n          };\n          /**\n           * Returns bootstrap nodes for the current chain\n           * @returns {Dictionary} Dict with bootstrap nodes\n           */\n\n\n          Common.prototype.bootstrapNodes = function () {\n            return this._chainParams['bootstrapNodes'];\n          };\n          /**\n           * Returns the hardfork set\n           * @returns Hardfork name\n           */\n\n\n          Common.prototype.hardfork = function () {\n            return this._hardfork;\n          };\n          /**\n           * Returns the Id of current chain\n           * @returns chain Id\n           */\n\n\n          Common.prototype.chainId = function () {\n            return this._chainParams['chainId'];\n          };\n          /**\n           * Returns the name of current chain\n           * @returns chain name (lower case)\n           */\n\n\n          Common.prototype.chainName = function () {\n            return chains_1.chains['names'][this.chainId()] || this._chainParams['name'];\n          };\n          /**\n           * Returns the Id of current network\n           * @returns network Id\n           */\n\n\n          Common.prototype.networkId = function () {\n            return this._chainParams['networkId'];\n          };\n\n          return Common;\n        }();\n\n        exports.default = Common;\n        /***/\n      },\n\n      /***/\n      \"./node_modules/ieee754/index.js\":\n      /*!***************************************!*\\\n        !*** ./node_modules/ieee754/index.js ***!\n        \\***************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesIeee754IndexJs(module, exports) {\n        /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\n        exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n          var e, m;\n          var eLen = nBytes * 8 - mLen - 1;\n          var eMax = (1 << eLen) - 1;\n          var eBias = eMax >> 1;\n          var nBits = -7;\n          var i = isLE ? nBytes - 1 : 0;\n          var d = isLE ? -1 : 1;\n          var s = buffer[offset + i];\n          i += d;\n          e = s & (1 << -nBits) - 1;\n          s >>= -nBits;\n          nBits += eLen;\n\n          for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n          m = e & (1 << -nBits) - 1;\n          e >>= -nBits;\n          nBits += mLen;\n\n          for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n          if (e === 0) {\n            e = 1 - eBias;\n          } else if (e === eMax) {\n            return m ? NaN : (s ? -1 : 1) * Infinity;\n          } else {\n            m = m + Math.pow(2, mLen);\n            e = e - eBias;\n          }\n\n          return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\n        };\n\n        exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n          var e, m, c;\n          var eLen = nBytes * 8 - mLen - 1;\n          var eMax = (1 << eLen) - 1;\n          var eBias = eMax >> 1;\n          var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;\n          var i = isLE ? 0 : nBytes - 1;\n          var d = isLE ? 1 : -1;\n          var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n          value = Math.abs(value);\n\n          if (isNaN(value) || value === Infinity) {\n            m = isNaN(value) ? 1 : 0;\n            e = eMax;\n          } else {\n            e = Math.floor(Math.log(value) / Math.LN2);\n\n            if (value * (c = Math.pow(2, -e)) < 1) {\n              e--;\n              c *= 2;\n            }\n\n            if (e + eBias >= 1) {\n              value += rt / c;\n            } else {\n              value += rt * Math.pow(2, 1 - eBias);\n            }\n\n            if (value * c >= 2) {\n              e++;\n              c /= 2;\n            }\n\n            if (e + eBias >= eMax) {\n              m = 0;\n              e = eMax;\n            } else if (e + eBias >= 1) {\n              m = (value * c - 1) * Math.pow(2, mLen);\n              e = e + eBias;\n            } else {\n              m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n              e = 0;\n            }\n          }\n\n          for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n          e = e << mLen | m;\n          eLen += mLen;\n\n          for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n          buffer[offset + i - d] |= s * 128;\n        };\n        /***/\n\n      },\n\n      /***/\n      \"./node_modules/ms/index.js\":\n      /*!**********************************!*\\\n        !*** ./node_modules/ms/index.js ***!\n        \\**********************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesMsIndexJs(module, exports) {\n        /**\n         * Helpers.\n         */\n        var s = 1000;\n        var m = s * 60;\n        var h = m * 60;\n        var d = h * 24;\n        var w = d * 7;\n        var y = d * 365.25;\n        /**\n         * Parse or format the given `val`.\n         *\n         * Options:\n         *\n         *  - `long` verbose formatting [false]\n         *\n         * @param {String|Number} val\n         * @param {Object} [options]\n         * @throws {Error} throw an error if val is not a non-empty string or a number\n         * @return {String|Number}\n         * @api public\n         */\n\n        module.exports = function (val, options) {\n          options = options || {};\n          var type = typeof val;\n\n          if (type === 'string' && val.length > 0) {\n            return parse(val);\n          } else if (type === 'number' && isFinite(val)) {\n            return options.long ? fmtLong(val) : fmtShort(val);\n          }\n\n          throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));\n        };\n        /**\n         * Parse the given `str` and return milliseconds.\n         *\n         * @param {String} str\n         * @return {Number}\n         * @api private\n         */\n\n\n        function parse(str) {\n          str = String(str);\n\n          if (str.length > 100) {\n            return;\n          }\n\n          var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);\n\n          if (!match) {\n            return;\n          }\n\n          var n = parseFloat(match[1]);\n          var type = (match[2] || 'ms').toLowerCase();\n\n          switch (type) {\n            case 'years':\n            case 'year':\n            case 'yrs':\n            case 'yr':\n            case 'y':\n              return n * y;\n\n            case 'weeks':\n            case 'week':\n            case 'w':\n              return n * w;\n\n            case 'days':\n            case 'day':\n            case 'd':\n              return n * d;\n\n            case 'hours':\n            case 'hour':\n            case 'hrs':\n            case 'hr':\n            case 'h':\n              return n * h;\n\n            case 'minutes':\n            case 'minute':\n            case 'mins':\n            case 'min':\n            case 'm':\n              return n * m;\n\n            case 'seconds':\n            case 'second':\n            case 'secs':\n            case 'sec':\n            case 's':\n              return n * s;\n\n            case 'milliseconds':\n            case 'millisecond':\n            case 'msecs':\n            case 'msec':\n            case 'ms':\n              return n;\n\n            default:\n              return undefined;\n          }\n        }\n        /**\n         * Short format for `ms`.\n         *\n         * @param {Number} ms\n         * @return {String}\n         * @api private\n         */\n\n\n        function fmtShort(ms) {\n          var msAbs = Math.abs(ms);\n\n          if (msAbs >= d) {\n            return Math.round(ms / d) + 'd';\n          }\n\n          if (msAbs >= h) {\n            return Math.round(ms / h) + 'h';\n          }\n\n          if (msAbs >= m) {\n            return Math.round(ms / m) + 'm';\n          }\n\n          if (msAbs >= s) {\n            return Math.round(ms / s) + 's';\n          }\n\n          return ms + 'ms';\n        }\n        /**\n         * Long format for `ms`.\n         *\n         * @param {Number} ms\n         * @return {String}\n         * @api private\n         */\n\n\n        function fmtLong(ms) {\n          var msAbs = Math.abs(ms);\n\n          if (msAbs >= d) {\n            return plural(ms, msAbs, d, 'day');\n          }\n\n          if (msAbs >= h) {\n            return plural(ms, msAbs, h, 'hour');\n          }\n\n          if (msAbs >= m) {\n            return plural(ms, msAbs, m, 'minute');\n          }\n\n          if (msAbs >= s) {\n            return plural(ms, msAbs, s, 'second');\n          }\n\n          return ms + ' ms';\n        }\n        /**\n         * Pluralization helper.\n         */\n\n\n        function plural(ms, msAbs, n, name) {\n          var isPlural = msAbs >= n * 1.5;\n          return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n        }\n        /***/\n\n      },\n\n      /***/\n      \"./node_modules/node-libs-browser/node_modules/buffer/index.js\":\n      /*!*********************************************************************!*\\\n        !*** ./node_modules/node-libs-browser/node_modules/buffer/index.js ***!\n        \\*********************************************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesNodeLibsBrowserNode_modulesBufferIndexJs(module, exports, __webpack_require__) {\n        \"use strict\";\n        /* WEBPACK VAR INJECTION */\n\n        (function (global) {\n          /*!\n          * The buffer module from node.js, for the browser.\n          *\n          * @author   Feross Aboukhadijeh <http://feross.org>\n          * @license  MIT\n          */\n\n          /* eslint-disable no-proto */\n          var base64 = __webpack_require__(\n          /*! base64-js */\n          \"./node_modules/base64-js/index.js\");\n\n          var ieee754 = __webpack_require__(\n          /*! ieee754 */\n          \"./node_modules/ieee754/index.js\");\n\n          var isArray = __webpack_require__(\n          /*! isarray */\n          \"./node_modules/node-libs-browser/node_modules/isarray/index.js\");\n\n          exports.Buffer = Buffer;\n          exports.SlowBuffer = SlowBuffer;\n          exports.INSPECT_MAX_BYTES = 50;\n          /**\n           * If `Buffer.TYPED_ARRAY_SUPPORT`:\n           *   === true    Use Uint8Array implementation (fastest)\n           *   === false   Use Object implementation (most compatible, even IE6)\n           *\n           * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n           * Opera 11.6+, iOS 4.2+.\n           *\n           * Due to various browser bugs, sometimes the Object implementation will be used even\n           * when the browser supports typed arrays.\n           *\n           * Note:\n           *\n           *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n           *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n           *\n           *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n           *\n           *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n           *     incorrect length in some situations.\n          \n           * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n           * get the Object implementation, which is slower but behaves correctly.\n           */\n\n          Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined ? global.TYPED_ARRAY_SUPPORT : typedArraySupport();\n          /*\n           * Export kMaxLength after typed array support is determined.\n           */\n\n          exports.kMaxLength = kMaxLength();\n\n          function typedArraySupport() {\n            try {\n              var arr = new Uint8Array(1);\n              arr.__proto__ = {\n                __proto__: Uint8Array.prototype,\n                foo: function foo() {\n                  return 42;\n                }\n              };\n              return arr.foo() === 42 && // typed array instances can be augmented\n              typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n              arr.subarray(1, 1).byteLength === 0; // ie10 has broken `subarray`\n            } catch (e) {\n              return false;\n            }\n          }\n\n          function kMaxLength() {\n            return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;\n          }\n\n          function createBuffer(that, length) {\n            if (kMaxLength() < length) {\n              throw new RangeError('Invalid typed array length');\n            }\n\n            if (Buffer.TYPED_ARRAY_SUPPORT) {\n              // Return an augmented `Uint8Array` instance, for best performance\n              that = new Uint8Array(length);\n              that.__proto__ = Buffer.prototype;\n            } else {\n              // Fallback: Return an object instance of the Buffer class\n              if (that === null) {\n                that = new Buffer(length);\n              }\n\n              that.length = length;\n            }\n\n            return that;\n          }\n          /**\n           * The Buffer constructor returns instances of `Uint8Array` that have their\n           * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n           * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n           * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n           * returns a single octet.\n           *\n           * The `Uint8Array` prototype remains unmodified.\n           */\n\n\n          function Buffer(arg, encodingOrOffset, length) {\n            if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n              return new Buffer(arg, encodingOrOffset, length);\n            } // Common case.\n\n\n            if (typeof arg === 'number') {\n              if (typeof encodingOrOffset === 'string') {\n                throw new Error('If encoding is specified then the first argument must be a string');\n              }\n\n              return allocUnsafe(this, arg);\n            }\n\n            return from(this, arg, encodingOrOffset, length);\n          }\n\n          Buffer.poolSize = 8192; // not used by this implementation\n          // TODO: Legacy, not needed anymore. Remove in next major version.\n\n          Buffer._augment = function (arr) {\n            arr.__proto__ = Buffer.prototype;\n            return arr;\n          };\n\n          function from(that, value, encodingOrOffset, length) {\n            if (typeof value === 'number') {\n              throw new TypeError('\"value\" argument must not be a number');\n            }\n\n            if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n              return fromArrayBuffer(that, value, encodingOrOffset, length);\n            }\n\n            if (typeof value === 'string') {\n              return fromString(that, value, encodingOrOffset);\n            }\n\n            return fromObject(that, value);\n          }\n          /**\n           * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n           * if value is a number.\n           * Buffer.from(str[, encoding])\n           * Buffer.from(array)\n           * Buffer.from(buffer)\n           * Buffer.from(arrayBuffer[, byteOffset[, length]])\n           **/\n\n\n          Buffer.from = function (value, encodingOrOffset, length) {\n            return from(null, value, encodingOrOffset, length);\n          };\n\n          if (Buffer.TYPED_ARRAY_SUPPORT) {\n            Buffer.prototype.__proto__ = Uint8Array.prototype;\n            Buffer.__proto__ = Uint8Array;\n\n            if (typeof Symbol !== 'undefined' && Symbol.species && Buffer[Symbol.species] === Buffer) {\n              // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n              Object.defineProperty(Buffer, Symbol.species, {\n                value: null,\n                configurable: true\n              });\n            }\n          }\n\n          function assertSize(size) {\n            if (typeof size !== 'number') {\n              throw new TypeError('\"size\" argument must be a number');\n            } else if (size < 0) {\n              throw new RangeError('\"size\" argument must not be negative');\n            }\n          }\n\n          function alloc(that, size, fill, encoding) {\n            assertSize(size);\n\n            if (size <= 0) {\n              return createBuffer(that, size);\n            }\n\n            if (fill !== undefined) {\n              // Only pay attention to encoding if it's a string. This\n              // prevents accidentally sending in a number that would\n              // be interpretted as a start offset.\n              return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);\n            }\n\n            return createBuffer(that, size);\n          }\n          /**\n           * Creates a new filled Buffer instance.\n           * alloc(size[, fill[, encoding]])\n           **/\n\n\n          Buffer.alloc = function (size, fill, encoding) {\n            return alloc(null, size, fill, encoding);\n          };\n\n          function allocUnsafe(that, size) {\n            assertSize(size);\n            that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);\n\n            if (!Buffer.TYPED_ARRAY_SUPPORT) {\n              for (var i = 0; i < size; ++i) {\n                that[i] = 0;\n              }\n            }\n\n            return that;\n          }\n          /**\n           * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n           * */\n\n\n          Buffer.allocUnsafe = function (size) {\n            return allocUnsafe(null, size);\n          };\n          /**\n           * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n           */\n\n\n          Buffer.allocUnsafeSlow = function (size) {\n            return allocUnsafe(null, size);\n          };\n\n          function fromString(that, string, encoding) {\n            if (typeof encoding !== 'string' || encoding === '') {\n              encoding = 'utf8';\n            }\n\n            if (!Buffer.isEncoding(encoding)) {\n              throw new TypeError('\"encoding\" must be a valid string encoding');\n            }\n\n            var length = byteLength(string, encoding) | 0;\n            that = createBuffer(that, length);\n            var actual = that.write(string, encoding);\n\n            if (actual !== length) {\n              // Writing a hex string, for example, that contains invalid characters will\n              // cause everything after the first invalid character to be ignored. (e.g.\n              // 'abxxcd' will be treated as 'ab')\n              that = that.slice(0, actual);\n            }\n\n            return that;\n          }\n\n          function fromArrayLike(that, array) {\n            var length = array.length < 0 ? 0 : checked(array.length) | 0;\n            that = createBuffer(that, length);\n\n            for (var i = 0; i < length; i += 1) {\n              that[i] = array[i] & 255;\n            }\n\n            return that;\n          }\n\n          function fromArrayBuffer(that, array, byteOffset, length) {\n            array.byteLength; // this throws if `array` is not a valid ArrayBuffer\n\n            if (byteOffset < 0 || array.byteLength < byteOffset) {\n              throw new RangeError('\\'offset\\' is out of bounds');\n            }\n\n            if (array.byteLength < byteOffset + (length || 0)) {\n              throw new RangeError('\\'length\\' is out of bounds');\n            }\n\n            if (byteOffset === undefined && length === undefined) {\n              array = new Uint8Array(array);\n            } else if (length === undefined) {\n              array = new Uint8Array(array, byteOffset);\n            } else {\n              array = new Uint8Array(array, byteOffset, length);\n            }\n\n            if (Buffer.TYPED_ARRAY_SUPPORT) {\n              // Return an augmented `Uint8Array` instance, for best performance\n              that = array;\n              that.__proto__ = Buffer.prototype;\n            } else {\n              // Fallback: Return an object instance of the Buffer class\n              that = fromArrayLike(that, array);\n            }\n\n            return that;\n          }\n\n          function fromObject(that, obj) {\n            if (Buffer.isBuffer(obj)) {\n              var len = checked(obj.length) | 0;\n              that = createBuffer(that, len);\n\n              if (that.length === 0) {\n                return that;\n              }\n\n              obj.copy(that, 0, 0, len);\n              return that;\n            }\n\n            if (obj) {\n              if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {\n                if (typeof obj.length !== 'number' || isnan(obj.length)) {\n                  return createBuffer(that, 0);\n                }\n\n                return fromArrayLike(that, obj);\n              }\n\n              if (obj.type === 'Buffer' && isArray(obj.data)) {\n                return fromArrayLike(that, obj.data);\n              }\n            }\n\n            throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');\n          }\n\n          function checked(length) {\n            // Note: cannot use `length < kMaxLength()` here because that fails when\n            // length is NaN (which is otherwise coerced to zero.)\n            if (length >= kMaxLength()) {\n              throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');\n            }\n\n            return length | 0;\n          }\n\n          function SlowBuffer(length) {\n            if (+length != length) {\n              // eslint-disable-line eqeqeq\n              length = 0;\n            }\n\n            return Buffer.alloc(+length);\n          }\n\n          Buffer.isBuffer = function isBuffer(b) {\n            return !!(b != null && b._isBuffer);\n          };\n\n          Buffer.compare = function compare(a, b) {\n            if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n              throw new TypeError('Arguments must be Buffers');\n            }\n\n            if (a === b) return 0;\n            var x = a.length;\n            var y = b.length;\n\n            for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n              if (a[i] !== b[i]) {\n                x = a[i];\n                y = b[i];\n                break;\n              }\n            }\n\n            if (x < y) return -1;\n            if (y < x) return 1;\n            return 0;\n          };\n\n          Buffer.isEncoding = function isEncoding(encoding) {\n            switch (String(encoding).toLowerCase()) {\n              case 'hex':\n              case 'utf8':\n              case 'utf-8':\n              case 'ascii':\n              case 'latin1':\n              case 'binary':\n              case 'base64':\n              case 'ucs2':\n              case 'ucs-2':\n              case 'utf16le':\n              case 'utf-16le':\n                return true;\n\n              default:\n                return false;\n            }\n          };\n\n          Buffer.concat = function concat(list, length) {\n            if (!isArray(list)) {\n              throw new TypeError('\"list\" argument must be an Array of Buffers');\n            }\n\n            if (list.length === 0) {\n              return Buffer.alloc(0);\n            }\n\n            var i;\n\n            if (length === undefined) {\n              length = 0;\n\n              for (i = 0; i < list.length; ++i) {\n                length += list[i].length;\n              }\n            }\n\n            var buffer = Buffer.allocUnsafe(length);\n            var pos = 0;\n\n            for (i = 0; i < list.length; ++i) {\n              var buf = list[i];\n\n              if (!Buffer.isBuffer(buf)) {\n                throw new TypeError('\"list\" argument must be an Array of Buffers');\n              }\n\n              buf.copy(buffer, pos);\n              pos += buf.length;\n            }\n\n            return buffer;\n          };\n\n          function byteLength(string, encoding) {\n            if (Buffer.isBuffer(string)) {\n              return string.length;\n            }\n\n            if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n              return string.byteLength;\n            }\n\n            if (typeof string !== 'string') {\n              string = '' + string;\n            }\n\n            var len = string.length;\n            if (len === 0) return 0; // Use a for loop to avoid recursion\n\n            var loweredCase = false;\n\n            for (;;) {\n              switch (encoding) {\n                case 'ascii':\n                case 'latin1':\n                case 'binary':\n                  return len;\n\n                case 'utf8':\n                case 'utf-8':\n                case undefined:\n                  return utf8ToBytes(string).length;\n\n                case 'ucs2':\n                case 'ucs-2':\n                case 'utf16le':\n                case 'utf-16le':\n                  return len * 2;\n\n                case 'hex':\n                  return len >>> 1;\n\n                case 'base64':\n                  return base64ToBytes(string).length;\n\n                default:\n                  if (loweredCase) return utf8ToBytes(string).length; // assume utf8\n\n                  encoding = ('' + encoding).toLowerCase();\n                  loweredCase = true;\n              }\n            }\n          }\n\n          Buffer.byteLength = byteLength;\n\n          function slowToString(encoding, start, end) {\n            var loweredCase = false; // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n            // property of a typed array.\n            // This behaves neither like String nor Uint8Array in that we set start/end\n            // to their upper/lower bounds if the value passed is out of range.\n            // undefined is handled specially as per ECMA-262 6th Edition,\n            // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n\n            if (start === undefined || start < 0) {\n              start = 0;\n            } // Return early if start > this.length. Done here to prevent potential uint32\n            // coercion fail below.\n\n\n            if (start > this.length) {\n              return '';\n            }\n\n            if (end === undefined || end > this.length) {\n              end = this.length;\n            }\n\n            if (end <= 0) {\n              return '';\n            } // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n\n\n            end >>>= 0;\n            start >>>= 0;\n\n            if (end <= start) {\n              return '';\n            }\n\n            if (!encoding) encoding = 'utf8';\n\n            while (true) {\n              switch (encoding) {\n                case 'hex':\n                  return hexSlice(this, start, end);\n\n                case 'utf8':\n                case 'utf-8':\n                  return utf8Slice(this, start, end);\n\n                case 'ascii':\n                  return asciiSlice(this, start, end);\n\n                case 'latin1':\n                case 'binary':\n                  return latin1Slice(this, start, end);\n\n                case 'base64':\n                  return base64Slice(this, start, end);\n\n                case 'ucs2':\n                case 'ucs-2':\n                case 'utf16le':\n                case 'utf-16le':\n                  return utf16leSlice(this, start, end);\n\n                default:\n                  if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);\n                  encoding = (encoding + '').toLowerCase();\n                  loweredCase = true;\n              }\n            }\n          } // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n          // Buffer instances.\n\n\n          Buffer.prototype._isBuffer = true;\n\n          function swap(b, n, m) {\n            var i = b[n];\n            b[n] = b[m];\n            b[m] = i;\n          }\n\n          Buffer.prototype.swap16 = function swap16() {\n            var len = this.length;\n\n            if (len % 2 !== 0) {\n              throw new RangeError('Buffer size must be a multiple of 16-bits');\n            }\n\n            for (var i = 0; i < len; i += 2) {\n              swap(this, i, i + 1);\n            }\n\n            return this;\n          };\n\n          Buffer.prototype.swap32 = function swap32() {\n            var len = this.length;\n\n            if (len % 4 !== 0) {\n              throw new RangeError('Buffer size must be a multiple of 32-bits');\n            }\n\n            for (var i = 0; i < len; i += 4) {\n              swap(this, i, i + 3);\n              swap(this, i + 1, i + 2);\n            }\n\n            return this;\n          };\n\n          Buffer.prototype.swap64 = function swap64() {\n            var len = this.length;\n\n            if (len % 8 !== 0) {\n              throw new RangeError('Buffer size must be a multiple of 64-bits');\n            }\n\n            for (var i = 0; i < len; i += 8) {\n              swap(this, i, i + 7);\n              swap(this, i + 1, i + 6);\n              swap(this, i + 2, i + 5);\n              swap(this, i + 3, i + 4);\n            }\n\n            return this;\n          };\n\n          Buffer.prototype.toString = function toString() {\n            var length = this.length | 0;\n            if (length === 0) return '';\n            if (arguments.length === 0) return utf8Slice(this, 0, length);\n            return slowToString.apply(this, arguments);\n          };\n\n          Buffer.prototype.equals = function equals(b) {\n            if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');\n            if (this === b) return true;\n            return Buffer.compare(this, b) === 0;\n          };\n\n          Buffer.prototype.inspect = function inspect() {\n            var str = '';\n            var max = exports.INSPECT_MAX_BYTES;\n\n            if (this.length > 0) {\n              str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');\n              if (this.length > max) str += ' ... ';\n            }\n\n            return '<Buffer ' + str + '>';\n          };\n\n          Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {\n            if (!Buffer.isBuffer(target)) {\n              throw new TypeError('Argument must be a Buffer');\n            }\n\n            if (start === undefined) {\n              start = 0;\n            }\n\n            if (end === undefined) {\n              end = target ? target.length : 0;\n            }\n\n            if (thisStart === undefined) {\n              thisStart = 0;\n            }\n\n            if (thisEnd === undefined) {\n              thisEnd = this.length;\n            }\n\n            if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n              throw new RangeError('out of range index');\n            }\n\n            if (thisStart >= thisEnd && start >= end) {\n              return 0;\n            }\n\n            if (thisStart >= thisEnd) {\n              return -1;\n            }\n\n            if (start >= end) {\n              return 1;\n            }\n\n            start >>>= 0;\n            end >>>= 0;\n            thisStart >>>= 0;\n            thisEnd >>>= 0;\n            if (this === target) return 0;\n            var x = thisEnd - thisStart;\n            var y = end - start;\n            var len = Math.min(x, y);\n            var thisCopy = this.slice(thisStart, thisEnd);\n            var targetCopy = target.slice(start, end);\n\n            for (var i = 0; i < len; ++i) {\n              if (thisCopy[i] !== targetCopy[i]) {\n                x = thisCopy[i];\n                y = targetCopy[i];\n                break;\n              }\n            }\n\n            if (x < y) return -1;\n            if (y < x) return 1;\n            return 0;\n          }; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n          // OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n          //\n          // Arguments:\n          // - buffer - a Buffer to search\n          // - val - a string, Buffer, or number\n          // - byteOffset - an index into `buffer`; will be clamped to an int32\n          // - encoding - an optional encoding, relevant is val is a string\n          // - dir - true for indexOf, false for lastIndexOf\n\n\n          function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {\n            // Empty buffer means no match\n            if (buffer.length === 0) return -1; // Normalize byteOffset\n\n            if (typeof byteOffset === 'string') {\n              encoding = byteOffset;\n              byteOffset = 0;\n            } else if (byteOffset > 0x7fffffff) {\n              byteOffset = 0x7fffffff;\n            } else if (byteOffset < -0x80000000) {\n              byteOffset = -0x80000000;\n            }\n\n            byteOffset = +byteOffset; // Coerce to Number.\n\n            if (isNaN(byteOffset)) {\n              // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n              byteOffset = dir ? 0 : buffer.length - 1;\n            } // Normalize byteOffset: negative offsets start from the end of the buffer\n\n\n            if (byteOffset < 0) byteOffset = buffer.length + byteOffset;\n\n            if (byteOffset >= buffer.length) {\n              if (dir) return -1;else byteOffset = buffer.length - 1;\n            } else if (byteOffset < 0) {\n              if (dir) byteOffset = 0;else return -1;\n            } // Normalize val\n\n\n            if (typeof val === 'string') {\n              val = Buffer.from(val, encoding);\n            } // Finally, search either indexOf (if dir is true) or lastIndexOf\n\n\n            if (Buffer.isBuffer(val)) {\n              // Special case: looking for empty string/buffer always fails\n              if (val.length === 0) {\n                return -1;\n              }\n\n              return arrayIndexOf(buffer, val, byteOffset, encoding, dir);\n            } else if (typeof val === 'number') {\n              val = val & 0xFF; // Search for a byte value [0-255]\n\n              if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {\n                if (dir) {\n                  return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);\n                } else {\n                  return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);\n                }\n              }\n\n              return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);\n            }\n\n            throw new TypeError('val must be string, number or Buffer');\n          }\n\n          function arrayIndexOf(arr, val, byteOffset, encoding, dir) {\n            var indexSize = 1;\n            var arrLength = arr.length;\n            var valLength = val.length;\n\n            if (encoding !== undefined) {\n              encoding = String(encoding).toLowerCase();\n\n              if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {\n                if (arr.length < 2 || val.length < 2) {\n                  return -1;\n                }\n\n                indexSize = 2;\n                arrLength /= 2;\n                valLength /= 2;\n                byteOffset /= 2;\n              }\n            }\n\n            function read(buf, i) {\n              if (indexSize === 1) {\n                return buf[i];\n              } else {\n                return buf.readUInt16BE(i * indexSize);\n              }\n            }\n\n            var i;\n\n            if (dir) {\n              var foundIndex = -1;\n\n              for (i = byteOffset; i < arrLength; i++) {\n                if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n                  if (foundIndex === -1) foundIndex = i;\n                  if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;\n                } else {\n                  if (foundIndex !== -1) i -= i - foundIndex;\n                  foundIndex = -1;\n                }\n              }\n            } else {\n              if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;\n\n              for (i = byteOffset; i >= 0; i--) {\n                var found = true;\n\n                for (var j = 0; j < valLength; j++) {\n                  if (read(arr, i + j) !== read(val, j)) {\n                    found = false;\n                    break;\n                  }\n                }\n\n                if (found) return i;\n              }\n            }\n\n            return -1;\n          }\n\n          Buffer.prototype.includes = function includes(val, byteOffset, encoding) {\n            return this.indexOf(val, byteOffset, encoding) !== -1;\n          };\n\n          Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {\n            return bidirectionalIndexOf(this, val, byteOffset, encoding, true);\n          };\n\n          Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {\n            return bidirectionalIndexOf(this, val, byteOffset, encoding, false);\n          };\n\n          function hexWrite(buf, string, offset, length) {\n            offset = Number(offset) || 0;\n            var remaining = buf.length - offset;\n\n            if (!length) {\n              length = remaining;\n            } else {\n              length = Number(length);\n\n              if (length > remaining) {\n                length = remaining;\n              }\n            } // must be an even number of digits\n\n\n            var strLen = string.length;\n            if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');\n\n            if (length > strLen / 2) {\n              length = strLen / 2;\n            }\n\n            for (var i = 0; i < length; ++i) {\n              var parsed = parseInt(string.substr(i * 2, 2), 16);\n              if (isNaN(parsed)) return i;\n              buf[offset + i] = parsed;\n            }\n\n            return i;\n          }\n\n          function utf8Write(buf, string, offset, length) {\n            return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);\n          }\n\n          function asciiWrite(buf, string, offset, length) {\n            return blitBuffer(asciiToBytes(string), buf, offset, length);\n          }\n\n          function latin1Write(buf, string, offset, length) {\n            return asciiWrite(buf, string, offset, length);\n          }\n\n          function base64Write(buf, string, offset, length) {\n            return blitBuffer(base64ToBytes(string), buf, offset, length);\n          }\n\n          function ucs2Write(buf, string, offset, length) {\n            return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);\n          }\n\n          Buffer.prototype.write = function write(string, offset, length, encoding) {\n            // Buffer#write(string)\n            if (offset === undefined) {\n              encoding = 'utf8';\n              length = this.length;\n              offset = 0; // Buffer#write(string, encoding)\n            } else if (length === undefined && typeof offset === 'string') {\n              encoding = offset;\n              length = this.length;\n              offset = 0; // Buffer#write(string, offset[, length][, encoding])\n            } else if (isFinite(offset)) {\n              offset = offset | 0;\n\n              if (isFinite(length)) {\n                length = length | 0;\n                if (encoding === undefined) encoding = 'utf8';\n              } else {\n                encoding = length;\n                length = undefined;\n              } // legacy write(string, encoding, offset, length) - remove in v0.13\n\n            } else {\n              throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');\n            }\n\n            var remaining = this.length - offset;\n            if (length === undefined || length > remaining) length = remaining;\n\n            if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {\n              throw new RangeError('Attempt to write outside buffer bounds');\n            }\n\n            if (!encoding) encoding = 'utf8';\n            var loweredCase = false;\n\n            for (;;) {\n              switch (encoding) {\n                case 'hex':\n                  return hexWrite(this, string, offset, length);\n\n                case 'utf8':\n                case 'utf-8':\n                  return utf8Write(this, string, offset, length);\n\n                case 'ascii':\n                  return asciiWrite(this, string, offset, length);\n\n                case 'latin1':\n                case 'binary':\n                  return latin1Write(this, string, offset, length);\n\n                case 'base64':\n                  // Warning: maxLength not taken into account in base64Write\n                  return base64Write(this, string, offset, length);\n\n                case 'ucs2':\n                case 'ucs-2':\n                case 'utf16le':\n                case 'utf-16le':\n                  return ucs2Write(this, string, offset, length);\n\n                default:\n                  if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);\n                  encoding = ('' + encoding).toLowerCase();\n                  loweredCase = true;\n              }\n            }\n          };\n\n          Buffer.prototype.toJSON = function toJSON() {\n            return {\n              type: 'Buffer',\n              data: Array.prototype.slice.call(this._arr || this, 0)\n            };\n          };\n\n          function base64Slice(buf, start, end) {\n            if (start === 0 && end === buf.length) {\n              return base64.fromByteArray(buf);\n            } else {\n              return base64.fromByteArray(buf.slice(start, end));\n            }\n          }\n\n          function utf8Slice(buf, start, end) {\n            end = Math.min(buf.length, end);\n            var res = [];\n            var i = start;\n\n            while (i < end) {\n              var firstByte = buf[i];\n              var codePoint = null;\n              var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;\n\n              if (i + bytesPerSequence <= end) {\n                var secondByte, thirdByte, fourthByte, tempCodePoint;\n\n                switch (bytesPerSequence) {\n                  case 1:\n                    if (firstByte < 0x80) {\n                      codePoint = firstByte;\n                    }\n\n                    break;\n\n                  case 2:\n                    secondByte = buf[i + 1];\n\n                    if ((secondByte & 0xC0) === 0x80) {\n                      tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;\n\n                      if (tempCodePoint > 0x7F) {\n                        codePoint = tempCodePoint;\n                      }\n                    }\n\n                    break;\n\n                  case 3:\n                    secondByte = buf[i + 1];\n                    thirdByte = buf[i + 2];\n\n                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n                      tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;\n\n                      if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n                        codePoint = tempCodePoint;\n                      }\n                    }\n\n                    break;\n\n                  case 4:\n                    secondByte = buf[i + 1];\n                    thirdByte = buf[i + 2];\n                    fourthByte = buf[i + 3];\n\n                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n                      tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;\n\n                      if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n                        codePoint = tempCodePoint;\n                      }\n                    }\n\n                }\n              }\n\n              if (codePoint === null) {\n                // we did not generate a valid codePoint so insert a\n                // replacement char (U+FFFD) and advance only 1 byte\n                codePoint = 0xFFFD;\n                bytesPerSequence = 1;\n              } else if (codePoint > 0xFFFF) {\n                // encode to utf16 (surrogate pair dance)\n                codePoint -= 0x10000;\n                res.push(codePoint >>> 10 & 0x3FF | 0xD800);\n                codePoint = 0xDC00 | codePoint & 0x3FF;\n              }\n\n              res.push(codePoint);\n              i += bytesPerSequence;\n            }\n\n            return decodeCodePointsArray(res);\n          } // Based on http://stackoverflow.com/a/22747272/680742, the browser with\n          // the lowest limit is Chrome, with 0x10000 args.\n          // We go 1 magnitude less, for safety\n\n\n          var MAX_ARGUMENTS_LENGTH = 0x1000;\n\n          function decodeCodePointsArray(codePoints) {\n            var len = codePoints.length;\n\n            if (len <= MAX_ARGUMENTS_LENGTH) {\n              return String.fromCharCode.apply(String, codePoints); // avoid extra slice()\n            } // Decode in chunks to avoid \"call stack size exceeded\".\n\n\n            var res = '';\n            var i = 0;\n\n            while (i < len) {\n              res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));\n            }\n\n            return res;\n          }\n\n          function asciiSlice(buf, start, end) {\n            var ret = '';\n            end = Math.min(buf.length, end);\n\n            for (var i = start; i < end; ++i) {\n              ret += String.fromCharCode(buf[i] & 0x7F);\n            }\n\n            return ret;\n          }\n\n          function latin1Slice(buf, start, end) {\n            var ret = '';\n            end = Math.min(buf.length, end);\n\n            for (var i = start; i < end; ++i) {\n              ret += String.fromCharCode(buf[i]);\n            }\n\n            return ret;\n          }\n\n          function hexSlice(buf, start, end) {\n            var len = buf.length;\n            if (!start || start < 0) start = 0;\n            if (!end || end < 0 || end > len) end = len;\n            var out = '';\n\n            for (var i = start; i < end; ++i) {\n              out += toHex(buf[i]);\n            }\n\n            return out;\n          }\n\n          function utf16leSlice(buf, start, end) {\n            var bytes = buf.slice(start, end);\n            var res = '';\n\n            for (var i = 0; i < bytes.length; i += 2) {\n              res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\n            }\n\n            return res;\n          }\n\n          Buffer.prototype.slice = function slice(start, end) {\n            var len = this.length;\n            start = ~~start;\n            end = end === undefined ? len : ~~end;\n\n            if (start < 0) {\n              start += len;\n              if (start < 0) start = 0;\n            } else if (start > len) {\n              start = len;\n            }\n\n            if (end < 0) {\n              end += len;\n              if (end < 0) end = 0;\n            } else if (end > len) {\n              end = len;\n            }\n\n            if (end < start) end = start;\n            var newBuf;\n\n            if (Buffer.TYPED_ARRAY_SUPPORT) {\n              newBuf = this.subarray(start, end);\n              newBuf.__proto__ = Buffer.prototype;\n            } else {\n              var sliceLen = end - start;\n              newBuf = new Buffer(sliceLen, undefined);\n\n              for (var i = 0; i < sliceLen; ++i) {\n                newBuf[i] = this[i + start];\n              }\n            }\n\n            return newBuf;\n          };\n          /*\n           * Need to make sure that buffer isn't trying to write out of bounds.\n           */\n\n\n          function checkOffset(offset, ext, length) {\n            if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');\n            if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');\n          }\n\n          Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {\n            offset = offset | 0;\n            byteLength = byteLength | 0;\n            if (!noAssert) checkOffset(offset, byteLength, this.length);\n            var val = this[offset];\n            var mul = 1;\n            var i = 0;\n\n            while (++i < byteLength && (mul *= 0x100)) {\n              val += this[offset + i] * mul;\n            }\n\n            return val;\n          };\n\n          Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {\n            offset = offset | 0;\n            byteLength = byteLength | 0;\n\n            if (!noAssert) {\n              checkOffset(offset, byteLength, this.length);\n            }\n\n            var val = this[offset + --byteLength];\n            var mul = 1;\n\n            while (byteLength > 0 && (mul *= 0x100)) {\n              val += this[offset + --byteLength] * mul;\n            }\n\n            return val;\n          };\n\n          Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {\n            if (!noAssert) checkOffset(offset, 1, this.length);\n            return this[offset];\n          };\n\n          Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {\n            if (!noAssert) checkOffset(offset, 2, this.length);\n            return this[offset] | this[offset + 1] << 8;\n          };\n\n          Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {\n            if (!noAssert) checkOffset(offset, 2, this.length);\n            return this[offset] << 8 | this[offset + 1];\n          };\n\n          Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {\n            if (!noAssert) checkOffset(offset, 4, this.length);\n            return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;\n          };\n\n          Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {\n            if (!noAssert) checkOffset(offset, 4, this.length);\n            return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);\n          };\n\n          Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {\n            offset = offset | 0;\n            byteLength = byteLength | 0;\n            if (!noAssert) checkOffset(offset, byteLength, this.length);\n            var val = this[offset];\n            var mul = 1;\n            var i = 0;\n\n            while (++i < byteLength && (mul *= 0x100)) {\n              val += this[offset + i] * mul;\n            }\n\n            mul *= 0x80;\n            if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n            return val;\n          };\n\n          Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {\n            offset = offset | 0;\n            byteLength = byteLength | 0;\n            if (!noAssert) checkOffset(offset, byteLength, this.length);\n            var i = byteLength;\n            var mul = 1;\n            var val = this[offset + --i];\n\n            while (i > 0 && (mul *= 0x100)) {\n              val += this[offset + --i] * mul;\n            }\n\n            mul *= 0x80;\n            if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n            return val;\n          };\n\n          Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {\n            if (!noAssert) checkOffset(offset, 1, this.length);\n            if (!(this[offset] & 0x80)) return this[offset];\n            return (0xff - this[offset] + 1) * -1;\n          };\n\n          Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {\n            if (!noAssert) checkOffset(offset, 2, this.length);\n            var val = this[offset] | this[offset + 1] << 8;\n            return val & 0x8000 ? val | 0xFFFF0000 : val;\n          };\n\n          Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {\n            if (!noAssert) checkOffset(offset, 2, this.length);\n            var val = this[offset + 1] | this[offset] << 8;\n            return val & 0x8000 ? val | 0xFFFF0000 : val;\n          };\n\n          Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {\n            if (!noAssert) checkOffset(offset, 4, this.length);\n            return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;\n          };\n\n          Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {\n            if (!noAssert) checkOffset(offset, 4, this.length);\n            return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];\n          };\n\n          Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {\n            if (!noAssert) checkOffset(offset, 4, this.length);\n            return ieee754.read(this, offset, true, 23, 4);\n          };\n\n          Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {\n            if (!noAssert) checkOffset(offset, 4, this.length);\n            return ieee754.read(this, offset, false, 23, 4);\n          };\n\n          Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {\n            if (!noAssert) checkOffset(offset, 8, this.length);\n            return ieee754.read(this, offset, true, 52, 8);\n          };\n\n          Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {\n            if (!noAssert) checkOffset(offset, 8, this.length);\n            return ieee754.read(this, offset, false, 52, 8);\n          };\n\n          function checkInt(buf, value, offset, ext, max, min) {\n            if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance');\n            if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds');\n            if (offset + ext > buf.length) throw new RangeError('Index out of range');\n          }\n\n          Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {\n            value = +value;\n            offset = offset | 0;\n            byteLength = byteLength | 0;\n\n            if (!noAssert) {\n              var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n              checkInt(this, value, offset, byteLength, maxBytes, 0);\n            }\n\n            var mul = 1;\n            var i = 0;\n            this[offset] = value & 0xFF;\n\n            while (++i < byteLength && (mul *= 0x100)) {\n              this[offset + i] = value / mul & 0xFF;\n            }\n\n            return offset + byteLength;\n          };\n\n          Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {\n            value = +value;\n            offset = offset | 0;\n            byteLength = byteLength | 0;\n\n            if (!noAssert) {\n              var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n              checkInt(this, value, offset, byteLength, maxBytes, 0);\n            }\n\n            var i = byteLength - 1;\n            var mul = 1;\n            this[offset + i] = value & 0xFF;\n\n            while (--i >= 0 && (mul *= 0x100)) {\n              this[offset + i] = value / mul & 0xFF;\n            }\n\n            return offset + byteLength;\n          };\n\n          Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {\n            value = +value;\n            offset = offset | 0;\n            if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);\n            if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);\n            this[offset] = value & 0xff;\n            return offset + 1;\n          };\n\n          function objectWriteUInt16(buf, value, offset, littleEndian) {\n            if (value < 0) value = 0xffff + value + 1;\n\n            for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n              buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;\n            }\n          }\n\n          Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {\n            value = +value;\n            offset = offset | 0;\n            if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n\n            if (Buffer.TYPED_ARRAY_SUPPORT) {\n              this[offset] = value & 0xff;\n              this[offset + 1] = value >>> 8;\n            } else {\n              objectWriteUInt16(this, value, offset, true);\n            }\n\n            return offset + 2;\n          };\n\n          Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {\n            value = +value;\n            offset = offset | 0;\n            if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n\n            if (Buffer.TYPED_ARRAY_SUPPORT) {\n              this[offset] = value >>> 8;\n              this[offset + 1] = value & 0xff;\n            } else {\n              objectWriteUInt16(this, value, offset, false);\n            }\n\n            return offset + 2;\n          };\n\n          function objectWriteUInt32(buf, value, offset, littleEndian) {\n            if (value < 0) value = 0xffffffff + value + 1;\n\n            for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n              buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;\n            }\n          }\n\n          Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {\n            value = +value;\n            offset = offset | 0;\n            if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n\n            if (Buffer.TYPED_ARRAY_SUPPORT) {\n              this[offset + 3] = value >>> 24;\n              this[offset + 2] = value >>> 16;\n              this[offset + 1] = value >>> 8;\n              this[offset] = value & 0xff;\n            } else {\n              objectWriteUInt32(this, value, offset, true);\n            }\n\n            return offset + 4;\n          };\n\n          Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {\n            value = +value;\n            offset = offset | 0;\n            if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n\n            if (Buffer.TYPED_ARRAY_SUPPORT) {\n              this[offset] = value >>> 24;\n              this[offset + 1] = value >>> 16;\n              this[offset + 2] = value >>> 8;\n              this[offset + 3] = value & 0xff;\n            } else {\n              objectWriteUInt32(this, value, offset, false);\n            }\n\n            return offset + 4;\n          };\n\n          Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {\n            value = +value;\n            offset = offset | 0;\n\n            if (!noAssert) {\n              var limit = Math.pow(2, 8 * byteLength - 1);\n              checkInt(this, value, offset, byteLength, limit - 1, -limit);\n            }\n\n            var i = 0;\n            var mul = 1;\n            var sub = 0;\n            this[offset] = value & 0xFF;\n\n            while (++i < byteLength && (mul *= 0x100)) {\n              if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n                sub = 1;\n              }\n\n              this[offset + i] = (value / mul >> 0) - sub & 0xFF;\n            }\n\n            return offset + byteLength;\n          };\n\n          Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {\n            value = +value;\n            offset = offset | 0;\n\n            if (!noAssert) {\n              var limit = Math.pow(2, 8 * byteLength - 1);\n              checkInt(this, value, offset, byteLength, limit - 1, -limit);\n            }\n\n            var i = byteLength - 1;\n            var mul = 1;\n            var sub = 0;\n            this[offset + i] = value & 0xFF;\n\n            while (--i >= 0 && (mul *= 0x100)) {\n              if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n                sub = 1;\n              }\n\n              this[offset + i] = (value / mul >> 0) - sub & 0xFF;\n            }\n\n            return offset + byteLength;\n          };\n\n          Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {\n            value = +value;\n            offset = offset | 0;\n            if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);\n            if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);\n            if (value < 0) value = 0xff + value + 1;\n            this[offset] = value & 0xff;\n            return offset + 1;\n          };\n\n          Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {\n            value = +value;\n            offset = offset | 0;\n            if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n\n            if (Buffer.TYPED_ARRAY_SUPPORT) {\n              this[offset] = value & 0xff;\n              this[offset + 1] = value >>> 8;\n            } else {\n              objectWriteUInt16(this, value, offset, true);\n            }\n\n            return offset + 2;\n          };\n\n          Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {\n            value = +value;\n            offset = offset | 0;\n            if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n\n            if (Buffer.TYPED_ARRAY_SUPPORT) {\n              this[offset] = value >>> 8;\n              this[offset + 1] = value & 0xff;\n            } else {\n              objectWriteUInt16(this, value, offset, false);\n            }\n\n            return offset + 2;\n          };\n\n          Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {\n            value = +value;\n            offset = offset | 0;\n            if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n\n            if (Buffer.TYPED_ARRAY_SUPPORT) {\n              this[offset] = value & 0xff;\n              this[offset + 1] = value >>> 8;\n              this[offset + 2] = value >>> 16;\n              this[offset + 3] = value >>> 24;\n            } else {\n              objectWriteUInt32(this, value, offset, true);\n            }\n\n            return offset + 4;\n          };\n\n          Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {\n            value = +value;\n            offset = offset | 0;\n            if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n            if (value < 0) value = 0xffffffff + value + 1;\n\n            if (Buffer.TYPED_ARRAY_SUPPORT) {\n              this[offset] = value >>> 24;\n              this[offset + 1] = value >>> 16;\n              this[offset + 2] = value >>> 8;\n              this[offset + 3] = value & 0xff;\n            } else {\n              objectWriteUInt32(this, value, offset, false);\n            }\n\n            return offset + 4;\n          };\n\n          function checkIEEE754(buf, value, offset, ext, max, min) {\n            if (offset + ext > buf.length) throw new RangeError('Index out of range');\n            if (offset < 0) throw new RangeError('Index out of range');\n          }\n\n          function writeFloat(buf, value, offset, littleEndian, noAssert) {\n            if (!noAssert) {\n              checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);\n            }\n\n            ieee754.write(buf, value, offset, littleEndian, 23, 4);\n            return offset + 4;\n          }\n\n          Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {\n            return writeFloat(this, value, offset, true, noAssert);\n          };\n\n          Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {\n            return writeFloat(this, value, offset, false, noAssert);\n          };\n\n          function writeDouble(buf, value, offset, littleEndian, noAssert) {\n            if (!noAssert) {\n              checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);\n            }\n\n            ieee754.write(buf, value, offset, littleEndian, 52, 8);\n            return offset + 8;\n          }\n\n          Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {\n            return writeDouble(this, value, offset, true, noAssert);\n          };\n\n          Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {\n            return writeDouble(this, value, offset, false, noAssert);\n          }; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\n\n\n          Buffer.prototype.copy = function copy(target, targetStart, start, end) {\n            if (!start) start = 0;\n            if (!end && end !== 0) end = this.length;\n            if (targetStart >= target.length) targetStart = target.length;\n            if (!targetStart) targetStart = 0;\n            if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done\n\n            if (end === start) return 0;\n            if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions\n\n            if (targetStart < 0) {\n              throw new RangeError('targetStart out of bounds');\n            }\n\n            if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');\n            if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?\n\n            if (end > this.length) end = this.length;\n\n            if (target.length - targetStart < end - start) {\n              end = target.length - targetStart + start;\n            }\n\n            var len = end - start;\n            var i;\n\n            if (this === target && start < targetStart && targetStart < end) {\n              // descending copy from end\n              for (i = len - 1; i >= 0; --i) {\n                target[i + targetStart] = this[i + start];\n              }\n            } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n              // ascending copy from start\n              for (i = 0; i < len; ++i) {\n                target[i + targetStart] = this[i + start];\n              }\n            } else {\n              Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);\n            }\n\n            return len;\n          }; // Usage:\n          //    buffer.fill(number[, offset[, end]])\n          //    buffer.fill(buffer[, offset[, end]])\n          //    buffer.fill(string[, offset[, end]][, encoding])\n\n\n          Buffer.prototype.fill = function fill(val, start, end, encoding) {\n            // Handle string cases:\n            if (typeof val === 'string') {\n              if (typeof start === 'string') {\n                encoding = start;\n                start = 0;\n                end = this.length;\n              } else if (typeof end === 'string') {\n                encoding = end;\n                end = this.length;\n              }\n\n              if (val.length === 1) {\n                var code = val.charCodeAt(0);\n\n                if (code < 256) {\n                  val = code;\n                }\n              }\n\n              if (encoding !== undefined && typeof encoding !== 'string') {\n                throw new TypeError('encoding must be a string');\n              }\n\n              if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n                throw new TypeError('Unknown encoding: ' + encoding);\n              }\n            } else if (typeof val === 'number') {\n              val = val & 255;\n            } // Invalid ranges are not set to a default, so can range check early.\n\n\n            if (start < 0 || this.length < start || this.length < end) {\n              throw new RangeError('Out of range index');\n            }\n\n            if (end <= start) {\n              return this;\n            }\n\n            start = start >>> 0;\n            end = end === undefined ? this.length : end >>> 0;\n            if (!val) val = 0;\n            var i;\n\n            if (typeof val === 'number') {\n              for (i = start; i < end; ++i) {\n                this[i] = val;\n              }\n            } else {\n              var bytes = Buffer.isBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());\n              var len = bytes.length;\n\n              for (i = 0; i < end - start; ++i) {\n                this[i + start] = bytes[i % len];\n              }\n            }\n\n            return this;\n          }; // HELPER FUNCTIONS\n          // ================\n\n\n          var INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g;\n\n          function base64clean(str) {\n            // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n            str = stringtrim(str).replace(INVALID_BASE64_RE, ''); // Node converts strings with length < 2 to ''\n\n            if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n\n            while (str.length % 4 !== 0) {\n              str = str + '=';\n            }\n\n            return str;\n          }\n\n          function stringtrim(str) {\n            if (str.trim) return str.trim();\n            return str.replace(/^\\s+|\\s+$/g, '');\n          }\n\n          function toHex(n) {\n            if (n < 16) return '0' + n.toString(16);\n            return n.toString(16);\n          }\n\n          function utf8ToBytes(string, units) {\n            units = units || Infinity;\n            var codePoint;\n            var length = string.length;\n            var leadSurrogate = null;\n            var bytes = [];\n\n            for (var i = 0; i < length; ++i) {\n              codePoint = string.charCodeAt(i); // is surrogate component\n\n              if (codePoint > 0xD7FF && codePoint < 0xE000) {\n                // last char was a lead\n                if (!leadSurrogate) {\n                  // no lead yet\n                  if (codePoint > 0xDBFF) {\n                    // unexpected trail\n                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n                    continue;\n                  } else if (i + 1 === length) {\n                    // unpaired lead\n                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n                    continue;\n                  } // valid lead\n\n\n                  leadSurrogate = codePoint;\n                  continue;\n                } // 2 leads in a row\n\n\n                if (codePoint < 0xDC00) {\n                  if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n                  leadSurrogate = codePoint;\n                  continue;\n                } // valid surrogate pair\n\n\n                codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;\n              } else if (leadSurrogate) {\n                // valid bmp char, but last char was a lead\n                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n              }\n\n              leadSurrogate = null; // encode utf8\n\n              if (codePoint < 0x80) {\n                if ((units -= 1) < 0) break;\n                bytes.push(codePoint);\n              } else if (codePoint < 0x800) {\n                if ((units -= 2) < 0) break;\n                bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);\n              } else if (codePoint < 0x10000) {\n                if ((units -= 3) < 0) break;\n                bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\n              } else if (codePoint < 0x110000) {\n                if ((units -= 4) < 0) break;\n                bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\n              } else {\n                throw new Error('Invalid code point');\n              }\n            }\n\n            return bytes;\n          }\n\n          function asciiToBytes(str) {\n            var byteArray = [];\n\n            for (var i = 0; i < str.length; ++i) {\n              // Node's code seems to be doing this and not & 0x7F..\n              byteArray.push(str.charCodeAt(i) & 0xFF);\n            }\n\n            return byteArray;\n          }\n\n          function utf16leToBytes(str, units) {\n            var c, hi, lo;\n            var byteArray = [];\n\n            for (var i = 0; i < str.length; ++i) {\n              if ((units -= 2) < 0) break;\n              c = str.charCodeAt(i);\n              hi = c >> 8;\n              lo = c % 256;\n              byteArray.push(lo);\n              byteArray.push(hi);\n            }\n\n            return byteArray;\n          }\n\n          function base64ToBytes(str) {\n            return base64.toByteArray(base64clean(str));\n          }\n\n          function blitBuffer(src, dst, offset, length) {\n            for (var i = 0; i < length; ++i) {\n              if (i + offset >= dst.length || i >= src.length) break;\n              dst[i + offset] = src[i];\n            }\n\n            return i;\n          }\n\n          function isnan(val) {\n            return val !== val; // eslint-disable-line no-self-compare\n          }\n          /* WEBPACK VAR INJECTION */\n\n        }).call(this, __webpack_require__(\n        /*! ./../../../webpack/buildin/global.js */\n        \"./node_modules/webpack/buildin/global.js\"));\n        /***/\n      },\n\n      /***/\n      \"./node_modules/node-libs-browser/node_modules/isarray/index.js\":\n      /*!**********************************************************************!*\\\n        !*** ./node_modules/node-libs-browser/node_modules/isarray/index.js ***!\n        \\**********************************************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesNodeLibsBrowserNode_modulesIsarrayIndexJs(module, exports) {\n        var toString = {}.toString;\n\n        module.exports = Array.isArray || function (arr) {\n          return toString.call(arr) == '[object Array]';\n        };\n        /***/\n\n      },\n\n      /***/\n      \"./node_modules/node-libs-browser/node_modules/util/node_modules/inherits/inherits_browser.js\":\n      /*!****************************************************************************************************!*\\\n        !*** ./node_modules/node-libs-browser/node_modules/util/node_modules/inherits/inherits_browser.js ***!\n        \\****************************************************************************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesNodeLibsBrowserNode_modulesUtilNode_modulesInheritsInherits_browserJs(module, exports) {\n        if (typeof Object.create === 'function') {\n          // implementation from standard node.js 'util' module\n          module.exports = function inherits(ctor, superCtor) {\n            ctor.super_ = superCtor;\n            ctor.prototype = Object.create(superCtor.prototype, {\n              constructor: {\n                value: ctor,\n                enumerable: false,\n                writable: true,\n                configurable: true\n              }\n            });\n          };\n        } else {\n          // old school shim for old browsers\n          module.exports = function inherits(ctor, superCtor) {\n            ctor.super_ = superCtor;\n\n            var TempCtor = function TempCtor() {};\n\n            TempCtor.prototype = superCtor.prototype;\n            ctor.prototype = new TempCtor();\n            ctor.prototype.constructor = ctor;\n          };\n        }\n        /***/\n\n      },\n\n      /***/\n      \"./node_modules/node-libs-browser/node_modules/util/support/isBufferBrowser.js\":\n      /*!*************************************************************************************!*\\\n        !*** ./node_modules/node-libs-browser/node_modules/util/support/isBufferBrowser.js ***!\n        \\*************************************************************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesNodeLibsBrowserNode_modulesUtilSupportIsBufferBrowserJs(module, exports) {\n        module.exports = function isBuffer(arg) {\n          return arg && typeof arg === 'object' && typeof arg.copy === 'function' && typeof arg.fill === 'function' && typeof arg.readUInt8 === 'function';\n        };\n        /***/\n\n      },\n\n      /***/\n      \"./node_modules/node-libs-browser/node_modules/util/util.js\":\n      /*!******************************************************************!*\\\n        !*** ./node_modules/node-libs-browser/node_modules/util/util.js ***!\n        \\******************************************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesNodeLibsBrowserNode_modulesUtilUtilJs(module, exports, __webpack_require__) {\n        /* WEBPACK VAR INJECTION */\n        (function (process) {\n          // Copyright Joyent, Inc. and other Node contributors.\n          //\n          // Permission is hereby granted, free of charge, to any person obtaining a\n          // copy of this software and associated documentation files (the\n          // \"Software\"), to deal in the Software without restriction, including\n          // without limitation the rights to use, copy, modify, merge, publish,\n          // distribute, sublicense, and/or sell copies of the Software, and to permit\n          // persons to whom the Software is furnished to do so, subject to the\n          // following conditions:\n          //\n          // The above copyright notice and this permission notice shall be included\n          // in all copies or substantial portions of the Software.\n          //\n          // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n          // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n          // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n          // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n          // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n          // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n          // USE OR OTHER DEALINGS IN THE SOFTWARE.\n          var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors(obj) {\n            var keys = Object.keys(obj);\n            var descriptors = {};\n\n            for (var i = 0; i < keys.length; i++) {\n              descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);\n            }\n\n            return descriptors;\n          };\n\n          var formatRegExp = /%[sdj%]/g;\n\n          exports.format = function (f) {\n            if (!isString(f)) {\n              var objects = [];\n\n              for (var i = 0; i < arguments.length; i++) {\n                objects.push(inspect(arguments[i]));\n              }\n\n              return objects.join(' ');\n            }\n\n            var i = 1;\n            var args = arguments;\n            var len = args.length;\n            var str = String(f).replace(formatRegExp, function (x) {\n              if (x === '%%') return '%';\n              if (i >= len) return x;\n\n              switch (x) {\n                case '%s':\n                  return String(args[i++]);\n\n                case '%d':\n                  return Number(args[i++]);\n\n                case '%j':\n                  try {\n                    return JSON.stringify(args[i++]);\n                  } catch (_) {\n                    return '[Circular]';\n                  }\n\n                default:\n                  return x;\n              }\n            });\n\n            for (var x = args[i]; i < len; x = args[++i]) {\n              if (isNull(x) || !isObject(x)) {\n                str += ' ' + x;\n              } else {\n                str += ' ' + inspect(x);\n              }\n            }\n\n            return str;\n          }; // Mark that a method should not be used.\n          // Returns a modified function which warns once by default.\n          // If --no-deprecation is set, then it is a no-op.\n\n\n          exports.deprecate = function (fn, msg) {\n            if (typeof process !== 'undefined' && process.noDeprecation === true) {\n              return fn;\n            } // Allow for deprecating things in the process of starting up.\n\n\n            if (typeof process === 'undefined') {\n              return function () {\n                return exports.deprecate(fn, msg).apply(this, arguments);\n              };\n            }\n\n            var warned = false;\n\n            function deprecated() {\n              if (!warned) {\n                if (process.throwDeprecation) {\n                  throw new Error(msg);\n                } else if (process.traceDeprecation) {\n                  console.trace(msg);\n                } else {\n                  console.error(msg);\n                }\n\n                warned = true;\n              }\n\n              return fn.apply(this, arguments);\n            }\n\n            return deprecated;\n          };\n\n          var debugs = {};\n          var debugEnviron;\n\n          exports.debuglog = function (set) {\n            if (isUndefined(debugEnviron)) debugEnviron = process.env.NODE_DEBUG || '';\n            set = set.toUpperCase();\n\n            if (!debugs[set]) {\n              if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n                var pid = process.pid;\n\n                debugs[set] = function () {\n                  var msg = exports.format.apply(exports, arguments);\n                  console.error('%s %d: %s', set, pid, msg);\n                };\n              } else {\n                debugs[set] = function () {};\n              }\n            }\n\n            return debugs[set];\n          };\n          /**\n           * Echos the value of a value. Trys to print the value out\n           * in the best way possible given the different types.\n           *\n           * @param {Object} obj The object to print out.\n           * @param {Object} opts Optional options object that alters the output.\n           */\n\n          /* legacy: obj, showHidden, depth, colors*/\n\n\n          function inspect(obj, opts) {\n            // default options\n            var ctx = {\n              seen: [],\n              stylize: stylizeNoColor\n            }; // legacy...\n\n            if (arguments.length >= 3) ctx.depth = arguments[2];\n            if (arguments.length >= 4) ctx.colors = arguments[3];\n\n            if (isBoolean(opts)) {\n              // legacy...\n              ctx.showHidden = opts;\n            } else if (opts) {\n              // got an \"options\" object\n              exports._extend(ctx, opts);\n            } // set default options\n\n\n            if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n            if (isUndefined(ctx.depth)) ctx.depth = 2;\n            if (isUndefined(ctx.colors)) ctx.colors = false;\n            if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n            if (ctx.colors) ctx.stylize = stylizeWithColor;\n            return formatValue(ctx, obj, ctx.depth);\n          }\n\n          exports.inspect = inspect; // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\n\n          inspect.colors = {\n            'bold': [1, 22],\n            'italic': [3, 23],\n            'underline': [4, 24],\n            'inverse': [7, 27],\n            'white': [37, 39],\n            'grey': [90, 39],\n            'black': [30, 39],\n            'blue': [34, 39],\n            'cyan': [36, 39],\n            'green': [32, 39],\n            'magenta': [35, 39],\n            'red': [31, 39],\n            'yellow': [33, 39]\n          }; // Don't use 'blue' not visible on cmd.exe\n\n          inspect.styles = {\n            'special': 'cyan',\n            'number': 'yellow',\n            'boolean': 'yellow',\n            'undefined': 'grey',\n            'null': 'bold',\n            'string': 'green',\n            'date': 'magenta',\n            // \"name\": intentionally not styling\n            'regexp': 'red'\n          };\n\n          function stylizeWithColor(str, styleType) {\n            var style = inspect.styles[styleType];\n\n            if (style) {\n              return \"\\x1B[\" + inspect.colors[style][0] + 'm' + str + \"\\x1B[\" + inspect.colors[style][1] + 'm';\n            } else {\n              return str;\n            }\n          }\n\n          function stylizeNoColor(str, styleType) {\n            return str;\n          }\n\n          function arrayToHash(array) {\n            var hash = {};\n            array.forEach(function (val, idx) {\n              hash[val] = true;\n            });\n            return hash;\n          }\n\n          function formatValue(ctx, value, recurseTimes) {\n            // Provide a hook for user-specified inspect functions.\n            // Check that value is an object with an inspect function on it\n            if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special\n            value.inspect !== exports.inspect && // Also filter out any prototype objects using the circular check.\n            !(value.constructor && value.constructor.prototype === value)) {\n              var ret = value.inspect(recurseTimes, ctx);\n\n              if (!isString(ret)) {\n                ret = formatValue(ctx, ret, recurseTimes);\n              }\n\n              return ret;\n            } // Primitive types cannot have properties\n\n\n            var primitive = formatPrimitive(ctx, value);\n\n            if (primitive) {\n              return primitive;\n            } // Look up the keys of the object.\n\n\n            var keys = Object.keys(value);\n            var visibleKeys = arrayToHash(keys);\n\n            if (ctx.showHidden) {\n              keys = Object.getOwnPropertyNames(value);\n            } // IE doesn't make error fields non-enumerable\n            // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n\n\n            if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n              return formatError(value);\n            } // Some type of object without properties can be shortcutted.\n\n\n            if (keys.length === 0) {\n              if (isFunction(value)) {\n                var name = value.name ? ': ' + value.name : '';\n                return ctx.stylize('[Function' + name + ']', 'special');\n              }\n\n              if (isRegExp(value)) {\n                return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n              }\n\n              if (isDate(value)) {\n                return ctx.stylize(Date.prototype.toString.call(value), 'date');\n              }\n\n              if (isError(value)) {\n                return formatError(value);\n              }\n            }\n\n            var base = '',\n                array = false,\n                braces = ['{', '}']; // Make Array say that they are Array\n\n            if (isArray(value)) {\n              array = true;\n              braces = ['[', ']'];\n            } // Make functions say that they are functions\n\n\n            if (isFunction(value)) {\n              var n = value.name ? ': ' + value.name : '';\n              base = ' [Function' + n + ']';\n            } // Make RegExps say that they are RegExps\n\n\n            if (isRegExp(value)) {\n              base = ' ' + RegExp.prototype.toString.call(value);\n            } // Make dates with properties first say the date\n\n\n            if (isDate(value)) {\n              base = ' ' + Date.prototype.toUTCString.call(value);\n            } // Make error with message first say the error\n\n\n            if (isError(value)) {\n              base = ' ' + formatError(value);\n            }\n\n            if (keys.length === 0 && (!array || value.length == 0)) {\n              return braces[0] + base + braces[1];\n            }\n\n            if (recurseTimes < 0) {\n              if (isRegExp(value)) {\n                return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n              } else {\n                return ctx.stylize('[Object]', 'special');\n              }\n            }\n\n            ctx.seen.push(value);\n            var output;\n\n            if (array) {\n              output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n            } else {\n              output = keys.map(function (key) {\n                return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n              });\n            }\n\n            ctx.seen.pop();\n            return reduceToSingleString(output, base, braces);\n          }\n\n          function formatPrimitive(ctx, value) {\n            if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');\n\n            if (isString(value)) {\n              var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '').replace(/'/g, \"\\\\'\").replace(/\\\\\"/g, '\"') + '\\'';\n              return ctx.stylize(simple, 'string');\n            }\n\n            if (isNumber(value)) return ctx.stylize('' + value, 'number');\n            if (isBoolean(value)) return ctx.stylize('' + value, 'boolean'); // For some reason typeof null is \"object\", so special case here.\n\n            if (isNull(value)) return ctx.stylize('null', 'null');\n          }\n\n          function formatError(value) {\n            return '[' + Error.prototype.toString.call(value) + ']';\n          }\n\n          function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n            var output = [];\n\n            for (var i = 0, l = value.length; i < l; ++i) {\n              if (hasOwnProperty(value, String(i))) {\n                output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));\n              } else {\n                output.push('');\n              }\n            }\n\n            keys.forEach(function (key) {\n              if (!key.match(/^\\d+$/)) {\n                output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));\n              }\n            });\n            return output;\n          }\n\n          function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n            var name, str, desc;\n            desc = Object.getOwnPropertyDescriptor(value, key) || {\n              value: value[key]\n            };\n\n            if (desc.get) {\n              if (desc.set) {\n                str = ctx.stylize('[Getter/Setter]', 'special');\n              } else {\n                str = ctx.stylize('[Getter]', 'special');\n              }\n            } else {\n              if (desc.set) {\n                str = ctx.stylize('[Setter]', 'special');\n              }\n            }\n\n            if (!hasOwnProperty(visibleKeys, key)) {\n              name = '[' + key + ']';\n            }\n\n            if (!str) {\n              if (ctx.seen.indexOf(desc.value) < 0) {\n                if (isNull(recurseTimes)) {\n                  str = formatValue(ctx, desc.value, null);\n                } else {\n                  str = formatValue(ctx, desc.value, recurseTimes - 1);\n                }\n\n                if (str.indexOf('\\n') > -1) {\n                  if (array) {\n                    str = str.split('\\n').map(function (line) {\n                      return '  ' + line;\n                    }).join('\\n').substr(2);\n                  } else {\n                    str = '\\n' + str.split('\\n').map(function (line) {\n                      return '   ' + line;\n                    }).join('\\n');\n                  }\n                }\n              } else {\n                str = ctx.stylize('[Circular]', 'special');\n              }\n            }\n\n            if (isUndefined(name)) {\n              if (array && key.match(/^\\d+$/)) {\n                return str;\n              }\n\n              name = JSON.stringify('' + key);\n\n              if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n                name = name.substr(1, name.length - 2);\n                name = ctx.stylize(name, 'name');\n              } else {\n                name = name.replace(/'/g, \"\\\\'\").replace(/\\\\\"/g, '\"').replace(/(^\"|\"$)/g, \"'\");\n                name = ctx.stylize(name, 'string');\n              }\n            }\n\n            return name + ': ' + str;\n          }\n\n          function reduceToSingleString(output, base, braces) {\n            var numLinesEst = 0;\n            var length = output.reduce(function (prev, cur) {\n              numLinesEst++;\n              if (cur.indexOf('\\n') >= 0) numLinesEst++;\n              return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n            }, 0);\n\n            if (length > 60) {\n              return braces[0] + (base === '' ? '' : base + '\\n ') + ' ' + output.join(',\\n  ') + ' ' + braces[1];\n            }\n\n            return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n          } // NOTE: These type checking functions intentionally don't use `instanceof`\n          // because it is fragile and can be easily faked with `Object.create()`.\n\n\n          function isArray(ar) {\n            return Array.isArray(ar);\n          }\n\n          exports.isArray = isArray;\n\n          function isBoolean(arg) {\n            return typeof arg === 'boolean';\n          }\n\n          exports.isBoolean = isBoolean;\n\n          function isNull(arg) {\n            return arg === null;\n          }\n\n          exports.isNull = isNull;\n\n          function isNullOrUndefined(arg) {\n            return arg == null;\n          }\n\n          exports.isNullOrUndefined = isNullOrUndefined;\n\n          function isNumber(arg) {\n            return typeof arg === 'number';\n          }\n\n          exports.isNumber = isNumber;\n\n          function isString(arg) {\n            return typeof arg === 'string';\n          }\n\n          exports.isString = isString;\n\n          function isSymbol(arg) {\n            return typeof arg === 'symbol';\n          }\n\n          exports.isSymbol = isSymbol;\n\n          function isUndefined(arg) {\n            return arg === void 0;\n          }\n\n          exports.isUndefined = isUndefined;\n\n          function isRegExp(re) {\n            return isObject(re) && objectToString(re) === '[object RegExp]';\n          }\n\n          exports.isRegExp = isRegExp;\n\n          function isObject(arg) {\n            return typeof arg === 'object' && arg !== null;\n          }\n\n          exports.isObject = isObject;\n\n          function isDate(d) {\n            return isObject(d) && objectToString(d) === '[object Date]';\n          }\n\n          exports.isDate = isDate;\n\n          function isError(e) {\n            return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);\n          }\n\n          exports.isError = isError;\n\n          function isFunction(arg) {\n            return typeof arg === 'function';\n          }\n\n          exports.isFunction = isFunction;\n\n          function isPrimitive(arg) {\n            return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' || // ES6 symbol\n            typeof arg === 'undefined';\n          }\n\n          exports.isPrimitive = isPrimitive;\n          exports.isBuffer = __webpack_require__(\n          /*! ./support/isBuffer */\n          \"./node_modules/node-libs-browser/node_modules/util/support/isBufferBrowser.js\");\n\n          function objectToString(o) {\n            return Object.prototype.toString.call(o);\n          }\n\n          function pad(n) {\n            return n < 10 ? '0' + n.toString(10) : n.toString(10);\n          }\n\n          var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']; // 26 Feb 16:19:34\n\n          function timestamp() {\n            var d = new Date();\n            var time = [pad(d.getHours()), pad(d.getMinutes()), pad(d.getSeconds())].join(':');\n            return [d.getDate(), months[d.getMonth()], time].join(' ');\n          } // log is just a thin wrapper to console.log that prepends a timestamp\n\n\n          exports.log = function () {\n            console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n          };\n          /**\n           * Inherit the prototype methods from one constructor into another.\n           *\n           * The Function.prototype.inherits from lang.js rewritten as a standalone\n           * function (not on Function.prototype). NOTE: If this file is to be loaded\n           * during bootstrapping this function needs to be rewritten using some native\n           * functions as prototype setup using normal JavaScript does not work as\n           * expected during bootstrapping (see mirror.js in r114903).\n           *\n           * @param {function} ctor Constructor function which needs to inherit the\n           *     prototype.\n           * @param {function} superCtor Constructor function to inherit prototype from.\n           */\n\n\n          exports.inherits = __webpack_require__(\n          /*! inherits */\n          \"./node_modules/node-libs-browser/node_modules/util/node_modules/inherits/inherits_browser.js\");\n\n          exports._extend = function (origin, add) {\n            // Don't do anything if add isn't an object\n            if (!add || !isObject(add)) return origin;\n            var keys = Object.keys(add);\n            var i = keys.length;\n\n            while (i--) {\n              origin[keys[i]] = add[keys[i]];\n            }\n\n            return origin;\n          };\n\n          function hasOwnProperty(obj, prop) {\n            return Object.prototype.hasOwnProperty.call(obj, prop);\n          }\n\n          var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;\n\n          exports.promisify = function promisify(original) {\n            if (typeof original !== 'function') throw new TypeError('The \"original\" argument must be of type Function');\n\n            if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {\n              var fn = original[kCustomPromisifiedSymbol];\n\n              if (typeof fn !== 'function') {\n                throw new TypeError('The \"util.promisify.custom\" argument must be of type Function');\n              }\n\n              Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n                value: fn,\n                enumerable: false,\n                writable: false,\n                configurable: true\n              });\n              return fn;\n            }\n\n            function fn() {\n              var promiseResolve, promiseReject;\n              var promise = new Promise(function (resolve, reject) {\n                promiseResolve = resolve;\n                promiseReject = reject;\n              });\n              var args = [];\n\n              for (var i = 0; i < arguments.length; i++) {\n                args.push(arguments[i]);\n              }\n\n              args.push(function (err, value) {\n                if (err) {\n                  promiseReject(err);\n                } else {\n                  promiseResolve(value);\n                }\n              });\n\n              try {\n                original.apply(this, args);\n              } catch (err) {\n                promiseReject(err);\n              }\n\n              return promise;\n            }\n\n            Object.setPrototypeOf(fn, Object.getPrototypeOf(original));\n            if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n              value: fn,\n              enumerable: false,\n              writable: false,\n              configurable: true\n            });\n            return Object.defineProperties(fn, getOwnPropertyDescriptors(original));\n          };\n\n          exports.promisify.custom = kCustomPromisifiedSymbol;\n\n          function callbackifyOnRejected(reason, cb) {\n            // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).\n            // Because `null` is a special error value in callbacks which means \"no error\n            // occurred\", we error-wrap so the callback consumer can distinguish between\n            // \"the promise rejected with null\" or \"the promise fulfilled with undefined\".\n            if (!reason) {\n              var newReason = new Error('Promise was rejected with a falsy value');\n              newReason.reason = reason;\n              reason = newReason;\n            }\n\n            return cb(reason);\n          }\n\n          function callbackify(original) {\n            if (typeof original !== 'function') {\n              throw new TypeError('The \"original\" argument must be of type Function');\n            } // We DO NOT return the promise as it gives the user a false sense that\n            // the promise is actually somehow related to the callback's execution\n            // and that the callback throwing will reject the promise.\n\n\n            function callbackified() {\n              var args = [];\n\n              for (var i = 0; i < arguments.length; i++) {\n                args.push(arguments[i]);\n              }\n\n              var maybeCb = args.pop();\n\n              if (typeof maybeCb !== 'function') {\n                throw new TypeError('The last argument must be of type Function');\n              }\n\n              var self = this;\n\n              var cb = function cb() {\n                return maybeCb.apply(self, arguments);\n              }; // In true node style we process the callback on `nextTick` with all the\n              // implications (stack, `uncaughtException`, `async_hooks`)\n\n\n              original.apply(this, args).then(function (ret) {\n                process.nextTick(cb, null, ret);\n              }, function (rej) {\n                process.nextTick(callbackifyOnRejected, rej, cb);\n              });\n            }\n\n            Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));\n            Object.defineProperties(callbackified, getOwnPropertyDescriptors(original));\n            return callbackified;\n          }\n\n          exports.callbackify = callbackify;\n          /* WEBPACK VAR INJECTION */\n        }).call(this, __webpack_require__(\n        /*! ./../../../process/browser.js */\n        \"./node_modules/process/browser.js\"));\n        /***/\n      },\n\n      /***/\n      \"./node_modules/object-assign/index.js\":\n      /*!*********************************************!*\\\n        !*** ./node_modules/object-assign/index.js ***!\n        \\*********************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesObjectAssignIndexJs(module, exports, __webpack_require__) {\n        \"use strict\";\n        /*\n        object-assign\n        (c) Sindre Sorhus\n        @license MIT\n        */\n\n        /* eslint-disable no-unused-vars */\n\n        var getOwnPropertySymbols = Object.getOwnPropertySymbols;\n        var hasOwnProperty = Object.prototype.hasOwnProperty;\n        var propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\n        function toObject(val) {\n          if (val === null || val === undefined) {\n            throw new TypeError('Object.assign cannot be called with null or undefined');\n          }\n\n          return Object(val);\n        }\n\n        function shouldUseNative() {\n          try {\n            if (!Object.assign) {\n              return false;\n            } // Detect buggy property enumeration order in older V8 versions.\n            // https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\n\n            var test1 = new String('abc'); // eslint-disable-line no-new-wrappers\n\n            test1[5] = 'de';\n\n            if (Object.getOwnPropertyNames(test1)[0] === '5') {\n              return false;\n            } // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\n\n            var test2 = {};\n\n            for (var i = 0; i < 10; i++) {\n              test2['_' + String.fromCharCode(i)] = i;\n            }\n\n            var order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n              return test2[n];\n            });\n\n            if (order2.join('') !== '0123456789') {\n              return false;\n            } // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\n\n            var test3 = {};\n            'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n              test3[letter] = letter;\n            });\n\n            if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {\n              return false;\n            }\n\n            return true;\n          } catch (err) {\n            // We don't expect any of the above to throw, but better to be safe.\n            return false;\n          }\n        }\n\n        module.exports = shouldUseNative() ? Object.assign : function (target, source) {\n          var from;\n          var to = toObject(target);\n          var symbols;\n\n          for (var s = 1; s < arguments.length; s++) {\n            from = Object(arguments[s]);\n\n            for (var key in from) {\n              if (hasOwnProperty.call(from, key)) {\n                to[key] = from[key];\n              }\n            }\n\n            if (getOwnPropertySymbols) {\n              symbols = getOwnPropertySymbols(from);\n\n              for (var i = 0; i < symbols.length; i++) {\n                if (propIsEnumerable.call(from, symbols[i])) {\n                  to[symbols[i]] = from[symbols[i]];\n                }\n              }\n            }\n          }\n\n          return to;\n        };\n        /***/\n      },\n\n      /***/\n      \"./node_modules/process/browser.js\":\n      /*!*****************************************!*\\\n        !*** ./node_modules/process/browser.js ***!\n        \\*****************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesProcessBrowserJs(module, exports) {\n        // shim for using process in browser\n        var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it\n        // don't break things.  But we need to wrap it in a try catch in case it is\n        // wrapped in strict mode code which doesn't define any globals.  It's inside a\n        // function because try/catches deoptimize in certain engines.\n\n        var cachedSetTimeout;\n        var cachedClearTimeout;\n\n        function defaultSetTimout() {\n          throw new Error('setTimeout has not been defined');\n        }\n\n        function defaultClearTimeout() {\n          throw new Error('clearTimeout has not been defined');\n        }\n\n        (function () {\n          try {\n            if (typeof setTimeout === 'function') {\n              cachedSetTimeout = setTimeout;\n            } else {\n              cachedSetTimeout = defaultSetTimout;\n            }\n          } catch (e) {\n            cachedSetTimeout = defaultSetTimout;\n          }\n\n          try {\n            if (typeof clearTimeout === 'function') {\n              cachedClearTimeout = clearTimeout;\n            } else {\n              cachedClearTimeout = defaultClearTimeout;\n            }\n          } catch (e) {\n            cachedClearTimeout = defaultClearTimeout;\n          }\n        })();\n\n        function runTimeout(fun) {\n          if (cachedSetTimeout === setTimeout) {\n            //normal enviroments in sane situations\n            return setTimeout(fun, 0);\n          } // if setTimeout wasn't available but was latter defined\n\n\n          if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n            cachedSetTimeout = setTimeout;\n            return setTimeout(fun, 0);\n          }\n\n          try {\n            // when when somebody has screwed with setTimeout but no I.E. maddness\n            return cachedSetTimeout(fun, 0);\n          } catch (e) {\n            try {\n              // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n              return cachedSetTimeout.call(null, fun, 0);\n            } catch (e) {\n              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n              return cachedSetTimeout.call(this, fun, 0);\n            }\n          }\n        }\n\n        function runClearTimeout(marker) {\n          if (cachedClearTimeout === clearTimeout) {\n            //normal enviroments in sane situations\n            return clearTimeout(marker);\n          } // if clearTimeout wasn't available but was latter defined\n\n\n          if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n            cachedClearTimeout = clearTimeout;\n            return clearTimeout(marker);\n          }\n\n          try {\n            // when when somebody has screwed with setTimeout but no I.E. maddness\n            return cachedClearTimeout(marker);\n          } catch (e) {\n            try {\n              // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n              return cachedClearTimeout.call(null, marker);\n            } catch (e) {\n              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n              // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n              return cachedClearTimeout.call(this, marker);\n            }\n          }\n        }\n\n        var queue = [];\n        var draining = false;\n        var currentQueue;\n        var queueIndex = -1;\n\n        function cleanUpNextTick() {\n          if (!draining || !currentQueue) {\n            return;\n          }\n\n          draining = false;\n\n          if (currentQueue.length) {\n            queue = currentQueue.concat(queue);\n          } else {\n            queueIndex = -1;\n          }\n\n          if (queue.length) {\n            drainQueue();\n          }\n        }\n\n        function drainQueue() {\n          if (draining) {\n            return;\n          }\n\n          var timeout = runTimeout(cleanUpNextTick);\n          draining = true;\n          var len = queue.length;\n\n          while (len) {\n            currentQueue = queue;\n            queue = [];\n\n            while (++queueIndex < len) {\n              if (currentQueue) {\n                currentQueue[queueIndex].run();\n              }\n            }\n\n            queueIndex = -1;\n            len = queue.length;\n          }\n\n          currentQueue = null;\n          draining = false;\n          runClearTimeout(timeout);\n        }\n\n        process.nextTick = function (fun) {\n          var args = new Array(arguments.length - 1);\n\n          if (arguments.length > 1) {\n            for (var i = 1; i < arguments.length; i++) {\n              args[i - 1] = arguments[i];\n            }\n          }\n\n          queue.push(new Item(fun, args));\n\n          if (queue.length === 1 && !draining) {\n            runTimeout(drainQueue);\n          }\n        }; // v8 likes predictible objects\n\n\n        function Item(fun, array) {\n          this.fun = fun;\n          this.array = array;\n        }\n\n        Item.prototype.run = function () {\n          this.fun.apply(null, this.array);\n        };\n\n        process.title = 'browser';\n        process.browser = true;\n        process.env = {};\n        process.argv = [];\n        process.version = ''; // empty string to avoid regexp issues\n\n        process.versions = {};\n\n        function noop() {}\n\n        process.on = noop;\n        process.addListener = noop;\n        process.once = noop;\n        process.off = noop;\n        process.removeListener = noop;\n        process.removeAllListeners = noop;\n        process.emit = noop;\n        process.prependListener = noop;\n        process.prependOnceListener = noop;\n\n        process.listeners = function (name) {\n          return [];\n        };\n\n        process.binding = function (name) {\n          throw new Error('process.binding is not supported');\n        };\n\n        process.cwd = function () {\n          return '/';\n        };\n\n        process.chdir = function (dir) {\n          throw new Error('process.chdir is not supported');\n        };\n\n        process.umask = function () {\n          return 0;\n        };\n        /***/\n\n      },\n\n      /***/\n      \"./node_modules/safe-buffer/index.js\":\n      /*!*******************************************!*\\\n        !*** ./node_modules/safe-buffer/index.js ***!\n        \\*******************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesSafeBufferIndexJs(module, exports, __webpack_require__) {\n        /*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\n\n        /* eslint-disable node/no-deprecated-api */\n        var buffer = __webpack_require__(\n        /*! buffer */\n        \"./node_modules/node-libs-browser/node_modules/buffer/index.js\");\n\n        var Buffer = buffer.Buffer; // alternative to using Object.keys for old browsers\n\n        function copyProps(src, dst) {\n          for (var key in src) {\n            dst[key] = src[key];\n          }\n        }\n\n        if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n          module.exports = buffer;\n        } else {\n          // Copy properties from require('buffer')\n          copyProps(buffer, exports);\n          exports.Buffer = SafeBuffer;\n        }\n\n        function SafeBuffer(arg, encodingOrOffset, length) {\n          return Buffer(arg, encodingOrOffset, length);\n        }\n\n        SafeBuffer.prototype = Object.create(Buffer.prototype); // Copy static methods from Buffer\n\n        copyProps(Buffer, SafeBuffer);\n\n        SafeBuffer.from = function (arg, encodingOrOffset, length) {\n          if (typeof arg === 'number') {\n            throw new TypeError('Argument must not be a number');\n          }\n\n          return Buffer(arg, encodingOrOffset, length);\n        };\n\n        SafeBuffer.alloc = function (size, fill, encoding) {\n          if (typeof size !== 'number') {\n            throw new TypeError('Argument must be a number');\n          }\n\n          var buf = Buffer(size);\n\n          if (fill !== undefined) {\n            if (typeof encoding === 'string') {\n              buf.fill(fill, encoding);\n            } else {\n              buf.fill(fill);\n            }\n          } else {\n            buf.fill(0);\n          }\n\n          return buf;\n        };\n\n        SafeBuffer.allocUnsafe = function (size) {\n          if (typeof size !== 'number') {\n            throw new TypeError('Argument must be a number');\n          }\n\n          return Buffer(size);\n        };\n\n        SafeBuffer.allocUnsafeSlow = function (size) {\n          if (typeof size !== 'number') {\n            throw new TypeError('Argument must be a number');\n          }\n\n          return buffer.SlowBuffer(size);\n        };\n        /***/\n\n      },\n\n      /***/\n      \"./node_modules/setimmediate/setImmediate.js\":\n      /*!***************************************************!*\\\n        !*** ./node_modules/setimmediate/setImmediate.js ***!\n        \\***************************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesSetimmediateSetImmediateJs(module, exports, __webpack_require__) {\n        /* WEBPACK VAR INJECTION */\n        (function (global, process) {\n          (function (global, undefined) {\n            \"use strict\";\n\n            if (global.setImmediate) {\n              return;\n            }\n\n            var nextHandle = 1; // Spec says greater than zero\n\n            var tasksByHandle = {};\n            var currentlyRunningATask = false;\n            var doc = global.document;\n            var registerImmediate;\n\n            function setImmediate(callback) {\n              // Callback can either be a function or a string\n              if (typeof callback !== \"function\") {\n                callback = new Function(\"\" + callback);\n              } // Copy function arguments\n\n\n              var args = new Array(arguments.length - 1);\n\n              for (var i = 0; i < args.length; i++) {\n                args[i] = arguments[i + 1];\n              } // Store and register the task\n\n\n              var task = {\n                callback: callback,\n                args: args\n              };\n              tasksByHandle[nextHandle] = task;\n              registerImmediate(nextHandle);\n              return nextHandle++;\n            }\n\n            function clearImmediate(handle) {\n              delete tasksByHandle[handle];\n            }\n\n            function run(task) {\n              var callback = task.callback;\n              var args = task.args;\n\n              switch (args.length) {\n                case 0:\n                  callback();\n                  break;\n\n                case 1:\n                  callback(args[0]);\n                  break;\n\n                case 2:\n                  callback(args[0], args[1]);\n                  break;\n\n                case 3:\n                  callback(args[0], args[1], args[2]);\n                  break;\n\n                default:\n                  callback.apply(undefined, args);\n                  break;\n              }\n            }\n\n            function runIfPresent(handle) {\n              // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n              // So if we're currently running a task, we'll need to delay this invocation.\n              if (currentlyRunningATask) {\n                // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n                // \"too much recursion\" error.\n                setTimeout(runIfPresent, 0, handle);\n              } else {\n                var task = tasksByHandle[handle];\n\n                if (task) {\n                  currentlyRunningATask = true;\n\n                  try {\n                    run(task);\n                  } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                  }\n                }\n              }\n            }\n\n            function installNextTickImplementation() {\n              registerImmediate = function registerImmediate(handle) {\n                process.nextTick(function () {\n                  runIfPresent(handle);\n                });\n              };\n            }\n\n            function canUsePostMessage() {\n              // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n              // where `global.postMessage` means something completely different and can't be used for this purpose.\n              if (global.postMessage && !global.importScripts) {\n                var postMessageIsAsynchronous = true;\n                var oldOnMessage = global.onmessage;\n\n                global.onmessage = function () {\n                  postMessageIsAsynchronous = false;\n                };\n\n                global.postMessage(\"\", \"*\");\n                global.onmessage = oldOnMessage;\n                return postMessageIsAsynchronous;\n              }\n            }\n\n            function installPostMessageImplementation() {\n              // Installs an event handler on `global` for the `message` event: see\n              // * https://developer.mozilla.org/en/DOM/window.postMessage\n              // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n              var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n\n              var onGlobalMessage = function onGlobalMessage(event) {\n                if (event.source === global && typeof event.data === \"string\" && event.data.indexOf(messagePrefix) === 0) {\n                  runIfPresent(+event.data.slice(messagePrefix.length));\n                }\n              };\n\n              if (global.addEventListener) {\n                global.addEventListener(\"message\", onGlobalMessage, false);\n              } else {\n                global.attachEvent(\"onmessage\", onGlobalMessage);\n              }\n\n              registerImmediate = function registerImmediate(handle) {\n                global.postMessage(messagePrefix + handle, \"*\");\n              };\n            }\n\n            function installMessageChannelImplementation() {\n              var channel = new MessageChannel();\n\n              channel.port1.onmessage = function (event) {\n                var handle = event.data;\n                runIfPresent(handle);\n              };\n\n              registerImmediate = function registerImmediate(handle) {\n                channel.port2.postMessage(handle);\n              };\n            }\n\n            function installReadyStateChangeImplementation() {\n              var html = doc.documentElement;\n\n              registerImmediate = function registerImmediate(handle) {\n                // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n                // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n                var script = doc.createElement(\"script\");\n\n                script.onreadystatechange = function () {\n                  runIfPresent(handle);\n                  script.onreadystatechange = null;\n                  html.removeChild(script);\n                  script = null;\n                };\n\n                html.appendChild(script);\n              };\n            }\n\n            function installSetTimeoutImplementation() {\n              registerImmediate = function registerImmediate(handle) {\n                setTimeout(runIfPresent, 0, handle);\n              };\n            } // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n\n\n            var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n            attachTo = attachTo && attachTo.setTimeout ? attachTo : global; // Don't get fooled by e.g. browserify environments.\n\n            if ({}.toString.call(global.process) === \"[object process]\") {\n              // For Node.js before 0.9\n              installNextTickImplementation();\n            } else if (canUsePostMessage()) {\n              // For non-IE10 modern browsers\n              installPostMessageImplementation();\n            } else if (global.MessageChannel) {\n              // For web workers, where supported\n              installMessageChannelImplementation();\n            } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n              // For IE 6–8\n              installReadyStateChangeImplementation();\n            } else {\n              // For older browsers\n              installSetTimeoutImplementation();\n            }\n\n            attachTo.setImmediate = setImmediate;\n            attachTo.clearImmediate = clearImmediate;\n          })(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self);\n          /* WEBPACK VAR INJECTION */\n\n        }).call(this, __webpack_require__(\n        /*! ./../webpack/buildin/global.js */\n        \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(\n        /*! ./../process/browser.js */\n        \"./node_modules/process/browser.js\"));\n        /***/\n      },\n\n      /***/\n      \"./node_modules/timers-browserify/main.js\":\n      /*!************************************************!*\\\n        !*** ./node_modules/timers-browserify/main.js ***!\n        \\************************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesTimersBrowserifyMainJs(module, exports, __webpack_require__) {\n        /* WEBPACK VAR INJECTION */\n        (function (global) {\n          var scope = typeof global !== \"undefined\" && global || typeof self !== \"undefined\" && self || window;\n          var apply = Function.prototype.apply; // DOM APIs, for completeness\n\n          exports.setTimeout = function () {\n            return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n          };\n\n          exports.setInterval = function () {\n            return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n          };\n\n          exports.clearTimeout = exports.clearInterval = function (timeout) {\n            if (timeout) {\n              timeout.close();\n            }\n          };\n\n          function Timeout(id, clearFn) {\n            this._id = id;\n            this._clearFn = clearFn;\n          }\n\n          Timeout.prototype.unref = Timeout.prototype.ref = function () {};\n\n          Timeout.prototype.close = function () {\n            this._clearFn.call(scope, this._id);\n          }; // Does not start the time, just sets up the members needed.\n\n\n          exports.enroll = function (item, msecs) {\n            clearTimeout(item._idleTimeoutId);\n            item._idleTimeout = msecs;\n          };\n\n          exports.unenroll = function (item) {\n            clearTimeout(item._idleTimeoutId);\n            item._idleTimeout = -1;\n          };\n\n          exports._unrefActive = exports.active = function (item) {\n            clearTimeout(item._idleTimeoutId);\n            var msecs = item._idleTimeout;\n\n            if (msecs >= 0) {\n              item._idleTimeoutId = setTimeout(function onTimeout() {\n                if (item._onTimeout) item._onTimeout();\n              }, msecs);\n            }\n          }; // setimmediate attaches itself to the global object\n\n\n          __webpack_require__(\n          /*! setimmediate */\n          \"./node_modules/setimmediate/setImmediate.js\"); // On some exotic environments, it's not clear which object `setimmediate` was\n          // able to install onto.  Search each possibility in the same order as the\n          // `setimmediate` library.\n\n\n          exports.setImmediate = typeof self !== \"undefined\" && self.setImmediate || typeof global !== \"undefined\" && global.setImmediate || this && this.setImmediate;\n          exports.clearImmediate = typeof self !== \"undefined\" && self.clearImmediate || typeof global !== \"undefined\" && global.clearImmediate || this && this.clearImmediate;\n          /* WEBPACK VAR INJECTION */\n        }).call(this, __webpack_require__(\n        /*! ./../webpack/buildin/global.js */\n        \"./node_modules/webpack/buildin/global.js\"));\n        /***/\n      },\n\n      /***/\n      \"./node_modules/webpack/buildin/global.js\":\n      /*!***********************************!*\\\n        !*** (webpack)/buildin/global.js ***!\n        \\***********************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesWebpackBuildinGlobalJs(module, exports) {\n        var g; // This works in non-strict mode\n\n        g = function () {\n          return this;\n        }();\n\n        try {\n          // This works if eval is allowed (see CSP)\n          g = g || new Function(\"return this\")();\n        } catch (e) {\n          // This works if the window reference is available\n          if (typeof window === \"object\") g = window;\n        } // g can still be undefined, but nothing to do about it...\n        // We return undefined, instead of nothing here, so it's\n        // easier to handle this case. if(!global) { ...}\n\n\n        module.exports = g;\n        /***/\n      },\n\n      /***/\n      \"./node_modules/webpack/buildin/module.js\":\n      /*!***********************************!*\\\n        !*** (webpack)/buildin/module.js ***!\n        \\***********************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesWebpackBuildinModuleJs(module, exports) {\n        module.exports = function (module) {\n          if (!module.webpackPolyfill) {\n            module.deprecate = function () {};\n\n            module.paths = []; // module.parent = undefined by default\n\n            if (!module.children) module.children = [];\n            Object.defineProperty(module, \"loaded\", {\n              enumerable: true,\n              get: function get() {\n                return module.l;\n              }\n            });\n            Object.defineProperty(module, \"id\", {\n              enumerable: true,\n              get: function get() {\n                return module.i;\n              }\n            });\n            module.webpackPolyfill = 1;\n          }\n\n          return module;\n        };\n        /***/\n\n      },\n\n      /***/\n      \"./src/common/ContractsBase.ts\":\n      /*!*************************************!*\\\n        !*** ./src/common/ContractsBase.ts ***!\n        \\*************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function srcCommonContractsBaseTs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        var __importDefault = this && this.__importDefault || function (mod) {\n          return mod && mod.__esModule ? mod : {\n            \"default\": mod\n          };\n        };\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n\n        var bn_js_1 = __importDefault(__webpack_require__(\n        /*! bn.js */\n        \"bn.js\"));\n\n        var ContractsBase =\n        /** @class */\n        function () {\n          function ContractsBase(web3Client, network) {\n            this.web3Client = web3Client;\n            this.network = network;\n          }\n\n          ContractsBase.prototype.encode = function (number) {\n            if (typeof number === 'number') {\n              number = new bn_js_1.default(number);\n            } else if (typeof number === 'string') {\n              if (number.slice(0, 2) === '0x') return number;\n              number = new bn_js_1.default(number);\n            }\n\n            if (bn_js_1.default.isBN(number)) {\n              return '0x' + number.toString(16);\n            }\n          };\n\n          ContractsBase.prototype.getERC20TokenContract = function (token, parent) {\n            if (parent === void 0) {\n              parent = false;\n            }\n\n            var web3 = parent ? this.web3Client.parentWeb3 : this.web3Client.web3;\n            return new web3.eth.Contract(this.network.abi('ChildERC20'), token);\n          };\n\n          ContractsBase.prototype.getERC721TokenContract = function (token, parent) {\n            if (parent === void 0) {\n              parent = false;\n            }\n\n            var web3 = parent ? this.web3Client.parentWeb3 : this.web3Client.web3;\n            return new web3.eth.Contract(this.network.abi('ChildERC721'), token);\n          };\n\n          ContractsBase.prototype.getChildMaticContract = function () {\n            return new this.web3Client.web3.eth.Contract(this.network.abi('MRC20'), ContractsBase.MATIC_CHILD_TOKEN);\n          };\n\n          ContractsBase.prototype.getPOSERC20TokenContract = function (token, parent) {\n            if (parent === void 0) {\n              parent = false;\n            }\n\n            var web3 = parent ? this.web3Client.parentWeb3 : this.web3Client.web3;\n            return new web3.eth.Contract(this.network.abi('ChildERC20', 'pos'), token);\n          };\n\n          ContractsBase.prototype.getPOSERC721TokenContract = function (token, parent) {\n            if (parent === void 0) {\n              parent = false;\n            }\n\n            var web3 = parent ? this.web3Client.parentWeb3 : this.web3Client.web3;\n            return new web3.eth.Contract(this.network.abi('ChildERC721', 'pos'), token);\n          };\n\n          ContractsBase.prototype.getPOSERC1155TokenContract = function (token, parent) {\n            if (parent === void 0) {\n              parent = false;\n            }\n\n            var web3 = parent ? this.web3Client.parentWeb3 : this.web3Client.web3;\n            return new web3.eth.Contract(this.network.abi('ChildERC1155', 'pos'), token);\n          };\n\n          ContractsBase.MATIC_CHILD_TOKEN = '0x0000000000000000000000000000000000001010';\n          return ContractsBase;\n        }();\n\n        exports.default = ContractsBase;\n        /***/\n      },\n\n      /***/\n      \"./src/common/ExitManager.ts\":\n      /*!***********************************!*\\\n        !*** ./src/common/ExitManager.ts ***!\n        \\***********************************/\n\n      /*! no static exports found */\n\n      /***/\n      function srcCommonExitManagerTs(module, exports, __webpack_require__) {\n        \"use strict\";\n        /* WEBPACK VAR INJECTION */\n\n        (function (Buffer) {\n          var __extends = this && this.__extends || function () {\n            var _extendStatics = function extendStatics(d, b) {\n              _extendStatics = Object.setPrototypeOf || {\n                __proto__: []\n              } instanceof Array && function (d, b) {\n                d.__proto__ = b;\n              } || function (d, b) {\n                for (var p in b) {\n                  if (b.hasOwnProperty(p)) d[p] = b[p];\n                }\n              };\n\n              return _extendStatics(d, b);\n            };\n\n            return function (d, b) {\n              _extendStatics(d, b);\n\n              function __() {\n                this.constructor = d;\n              }\n\n              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n          }();\n\n          var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n            function adopt(value) {\n              return value instanceof P ? value : new P(function (resolve) {\n                resolve(value);\n              });\n            }\n\n            return new (P || (P = Promise))(function (resolve, reject) {\n              function fulfilled(value) {\n                try {\n                  step(generator.next(value));\n                } catch (e) {\n                  reject(e);\n                }\n              }\n\n              function rejected(value) {\n                try {\n                  step(generator[\"throw\"](value));\n                } catch (e) {\n                  reject(e);\n                }\n              }\n\n              function step(result) {\n                result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n              }\n\n              step((generator = generator.apply(thisArg, _arguments || [])).next());\n            });\n          };\n\n          var __generator = this && this.__generator || function (thisArg, body) {\n            var _ = {\n              label: 0,\n              sent: function sent() {\n                if (t[0] & 1) throw t[1];\n                return t[1];\n              },\n              trys: [],\n              ops: []\n            },\n                f,\n                y,\n                t,\n                g;\n            return g = {\n              next: verb(0),\n              \"throw\": verb(1),\n              \"return\": verb(2)\n            }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n              return this;\n            }), g;\n\n            function verb(n) {\n              return function (v) {\n                return step([n, v]);\n              };\n            }\n\n            function step(op) {\n              if (f) throw new TypeError(\"Generator is already executing.\");\n\n              while (_) {\n                try {\n                  if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n                  if (y = 0, t) op = [op[0] & 2, t.value];\n\n                  switch (op[0]) {\n                    case 0:\n                    case 1:\n                      t = op;\n                      break;\n\n                    case 4:\n                      _.label++;\n                      return {\n                        value: op[1],\n                        done: false\n                      };\n\n                    case 5:\n                      _.label++;\n                      y = op[1];\n                      op = [0];\n                      continue;\n\n                    case 7:\n                      op = _.ops.pop();\n\n                      _.trys.pop();\n\n                      continue;\n\n                    default:\n                      if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;\n                        continue;\n                      }\n\n                      if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];\n                        break;\n                      }\n\n                      if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];\n                        t = op;\n                        break;\n                      }\n\n                      if (t && _.label < t[2]) {\n                        _.label = t[2];\n\n                        _.ops.push(op);\n\n                        break;\n                      }\n\n                      if (t[2]) _.ops.pop();\n\n                      _.trys.pop();\n\n                      continue;\n                  }\n\n                  op = body.call(thisArg, _);\n                } catch (e) {\n                  op = [6, e];\n                  y = 0;\n                } finally {\n                  f = t = 0;\n                }\n              }\n\n              if (op[0] & 5) throw op[1];\n              return {\n                value: op[0] ? op[1] : void 0,\n                done: true\n              };\n            }\n          };\n\n          var __importDefault = this && this.__importDefault || function (mod) {\n            return mod && mod.__esModule ? mod : {\n              \"default\": mod\n            };\n          };\n\n          Object.defineProperty(exports, \"__esModule\", {\n            value: true\n          });\n\n          var bn_js_1 = __importDefault(__webpack_require__(\n          /*! bn.js */\n          \"bn.js\"));\n\n          var assert_1 = __importDefault(__webpack_require__(\n          /*! assert */\n          \"./node_modules/assert/assert.js\"));\n\n          var ethereumjs_util_1 = __importDefault(__webpack_require__(\n          /*! ethereumjs-util */\n          \"ethereumjs-util\"));\n\n          var axios_1 = __importDefault(__webpack_require__(\n          /*! axios */\n          \"axios\"));\n\n          var ContractsBase_1 = __importDefault(__webpack_require__(\n          /*! ./ContractsBase */\n          \"./src/common/ContractsBase.ts\"));\n\n          var ProofsUtil_1 = __importDefault(__webpack_require__(\n          /*! ../libs/ProofsUtil */\n          \"./src/libs/ProofsUtil.ts\"));\n\n          var web3_1 = __importDefault(__webpack_require__(\n          /*! web3 */\n          \"web3\"));\n\n          var web3 = new web3_1.default();\n          var hash = web3.utils.soliditySha3;\n          var logger = {\n            info: __webpack_require__(\n            /*! debug */\n            \"./node_modules/debug/src/browser.js\")('maticjs:WithdrawManager'),\n            debug: __webpack_require__(\n            /*! debug */\n            \"./node_modules/debug/src/browser.js\")('maticjs:debug:WithdrawManager')\n          };\n\n          var ExitManager =\n          /** @class */\n          function (_super) {\n            __extends(ExitManager, _super);\n\n            function ExitManager(rootChain, options, web3Client) {\n              var _this = _super.call(this, web3Client, options.network) || this;\n\n              _this.rootChain = rootChain;\n              _this.networkApiUrl = options.network.Matic.NetworkAPI;\n              return _this;\n            }\n\n            ExitManager.prototype.buildPayloadForExit = function (burnTxHash, logEventSig, requestConcurrency) {\n              return __awaiter(this, void 0, void 0, function () {\n                var lastChildBlock, burnTx, receipt, block, headerBlockNumber, headerBlock, blockProof, receiptProof, logIndex;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      return [4\n                      /*yield*/\n                      , this.rootChain.getLastChildBlock()];\n\n                    case 1:\n                      lastChildBlock = _a.sent();\n                      return [4\n                      /*yield*/\n                      , this.web3Client.getMaticWeb3().eth.getTransaction(burnTxHash)];\n\n                    case 2:\n                      burnTx = _a.sent();\n                      return [4\n                      /*yield*/\n                      , this.web3Client.getMaticWeb3().eth.getTransactionReceipt(burnTxHash)];\n\n                    case 3:\n                      receipt = _a.sent();\n                      return [4\n                      /*yield*/\n                      , this.web3Client.getMaticWeb3().eth.getBlock(burnTx.blockNumber, true\n                      /* returnTransactionObjects */\n                      )];\n\n                    case 4:\n                      block = _a.sent();\n                      logger.info({\n                        'burnTx.blockNumber': burnTx.blockNumber,\n                        lastCheckPointedBlockNumber: lastChildBlock\n                      });\n                      assert_1.default.ok(new bn_js_1.default(lastChildBlock).gte(new bn_js_1.default(burnTx.blockNumber)), 'Burn transaction has not been checkpointed as yet');\n                      return [4\n                      /*yield*/\n                      , this.rootChain.findHeaderBlockNumber(burnTx.blockNumber)];\n\n                    case 5:\n                      headerBlockNumber = _a.sent();\n                      return [4\n                      /*yield*/\n                      , this.web3Client.call(this.rootChain.rootChain.methods.headerBlocks(this.encode(headerBlockNumber)))];\n\n                    case 6:\n                      headerBlock = _a.sent();\n                      logger.info({\n                        headerBlockNumber: headerBlockNumber.toString(),\n                        headerBlock: headerBlock\n                      });\n                      return [4\n                      /*yield*/\n                      , ProofsUtil_1.default.buildBlockProof(this.web3Client.getMaticWeb3(), parseInt(headerBlock.start, 10), parseInt(headerBlock.end, 10), parseInt(burnTx.blockNumber + '', 10))];\n\n                    case 7:\n                      blockProof = _a.sent();\n                      return [4\n                      /*yield*/\n                      , ProofsUtil_1.default.getReceiptProof(receipt, block, this.web3Client.getMaticWeb3(), requestConcurrency)];\n\n                    case 8:\n                      receiptProof = _a.sent();\n                      logIndex = -1;\n\n                      switch (logEventSig) {\n                        case '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef':\n                        case '0xf94915c6d1fd521cee85359239227480c7e8776d7caf1fc3bacad5c269b66a14':\n                          logIndex = receipt.logs.findIndex(function (log) {\n                            return log.topics[0].toLowerCase() == logEventSig.toLowerCase() && log.topics[2].toLowerCase() == '0x0000000000000000000000000000000000000000000000000000000000000000';\n                          });\n                          break;\n\n                        case '0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62':\n                        case '0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb':\n                          logIndex = receipt.logs.findIndex(function (log) {\n                            return log.topics[0].toLowerCase() == logEventSig.toLowerCase() && log.topics[3].toLowerCase() == '0x0000000000000000000000000000000000000000000000000000000000000000';\n                          });\n                          break;\n\n                        default:\n                          logIndex = receipt.logs.findIndex(function (log) {\n                            return log.topics[0].toLowerCase() == logEventSig.toLowerCase();\n                          });\n                      }\n\n                      assert_1.default.ok(logIndex > -1, 'Log not found in receipt');\n                      return [2\n                      /*return*/\n                      , this._encodePayload(headerBlockNumber, blockProof, burnTx.blockNumber, block.timestamp, Buffer.from(block.transactionsRoot.slice(2), 'hex'), Buffer.from(block.receiptsRoot.slice(2), 'hex'), ProofsUtil_1.default.getReceiptBytes(receipt), // rlp encoded\n                      receiptProof.parentNodes, receiptProof.path, logIndex)];\n                  }\n                });\n              });\n            };\n\n            ExitManager.prototype.buildPayloadForExitFastMerkle = function (start, end, blockNumber) {\n              return __awaiter(this, void 0, void 0, function () {\n                var blockProof;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      return [4\n                      /*yield*/\n                      , ProofsUtil_1.default.buildBlockProof(this.web3Client.getMaticWeb3(), parseInt(start, 10), parseInt(end, 10), parseInt(blockNumber + '', 10))];\n\n                    case 1:\n                      blockProof = _a.sent();\n                      return [2\n                      /*return*/\n                      , blockProof];\n                  }\n                });\n              });\n            };\n\n            ExitManager.prototype.buildPayloadForExitHermoine = function (burnTxHash, logEventSig) {\n              return __awaiter(this, void 0, void 0, function () {\n                var lastChildBlock, receipt, block, headerBlock, blockIncludedResponse, err_1, headerBlockNumber, start, end, number, blockProof, blockProofResponse, err_2, receiptProof, logIndex;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      return [4\n                      /*yield*/\n                      , this.rootChain.getLastChildBlock()];\n\n                    case 1:\n                      lastChildBlock = _a.sent();\n                      return [4\n                      /*yield*/\n                      , this.web3Client.getMaticWeb3().eth.getTransactionReceipt(burnTxHash)];\n\n                    case 2:\n                      receipt = _a.sent();\n                      return [4\n                      /*yield*/\n                      , this.web3Client.getMaticWeb3().eth.getBlock(receipt.blockNumber, true\n                      /* returnTransactionObjects */\n                      )];\n\n                    case 3:\n                      block = _a.sent();\n                      logger.info({\n                        'receipt.blockNumber': receipt.blockNumber,\n                        lastCheckPointedBlockNumber: lastChildBlock\n                      });\n                      assert_1.default.ok(new bn_js_1.default(lastChildBlock).gte(new bn_js_1.default(receipt.blockNumber)), 'Burn transaction has not been checkpointed as yet');\n                      _a.label = 4;\n\n                    case 4:\n                      _a.trys.push([4, 6,, 9]);\n\n                      return [4\n                      /*yield*/\n                      , axios_1.default.get(this.networkApiUrl + \"/block-included/\" + receipt.blockNumber)];\n\n                    case 5:\n                      blockIncludedResponse = _a.sent();\n                      headerBlock = blockIncludedResponse.data;\n\n                      if (!headerBlock || !headerBlock.start || !headerBlock.end || !headerBlock.headerBlockNumber) {\n                        throw Error('Network API Error');\n                      }\n\n                      return [3\n                      /*break*/\n                      , 9];\n\n                    case 6:\n                      err_1 = _a.sent();\n                      return [4\n                      /*yield*/\n                      , this.rootChain.findHeaderBlockNumber(receipt.blockNumber)];\n\n                    case 7:\n                      headerBlockNumber = _a.sent();\n                      return [4\n                      /*yield*/\n                      , this.web3Client.call(this.rootChain.rootChain.methods.headerBlocks(this.encode(headerBlockNumber)))];\n\n                    case 8:\n                      headerBlock = _a.sent();\n                      return [3\n                      /*break*/\n                      , 9];\n\n                    case 9:\n                      start = parseInt(headerBlock.start, 10);\n                      end = parseInt(headerBlock.end, 10);\n                      number = parseInt(receipt.blockNumber + '', 10);\n                      _a.label = 10;\n\n                    case 10:\n                      _a.trys.push([10, 12,, 14]);\n\n                      return [4\n                      /*yield*/\n                      , axios_1.default.get(this.networkApiUrl + \"/fast-merkle-proof?start=\" + start + \"&end=\" + end + \"&number=\" + number)];\n\n                    case 11:\n                      blockProofResponse = _a.sent();\n                      blockProof = blockProofResponse.data.proof;\n\n                      if (!blockProof) {\n                        throw Error('Network API Error');\n                      }\n\n                      return [3\n                      /*break*/\n                      , 14];\n\n                    case 12:\n                      err_2 = _a.sent();\n                      return [4\n                      /*yield*/\n                      , this.buildPayloadForExitFastMerkle(start, end, number)];\n\n                    case 13:\n                      blockProof = _a.sent();\n                      return [3\n                      /*break*/\n                      , 14];\n\n                    case 14:\n                      return [4\n                      /*yield*/\n                      , ProofsUtil_1.default.getReceiptProof(receipt, block, this.web3Client.getMaticWeb3())];\n\n                    case 15:\n                      receiptProof = _a.sent();\n                      logIndex = -1;\n\n                      switch (logEventSig) {\n                        case '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef':\n                        case '0xf94915c6d1fd521cee85359239227480c7e8776d7caf1fc3bacad5c269b66a14':\n                          logIndex = receipt.logs.findIndex(function (log) {\n                            return log.topics[0].toLowerCase() == logEventSig.toLowerCase() && log.topics[2].toLowerCase() == '0x0000000000000000000000000000000000000000000000000000000000000000';\n                          });\n                          break;\n\n                        case '0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62':\n                        case '0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb':\n                          logIndex = receipt.logs.findIndex(function (log) {\n                            return log.topics[0].toLowerCase() == logEventSig.toLowerCase() && log.topics[3].toLowerCase() == '0x0000000000000000000000000000000000000000000000000000000000000000';\n                          });\n                          break;\n\n                        default:\n                          logIndex = receipt.logs.findIndex(function (log) {\n                            return log.topics[0].toLowerCase() == logEventSig.toLowerCase();\n                          });\n                      }\n\n                      assert_1.default.ok(logIndex > -1, 'Log not found in receipt');\n                      return [2\n                      /*return*/\n                      , this._encodePayload(headerBlock.headerBlockNumber, blockProof, receipt.blockNumber, block.timestamp, Buffer.from(block.transactionsRoot.slice(2), 'hex'), Buffer.from(block.receiptsRoot.slice(2), 'hex'), ProofsUtil_1.default.getReceiptBytes(receipt), // rlp encoded\n                      receiptProof.parentNodes, receiptProof.path, logIndex)];\n                  }\n                });\n              });\n            };\n\n            ExitManager.prototype.getExitHash = function (burnTxHash, logEventSig, requestConcurrency) {\n              return __awaiter(this, void 0, void 0, function () {\n                var lastChildBlock, receipt, block, receiptProof, logIndex, nibbleArr;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      return [4\n                      /*yield*/\n                      , this.rootChain.getLastChildBlock()];\n\n                    case 1:\n                      lastChildBlock = _a.sent();\n                      return [4\n                      /*yield*/\n                      , this.web3Client.getMaticWeb3().eth.getTransactionReceipt(burnTxHash)];\n\n                    case 2:\n                      receipt = _a.sent();\n                      return [4\n                      /*yield*/\n                      , this.web3Client.getMaticWeb3().eth.getBlock(receipt.blockNumber, true\n                      /* returnTransactionObjects */\n                      )];\n\n                    case 3:\n                      block = _a.sent();\n                      assert_1.default.ok(new bn_js_1.default(lastChildBlock).gte(new bn_js_1.default(receipt.blockNumber)), 'Burn transaction has not been checkpointed as yet');\n                      return [4\n                      /*yield*/\n                      , ProofsUtil_1.default.getReceiptProof(receipt, block, this.web3Client.getMaticWeb3(), requestConcurrency)];\n\n                    case 4:\n                      receiptProof = _a.sent();\n                      logIndex = -1;\n\n                      switch (logEventSig) {\n                        case '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef':\n                        case '0xf94915c6d1fd521cee85359239227480c7e8776d7caf1fc3bacad5c269b66a14':\n                          logIndex = receipt.logs.findIndex(function (log) {\n                            return log.topics[0].toLowerCase() == logEventSig.toLowerCase() && log.topics[2].toLowerCase() == '0x0000000000000000000000000000000000000000000000000000000000000000';\n                          });\n                          break;\n\n                        case '0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62':\n                        case '0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb':\n                          logIndex = receipt.logs.findIndex(function (log) {\n                            return log.topics[0].toLowerCase() == logEventSig.toLowerCase() && log.topics[3].toLowerCase() == '0x0000000000000000000000000000000000000000000000000000000000000000';\n                          });\n                          break;\n\n                        default: // let's not do anything, this is going to be fail in\n                        // following `assert`\n\n                      }\n\n                      assert_1.default.ok(logIndex > -1, 'Log not found in receipt');\n                      nibbleArr = [];\n                      receiptProof.path.forEach(function (byte) {\n                        nibbleArr.push(Buffer.from('0' + (byte / 0x10).toString(16), 'hex'));\n                        nibbleArr.push(Buffer.from('0' + (byte % 0x10).toString(16), 'hex'));\n                      });\n                      return [2\n                      /*return*/\n                      , hash(receipt.blockNumber, ethereumjs_util_1.default.bufferToHex(Buffer.concat(nibbleArr)), logIndex)];\n                  }\n                });\n              });\n            };\n\n            ExitManager.prototype._encodePayload = function (headerNumber, buildBlockProof, blockNumber, timestamp, transactionsRoot, receiptsRoot, receipt, receiptParentNodes, path, logIndex) {\n              return ethereumjs_util_1.default.bufferToHex(ethereumjs_util_1.default.rlp.encode([headerNumber, buildBlockProof, blockNumber, timestamp, ethereumjs_util_1.default.bufferToHex(transactionsRoot), ethereumjs_util_1.default.bufferToHex(receiptsRoot), ethereumjs_util_1.default.bufferToHex(receipt), ethereumjs_util_1.default.bufferToHex(ethereumjs_util_1.default.rlp.encode(receiptParentNodes)), ethereumjs_util_1.default.bufferToHex(Buffer.concat([Buffer.from('00', 'hex'), path])), logIndex]));\n            };\n\n            return ExitManager;\n          }(ContractsBase_1.default);\n\n          exports.default = ExitManager;\n          /* WEBPACK VAR INJECTION */\n        }).call(this, __webpack_require__(\n        /*! ./../../node_modules/node-libs-browser/node_modules/buffer/index.js */\n        \"./node_modules/node-libs-browser/node_modules/buffer/index.js\").Buffer);\n        /***/\n      },\n\n      /***/\n      \"./src/common/MapPromise.ts\":\n      /*!**********************************!*\\\n        !*** ./src/common/MapPromise.ts ***!\n        \\**********************************/\n\n      /*! no static exports found */\n\n      /***/\n      function srcCommonMapPromiseTs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n          function adopt(value) {\n            return value instanceof P ? value : new P(function (resolve) {\n              resolve(value);\n            });\n          }\n\n          return new (P || (P = Promise))(function (resolve, reject) {\n            function fulfilled(value) {\n              try {\n                step(generator.next(value));\n              } catch (e) {\n                reject(e);\n              }\n            }\n\n            function rejected(value) {\n              try {\n                step(generator[\"throw\"](value));\n              } catch (e) {\n                reject(e);\n              }\n            }\n\n            function step(result) {\n              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n            }\n\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\n          });\n        };\n\n        var __generator = this && this.__generator || function (thisArg, body) {\n          var _ = {\n            label: 0,\n            sent: function sent() {\n              if (t[0] & 1) throw t[1];\n              return t[1];\n            },\n            trys: [],\n            ops: []\n          },\n              f,\n              y,\n              t,\n              g;\n          return g = {\n            next: verb(0),\n            \"throw\": verb(1),\n            \"return\": verb(2)\n          }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n            return this;\n          }), g;\n\n          function verb(n) {\n            return function (v) {\n              return step([n, v]);\n            };\n          }\n\n          function step(op) {\n            if (f) throw new TypeError(\"Generator is already executing.\");\n\n            while (_) {\n              try {\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n                if (y = 0, t) op = [op[0] & 2, t.value];\n\n                switch (op[0]) {\n                  case 0:\n                  case 1:\n                    t = op;\n                    break;\n\n                  case 4:\n                    _.label++;\n                    return {\n                      value: op[1],\n                      done: false\n                    };\n\n                  case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [0];\n                    continue;\n\n                  case 7:\n                    op = _.ops.pop();\n\n                    _.trys.pop();\n\n                    continue;\n\n                  default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                      _ = 0;\n                      continue;\n                    }\n\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                      _.label = op[1];\n                      break;\n                    }\n\n                    if (op[0] === 6 && _.label < t[1]) {\n                      _.label = t[1];\n                      t = op;\n                      break;\n                    }\n\n                    if (t && _.label < t[2]) {\n                      _.label = t[2];\n\n                      _.ops.push(op);\n\n                      break;\n                    }\n\n                    if (t[2]) _.ops.pop();\n\n                    _.trys.pop();\n\n                    continue;\n                }\n\n                op = body.call(thisArg, _);\n              } catch (e) {\n                op = [6, e];\n                y = 0;\n              } finally {\n                f = t = 0;\n              }\n            }\n\n            if (op[0] & 5) throw op[1];\n            return {\n              value: op[0] ? op[1] : void 0,\n              done: true\n            };\n          }\n        };\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.mapPromise = void 0;\n\n        var runPromises = function runPromises(promises, converter) {\n          var maps = promises.map(function (val, index) {\n            return converter(val, index);\n          });\n          return Promise.all(maps);\n        };\n\n        function mapPromise(values, converter, option) {\n          var _this = this;\n\n          if (option === void 0) {\n            option = {};\n          }\n\n          var valuesLength = values.length;\n          var concurrency = option.concurrency || valuesLength;\n          var result = [];\n\n          var limitPromiseRun = function limitPromiseRun() {\n            return __awaiter(_this, void 0, void 0, function () {\n              var promises, promiseResult;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    promises = values.splice(0, concurrency);\n                    return [4\n                    /*yield*/\n                    , runPromises(promises, converter)];\n\n                  case 1:\n                    promiseResult = _a.sent();\n                    result = result.concat(promiseResult);\n                    if (!(valuesLength > result.length)) return [3\n                    /*break*/\n                    , 3];\n                    return [4\n                    /*yield*/\n                    , limitPromiseRun()];\n\n                  case 2:\n                    _a.sent();\n\n                    _a.label = 3;\n\n                  case 3:\n                    return [2\n                    /*return*/\n                    , result];\n                }\n              });\n            });\n          };\n\n          return limitPromiseRun();\n        }\n\n        exports.mapPromise = mapPromise;\n        /***/\n      },\n\n      /***/\n      \"./src/common/SDKClient.ts\":\n      /*!*********************************!*\\\n        !*** ./src/common/SDKClient.ts ***!\n        \\*********************************/\n\n      /*! no static exports found */\n\n      /***/\n      function srcCommonSDKClientTs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        var __extends = this && this.__extends || function () {\n          var _extendStatics2 = function extendStatics(d, b) {\n            _extendStatics2 = Object.setPrototypeOf || {\n              __proto__: []\n            } instanceof Array && function (d, b) {\n              d.__proto__ = b;\n            } || function (d, b) {\n              for (var p in b) {\n                if (b.hasOwnProperty(p)) d[p] = b[p];\n              }\n            };\n\n            return _extendStatics2(d, b);\n          };\n\n          return function (d, b) {\n            _extendStatics2(d, b);\n\n            function __() {\n              this.constructor = d;\n            }\n\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n          };\n        }();\n\n        var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n          function adopt(value) {\n            return value instanceof P ? value : new P(function (resolve) {\n              resolve(value);\n            });\n          }\n\n          return new (P || (P = Promise))(function (resolve, reject) {\n            function fulfilled(value) {\n              try {\n                step(generator.next(value));\n              } catch (e) {\n                reject(e);\n              }\n            }\n\n            function rejected(value) {\n              try {\n                step(generator[\"throw\"](value));\n              } catch (e) {\n                reject(e);\n              }\n            }\n\n            function step(result) {\n              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n            }\n\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\n          });\n        };\n\n        var __generator = this && this.__generator || function (thisArg, body) {\n          var _ = {\n            label: 0,\n            sent: function sent() {\n              if (t[0] & 1) throw t[1];\n              return t[1];\n            },\n            trys: [],\n            ops: []\n          },\n              f,\n              y,\n              t,\n              g;\n          return g = {\n            next: verb(0),\n            \"throw\": verb(1),\n            \"return\": verb(2)\n          }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n            return this;\n          }), g;\n\n          function verb(n) {\n            return function (v) {\n              return step([n, v]);\n            };\n          }\n\n          function step(op) {\n            if (f) throw new TypeError(\"Generator is already executing.\");\n\n            while (_) {\n              try {\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n                if (y = 0, t) op = [op[0] & 2, t.value];\n\n                switch (op[0]) {\n                  case 0:\n                  case 1:\n                    t = op;\n                    break;\n\n                  case 4:\n                    _.label++;\n                    return {\n                      value: op[1],\n                      done: false\n                    };\n\n                  case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [0];\n                    continue;\n\n                  case 7:\n                    op = _.ops.pop();\n\n                    _.trys.pop();\n\n                    continue;\n\n                  default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                      _ = 0;\n                      continue;\n                    }\n\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                      _.label = op[1];\n                      break;\n                    }\n\n                    if (op[0] === 6 && _.label < t[1]) {\n                      _.label = t[1];\n                      t = op;\n                      break;\n                    }\n\n                    if (t && _.label < t[2]) {\n                      _.label = t[2];\n\n                      _.ops.push(op);\n\n                      break;\n                    }\n\n                    if (t[2]) _.ops.pop();\n\n                    _.trys.pop();\n\n                    continue;\n                }\n\n                op = body.call(thisArg, _);\n              } catch (e) {\n                op = [6, e];\n                y = 0;\n              } finally {\n                f = t = 0;\n              }\n            }\n\n            if (op[0] & 5) throw op[1];\n            return {\n              value: op[0] ? op[1] : void 0,\n              done: true\n            };\n          }\n        };\n\n        var __importDefault = this && this.__importDefault || function (mod) {\n          return mod && mod.__esModule ? mod : {\n            \"default\": mod\n          };\n        };\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n\n        var network_1 = __importDefault(__webpack_require__(\n        /*! @maticnetwork/meta/network */\n        \"@maticnetwork/meta/network\"));\n\n        var ContractsBase_1 = __importDefault(__webpack_require__(\n        /*! ../common/ContractsBase */\n        \"./src/common/ContractsBase.ts\"));\n\n        var Web3Client_1 = __importDefault(__webpack_require__(\n        /*! ../common/Web3Client */\n        \"./src/common/Web3Client.ts\"));\n\n        var SDKClient =\n        /** @class */\n        function (_super) {\n          __extends(SDKClient, _super);\n\n          function SDKClient(options) {\n            if (options === void 0) {\n              options = {};\n            }\n\n            var _this = this;\n\n            var web3Client = new Web3Client_1.default(options.parentProvider || options.network.Main.RPC, options.maticProvider || options.network.Matic.RPC, options.parentDefaultOptions || {}, options.maticDefaultOptions || {});\n            _this = _super.call(this, web3Client, options.network) || this;\n            return _this;\n          }\n\n          SDKClient.initializeNetwork = function (network, version) {\n            if (network === void 0) {\n              network = 'testnet';\n            }\n\n            if (version === void 0) {\n              version = 'mumbai';\n            }\n\n            var _network = new network_1.default(network, version);\n\n            if (!_network) throw new Error(\"network \" + network + \" - \" + version + \" is not supported\");\n            return _network;\n          };\n\n          SDKClient.prototype.setWallet = function (_wallet) {\n            this.web3Client.wallet = _wallet;\n          };\n\n          SDKClient.prototype.balanceOfERC20 = function (userAddress, token, options) {\n            if (options === void 0) {\n              options = {};\n            }\n\n            return __awaiter(this, void 0, void 0, function () {\n              var balance;\n              return __generator(this, function (_a) {\n                if (!token || !userAddress) {\n                  throw new Error('token address or user address is missing');\n                }\n\n                balance = this.getERC20TokenContract(token, options.parent).methods.balanceOf(userAddress).call();\n                return [2\n                /*return*/\n                , balance];\n              });\n            });\n          };\n\n          SDKClient.prototype.balanceOfERC721 = function (userAddress, token, options) {\n            if (options === void 0) {\n              options = {};\n            }\n\n            return __awaiter(this, void 0, void 0, function () {\n              var balance;\n              return __generator(this, function (_a) {\n                if (options && (!token || !userAddress)) {\n                  throw new Error('token address or user address is missing');\n                }\n\n                balance = this.getERC721TokenContract(token, options.parent).methods.balanceOf(userAddress).call();\n                return [2\n                /*return*/\n                , balance];\n              });\n            });\n          };\n\n          SDKClient.prototype.tokenOfOwnerByIndexERC721 = function (userAddress, token, index, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              var tokenID;\n              return __generator(this, function (_a) {\n                if (options && (!token || !userAddress)) {\n                  throw new Error('token address or user address is missing');\n                }\n\n                tokenID = this.getERC721TokenContract(token, options.parent).methods.tokenOfOwnerByIndex(userAddress, index).call();\n                return [2\n                /*return*/\n                , tokenID];\n              });\n            });\n          };\n\n          SDKClient.prototype.transferERC20Tokens = function (token, to, amount, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              var txObject, onRootChain, web3Options;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    if (options && (!options.from || !amount || !token || !to)) {\n                      throw new Error('options.from, to, token or amount is missing');\n                    }\n\n                    txObject = this.getERC20TokenContract(token, options.parent).methods.transfer(to, this.encode(amount));\n                    onRootChain = options.parent ? true : false;\n                    return [4\n                    /*yield*/\n                    , this.web3Client.fillOptions(txObject, onRootChain, options)];\n\n                  case 1:\n                    web3Options = _a.sent();\n\n                    if (web3Options.encodeAbi) {\n                      return [2\n                      /*return*/\n                      , Object.assign(web3Options, {\n                        data: txObject.encodeABI(),\n                        to: token\n                      })];\n                    }\n\n                    return [2\n                    /*return*/\n                    , this.web3Client.send(txObject, web3Options, options)];\n                }\n              });\n            });\n          };\n\n          SDKClient.prototype.transferERC721Tokens = function (token, to, tokenId, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              var txObject, onRootChain, web3Options;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    if (options && (!options.from || !tokenId || !token || !to)) {\n                      throw new Error('options.from, to, token or tokenId is missing');\n                    }\n\n                    txObject = this.getERC721TokenContract(token, options.parent).methods.transferFrom(options.from, to, tokenId);\n                    onRootChain = options.parent ? true : false;\n                    return [4\n                    /*yield*/\n                    , this.web3Client.fillOptions(txObject, onRootChain, options)];\n\n                  case 1:\n                    web3Options = _a.sent();\n\n                    if (web3Options.encodeAbi) {\n                      return [2\n                      /*return*/\n                      , Object.assign(web3Options, {\n                        data: txObject.encodeABI(),\n                        to: token\n                      })];\n                    }\n\n                    return [2\n                    /*return*/\n                    , this.web3Client.send(txObject, web3Options, options)];\n                }\n              });\n            });\n          };\n\n          SDKClient.prototype.transferMaticEth = function (to, amount, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              var token, txObject, web3Options;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    if (options && (!options.from || !amount || !to)) {\n                      throw new Error('options.from, to or amount is missing');\n                    }\n\n                    token = ContractsBase_1.default.MATIC_CHILD_TOKEN;\n                    txObject = this.getChildMaticContract().methods.transfer(to, this.encode(amount));\n                    options.value = this.encode(amount);\n                    return [4\n                    /*yield*/\n                    , this.web3Client.fillOptions(txObject, false\n                    /* onRootChain */\n                    , options)];\n\n                  case 1:\n                    web3Options = _a.sent();\n\n                    if (web3Options.encodeAbi) {\n                      return [2\n                      /*return*/\n                      , Object.assign(web3Options, {\n                        data: txObject.encodeABI(),\n                        to: token\n                      })];\n                    }\n\n                    return [2\n                    /*return*/\n                    , this.web3Client.send(txObject, web3Options, options)];\n                }\n              });\n            });\n          };\n\n          return SDKClient;\n        }(ContractsBase_1.default);\n\n        exports.default = SDKClient;\n        /***/\n      },\n\n      /***/\n      \"./src/common/Utils.ts\":\n      /*!*****************************!*\\\n        !*** ./src/common/Utils.ts ***!\n        \\*****************************/\n\n      /*! no static exports found */\n\n      /***/\n      function srcCommonUtilsTs(module, exports, __webpack_require__) {\n        \"use strict\";\n        /* WEBPACK VAR INJECTION */\n\n        (function (Buffer) {\n          var __importDefault = this && this.__importDefault || function (mod) {\n            return mod && mod.__esModule ? mod : {\n              \"default\": mod\n            };\n          };\n\n          Object.defineProperty(exports, \"__esModule\", {\n            value: true\n          });\n          exports.Utils = void 0;\n\n          var eth_sig_util_1 = __webpack_require__(\n          /*! eth-sig-util */\n          \"eth-sig-util\");\n\n          var ethereumjs_util_1 = __importDefault(__webpack_require__(\n          /*! ethereumjs-util */\n          \"ethereumjs-util\"));\n\n          var Utils =\n          /** @class */\n          function () {\n            function Utils() {}\n\n            Utils.prototype.getOrderHash = function (order) {\n              var orderData = Buffer.concat([ethereumjs_util_1.default.toBuffer(order.id), ethereumjs_util_1.default.toBuffer(order.token), ethereumjs_util_1.default.setLengthLeft(order.amount, 32)]);\n              return ethereumjs_util_1.default.keccak256(orderData);\n            };\n\n            Utils.prototype.getTypedData = function (_a) {\n              var token = _a.token,\n                  spender = _a.spender,\n                  tokenIdOrAmount = _a.tokenIdOrAmount,\n                  data = _a.data,\n                  expiration = _a.expiration,\n                  chainId = _a.chainId;\n              return {\n                types: {\n                  EIP712Domain: [{\n                    name: 'name',\n                    type: 'string'\n                  }, {\n                    name: 'version',\n                    type: 'string'\n                  }, {\n                    name: 'chainId',\n                    type: 'uint256'\n                  }, {\n                    name: 'contract',\n                    type: 'address'\n                  }],\n                  TokenTransferOrder: [{\n                    name: 'spender',\n                    type: 'address'\n                  }, {\n                    name: 'tokenIdOrAmount',\n                    type: 'uint256'\n                  }, {\n                    name: 'data',\n                    type: 'bytes32'\n                  }, {\n                    name: 'expiration',\n                    type: 'uint256'\n                  }]\n                },\n                domain: {\n                  name: 'Matic Network',\n                  version: '1',\n                  chainId: chainId,\n                  contract: token\n                },\n                primaryType: 'TokenTransferOrder',\n                message: {\n                  spender: spender,\n                  tokenIdOrAmount: tokenIdOrAmount,\n                  data: data,\n                  expiration: expiration\n                }\n              };\n            };\n\n            Utils.prototype.signEIP712TypedData = function (data, privateKey) {\n              return eth_sig_util_1.signTypedData(ethereumjs_util_1.default.toBuffer(privateKey), {\n                data: data\n              });\n            };\n\n            return Utils;\n          }();\n\n          exports.Utils = Utils;\n          /* WEBPACK VAR INJECTION */\n        }).call(this, __webpack_require__(\n        /*! ./../../node_modules/node-libs-browser/node_modules/buffer/index.js */\n        \"./node_modules/node-libs-browser/node_modules/buffer/index.js\").Buffer);\n        /***/\n      },\n\n      /***/\n      \"./src/common/Web3Client.ts\":\n      /*!**********************************!*\\\n        !*** ./src/common/Web3Client.ts ***!\n        \\**********************************/\n\n      /*! no static exports found */\n\n      /***/\n      function srcCommonWeb3ClientTs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n          function adopt(value) {\n            return value instanceof P ? value : new P(function (resolve) {\n              resolve(value);\n            });\n          }\n\n          return new (P || (P = Promise))(function (resolve, reject) {\n            function fulfilled(value) {\n              try {\n                step(generator.next(value));\n              } catch (e) {\n                reject(e);\n              }\n            }\n\n            function rejected(value) {\n              try {\n                step(generator[\"throw\"](value));\n              } catch (e) {\n                reject(e);\n              }\n            }\n\n            function step(result) {\n              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n            }\n\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\n          });\n        };\n\n        var __generator = this && this.__generator || function (thisArg, body) {\n          var _ = {\n            label: 0,\n            sent: function sent() {\n              if (t[0] & 1) throw t[1];\n              return t[1];\n            },\n            trys: [],\n            ops: []\n          },\n              f,\n              y,\n              t,\n              g;\n          return g = {\n            next: verb(0),\n            \"throw\": verb(1),\n            \"return\": verb(2)\n          }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n            return this;\n          }), g;\n\n          function verb(n) {\n            return function (v) {\n              return step([n, v]);\n            };\n          }\n\n          function step(op) {\n            if (f) throw new TypeError(\"Generator is already executing.\");\n\n            while (_) {\n              try {\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n                if (y = 0, t) op = [op[0] & 2, t.value];\n\n                switch (op[0]) {\n                  case 0:\n                  case 1:\n                    t = op;\n                    break;\n\n                  case 4:\n                    _.label++;\n                    return {\n                      value: op[1],\n                      done: false\n                    };\n\n                  case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [0];\n                    continue;\n\n                  case 7:\n                    op = _.ops.pop();\n\n                    _.trys.pop();\n\n                    continue;\n\n                  default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                      _ = 0;\n                      continue;\n                    }\n\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                      _.label = op[1];\n                      break;\n                    }\n\n                    if (op[0] === 6 && _.label < t[1]) {\n                      _.label = t[1];\n                      t = op;\n                      break;\n                    }\n\n                    if (t && _.label < t[2]) {\n                      _.label = t[2];\n\n                      _.ops.push(op);\n\n                      break;\n                    }\n\n                    if (t[2]) _.ops.pop();\n\n                    _.trys.pop();\n\n                    continue;\n                }\n\n                op = body.call(thisArg, _);\n              } catch (e) {\n                op = [6, e];\n                y = 0;\n              } finally {\n                f = t = 0;\n              }\n            }\n\n            if (op[0] & 5) throw op[1];\n            return {\n              value: op[0] ? op[1] : void 0,\n              done: true\n            };\n          }\n        };\n\n        var __importDefault = this && this.__importDefault || function (mod) {\n          return mod && mod.__esModule ? mod : {\n            \"default\": mod\n          };\n        };\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n\n        var web3_1 = __importDefault(__webpack_require__(\n        /*! web3 */\n        \"web3\"));\n\n        var logger = {\n          info: __webpack_require__(\n          /*! debug */\n          \"./node_modules/debug/src/browser.js\")('maticjs:Web3Client'),\n          debug: __webpack_require__(\n          /*! debug */\n          \"./node_modules/debug/src/browser.js\")('maticjs:debug:Web3Client')\n        };\n        var EXTRAGASFORPROXYCALL = 1000000;\n\n        var Web3Client =\n        /** @class */\n        function () {\n          function Web3Client(parentProvider, maticProvider, parentDefaultOptions, maticDefaultOptions) {\n            this.parentWeb3 = new web3_1.default(parentProvider);\n            this.web3 = new web3_1.default(maticProvider);\n            this.parentDefaultOptions = parentDefaultOptions;\n            this.maticDefaultOptions = maticDefaultOptions;\n            this.web3.extend({\n              property: 'bor',\n              methods: [{\n                name: 'getRootHash',\n                call: 'eth_getRootHash',\n                params: 2,\n                inputFormatter: [Number, Number],\n                outputFormatter: String\n              }]\n            });\n          }\n\n          Object.defineProperty(Web3Client.prototype, \"wallet\", {\n            set: function set(_wallet) {\n              this.parentWeb3.eth.accounts.wallet.add(_wallet);\n              this.web3.eth.accounts.wallet.add(_wallet);\n            },\n            enumerable: false,\n            configurable: true\n          });\n\n          Web3Client.prototype.call = function (method, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              return __generator(this, function (_a) {\n                return [2\n                /*return*/\n                , method.call(options || this.parentDefaultOptions)];\n              });\n            });\n          };\n\n          Web3Client.prototype.fillOptions = function (txObject, onRootChain, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              return __generator(this, function (_a) {\n                if (onRootChain) {\n                  return [2\n                  /*return*/\n                  , this._fillOptions(txObject, this.parentWeb3, options || this.parentDefaultOptions)];\n                }\n\n                return [2\n                /*return*/\n                , this._fillOptions(txObject, this.web3, options || this.maticDefaultOptions)];\n              });\n            });\n          };\n\n          Web3Client.prototype._fillOptions = function (txObject, web3, _options) {\n            return __awaiter(this, void 0, void 0, function () {\n              var from, _a, gasLimit, gasPrice, nonce, chainId;\n\n              return __generator(this, function (_b) {\n                switch (_b.label) {\n                  case 0:\n                    if (!_options.from) throw new Error('from is not specified');\n                    from = _options.from;\n                    delete txObject.chainId;\n                    return [4\n                    /*yield*/\n                    , Promise.all([!(_options.gasLimit || _options.gas) ? txObject.estimateGas({\n                      from: from,\n                      value: _options.value\n                    }) : _options.gasLimit || _options.gas, !_options.gasPrice ? web3.eth.getGasPrice() : _options.gasPrice, !_options.nonce ? web3.eth.getTransactionCount(from, 'pending') : _options.nonce, !_options.chainId ? web3.eth.net.getId() : _options.chainId])];\n\n                  case 1:\n                    _a = _b.sent(), gasLimit = _a[0], gasPrice = _a[1], nonce = _a[2], chainId = _a[3];\n                    return [2\n                    /*return*/\n                    , {\n                      from: from,\n                      gas: gasLimit,\n                      gasLimit: gasLimit,\n                      gasPrice: gasPrice,\n                      nonce: nonce,\n                      chainId: chainId,\n                      value: _options.value || 0,\n                      to: _options.to || null,\n                      data: _options.data,\n                      encodeAbi: _options.encodeAbi || false\n                    }];\n                }\n              });\n            });\n          };\n\n          Web3Client.prototype.wrapWeb3Promise = function (promise, callbacks) {\n            if (callbacks) {\n              if (callbacks.onTransactionHash) {\n                promise.on('transactionHash', callbacks.onTransactionHash);\n              }\n\n              if (callbacks.onReceipt) {\n                promise.on('receipt', callbacks.onReceipt);\n              }\n\n              if (callbacks.onConfirmation) {\n                promise.on('confirmation', callbacks.onConfirmation);\n              }\n\n              if (callbacks.onError) {\n                promise.on('error', callbacks.onError);\n              }\n            }\n\n            return promise;\n          };\n\n          Web3Client.prototype.send = function (txObject, web3Options, callbacks) {\n            var _web3Options = web3Options || {}; // since we use the delegated proxy patterns, the following should be a good way to provide enough gas\n            // apparently even when provided with a buffer of 20k, the call reverts. This shouldn't be happening because the actual gas used is less than what the estimation returns\n            // providing higher buffer for now\n            // @todo handle hex values of gas\n\n\n            if (web3Options.parent) {\n              _web3Options.gas = (_web3Options.gas || this.parentDefaultOptions.gas) + EXTRAGASFORPROXYCALL;\n              _web3Options.gasPrice = _web3Options.gasPrice || this.parentDefaultOptions.gasPrice;\n            } else {\n              _web3Options.gas = _web3Options.gas || this.maticDefaultOptions.gas;\n              _web3Options.gasPrice = _web3Options.gasPrice || this.maticDefaultOptions.gasPrice;\n            }\n\n            logger.debug('sending tx with', {\n              _web3Options: _web3Options\n            });\n            return this.wrapWeb3Promise(txObject.send(_web3Options), callbacks);\n          };\n\n          Web3Client.prototype.getParentWeb3 = function () {\n            return this.parentWeb3;\n          };\n\n          Web3Client.prototype.getMaticWeb3 = function () {\n            return this.web3;\n          };\n\n          Web3Client.prototype.getWallet = function () {\n            return this.web3.eth.accounts.wallet;\n          };\n\n          Web3Client.prototype.setParentDefaultOptions = function (options) {\n            this.parentDefaultOptions = options;\n          };\n\n          Web3Client.prototype.setMaticDefaultOptions = function (options) {\n            this.maticDefaultOptions = options;\n          };\n\n          Web3Client.prototype.setParentProvider = function (provider) {\n            this.parentWeb3 = new web3_1.default(provider);\n          };\n\n          return Web3Client;\n        }();\n\n        exports.default = Web3Client;\n        /***/\n      },\n\n      /***/\n      \"./src/index.ts\":\n      /*!**********************!*\\\n        !*** ./src/index.ts ***!\n        \\**********************/\n\n      /*! no static exports found */\n\n      /***/\n      function srcIndexTs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        var __extends = this && this.__extends || function () {\n          var _extendStatics3 = function extendStatics(d, b) {\n            _extendStatics3 = Object.setPrototypeOf || {\n              __proto__: []\n            } instanceof Array && function (d, b) {\n              d.__proto__ = b;\n            } || function (d, b) {\n              for (var p in b) {\n                if (b.hasOwnProperty(p)) d[p] = b[p];\n              }\n            };\n\n            return _extendStatics3(d, b);\n          };\n\n          return function (d, b) {\n            _extendStatics3(d, b);\n\n            function __() {\n              this.constructor = d;\n            }\n\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n          };\n        }();\n\n        var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n          function adopt(value) {\n            return value instanceof P ? value : new P(function (resolve) {\n              resolve(value);\n            });\n          }\n\n          return new (P || (P = Promise))(function (resolve, reject) {\n            function fulfilled(value) {\n              try {\n                step(generator.next(value));\n              } catch (e) {\n                reject(e);\n              }\n            }\n\n            function rejected(value) {\n              try {\n                step(generator[\"throw\"](value));\n              } catch (e) {\n                reject(e);\n              }\n            }\n\n            function step(result) {\n              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n            }\n\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\n          });\n        };\n\n        var __generator = this && this.__generator || function (thisArg, body) {\n          var _ = {\n            label: 0,\n            sent: function sent() {\n              if (t[0] & 1) throw t[1];\n              return t[1];\n            },\n            trys: [],\n            ops: []\n          },\n              f,\n              y,\n              t,\n              g;\n          return g = {\n            next: verb(0),\n            \"throw\": verb(1),\n            \"return\": verb(2)\n          }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n            return this;\n          }), g;\n\n          function verb(n) {\n            return function (v) {\n              return step([n, v]);\n            };\n          }\n\n          function step(op) {\n            if (f) throw new TypeError(\"Generator is already executing.\");\n\n            while (_) {\n              try {\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n                if (y = 0, t) op = [op[0] & 2, t.value];\n\n                switch (op[0]) {\n                  case 0:\n                  case 1:\n                    t = op;\n                    break;\n\n                  case 4:\n                    _.label++;\n                    return {\n                      value: op[1],\n                      done: false\n                    };\n\n                  case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [0];\n                    continue;\n\n                  case 7:\n                    op = _.ops.pop();\n\n                    _.trys.pop();\n\n                    continue;\n\n                  default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                      _ = 0;\n                      continue;\n                    }\n\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                      _.label = op[1];\n                      break;\n                    }\n\n                    if (op[0] === 6 && _.label < t[1]) {\n                      _.label = t[1];\n                      t = op;\n                      break;\n                    }\n\n                    if (t && _.label < t[2]) {\n                      _.label = t[2];\n\n                      _.ops.push(op);\n\n                      break;\n                    }\n\n                    if (t[2]) _.ops.pop();\n\n                    _.trys.pop();\n\n                    continue;\n                }\n\n                op = body.call(thisArg, _);\n              } catch (e) {\n                op = [6, e];\n                y = 0;\n              } finally {\n                f = t = 0;\n              }\n            }\n\n            if (op[0] & 5) throw op[1];\n            return {\n              value: op[0] ? op[1] : void 0,\n              done: true\n            };\n          }\n        };\n\n        var __importDefault = this && this.__importDefault || function (mod) {\n          return mod && mod.__esModule ? mod : {\n            \"default\": mod\n          };\n        };\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.MaticPOSClient = void 0;\n\n        var SDKClient_1 = __importDefault(__webpack_require__(\n        /*! ./common/SDKClient */\n        \"./src/common/SDKClient.ts\"));\n\n        var Utils_1 = __webpack_require__(\n        /*! ./common/Utils */\n        \"./src/common/Utils.ts\");\n\n        var DepositManager_1 = __importDefault(__webpack_require__(\n        /*! ./root/DepositManager */\n        \"./src/root/DepositManager.ts\"));\n\n        var POSRootChainManager_1 = __importDefault(__webpack_require__(\n        /*! ./root/POSRootChainManager */\n        \"./src/root/POSRootChainManager.ts\"));\n\n        var Registry_1 = __importDefault(__webpack_require__(\n        /*! ./root/Registry */\n        \"./src/root/Registry.ts\"));\n\n        var RootChain_1 = __importDefault(__webpack_require__(\n        /*! ./root/RootChain */\n        \"./src/root/RootChain.ts\"));\n\n        var WithdrawManager_1 = __importDefault(__webpack_require__(\n        /*! ./root/WithdrawManager */\n        \"./src/root/WithdrawManager.ts\"));\n\n        var MapPromise_1 = __webpack_require__(\n        /*! ./common/MapPromise */\n        \"./src/common/MapPromise.ts\");\n\n        var MaticPOSClient =\n        /** @class */\n        function (_super) {\n          __extends(MaticPOSClient, _super);\n\n          function MaticPOSClient(options) {\n            if (options === void 0) {\n              options = {};\n            }\n\n            var _this = this;\n\n            options.network = SDKClient_1.default.initializeNetwork(options.network, options.version);\n\n            if (!options.rootChain) {\n              options.rootChain = options.network.Main.Contracts.RootChainProxy;\n            }\n\n            _this = _super.call(this, options) || this;\n            _this.rootChain = new RootChain_1.default(options, _this.web3Client);\n            _this.posRootChainManager = new POSRootChainManager_1.default(options, _this.rootChain, _this.web3Client);\n            return _this;\n          }\n\n          MaticPOSClient.prototype.approveERC20ForDeposit = function (rootToken, amount, options) {\n            if (options && (!options.from || !amount || !rootToken)) {\n              throw new Error('options.from, rootToken or amount is missing');\n            }\n\n            return this.posRootChainManager.approveERC20(rootToken, amount, options);\n          };\n\n          MaticPOSClient.prototype.approveMaxERC20ForDeposit = function (rootToken, options) {\n            if (options && (!options.from || !rootToken)) {\n              throw new Error('options.from, rootToken is missing');\n            }\n\n            return this.posRootChainManager.approveMaxERC20(rootToken, options);\n          };\n\n          MaticPOSClient.prototype.getERC20Allowance = function (userAddress, token, options) {\n            if (options && (!token || !userAddress)) {\n              throw new Error('user address, token is missing');\n            }\n\n            return this.posRootChainManager.allowanceOfERC20(userAddress, token, options);\n          };\n\n          MaticPOSClient.prototype.depositERC20ForUser = function (rootToken, user, amount, options) {\n            if (options && (!options.from || !amount || !rootToken || !user)) {\n              throw new Error('options.from, rootToken, user, or amount is missing');\n            }\n\n            return this.posRootChainManager.depositERC20ForUser(rootToken, amount, user, options);\n          };\n\n          MaticPOSClient.prototype.depositEtherForUser = function (user, amount, options) {\n            if (options && (!options.from || !amount || !user)) {\n              throw new Error('options.from, user or amount is missing');\n            }\n\n            return this.posRootChainManager.depositEtherForUser(amount, user, options);\n          };\n\n          MaticPOSClient.prototype.burnERC20 = function (childToken, amount, options) {\n            if (!this.web3Client.web3.utils.isAddress(childToken)) {\n              throw new Error(childToken + \" is not a valid token address\");\n            }\n\n            if (!amount) {\n              // ${amount} will stringify it while printing which might be a problem\n              throw new Error(amount + \" is not a amount\");\n            }\n\n            if (options && !options.from) {\n              throw new Error(\"options.from is missing\");\n            }\n\n            return this.posRootChainManager.burnERC20(childToken, amount, options);\n          };\n\n          MaticPOSClient.prototype.exitERC20 = function (txHash, options) {\n            if (!txHash) {\n              throw new Error(\"txHash not provided\");\n            }\n\n            if (options && !options.from) {\n              throw new Error(\"from missing\");\n            }\n\n            if (options && options.legacyProof) {\n              return this.posRootChainManager.exitERC20(txHash, options);\n            } else {\n              return this.posRootChainManager.exitERC20Hermoine(txHash, options);\n            }\n          };\n\n          MaticPOSClient.prototype.isERC20ExitProcessed = function (txHash) {\n            if (!txHash) {\n              throw new Error(\"txHash not provided\");\n            }\n\n            return this.posRootChainManager.isERC20ExitProcessed(txHash);\n          };\n\n          MaticPOSClient.prototype.approveERC721ForDeposit = function (rootToken, tokenId, options) {\n            if (options && (!options.from || !tokenId || !rootToken)) {\n              throw new Error('options.from, rootToken or tokenId is missing');\n            }\n\n            return this.posRootChainManager.approveERC721(rootToken, tokenId, options);\n          };\n\n          MaticPOSClient.prototype.isApprovedERC721ForDeposit = function (rootToken, tokenId, options) {\n            if (options && (!options.from || !tokenId || !rootToken)) {\n              throw new Error('options.from, rootToken or tokenId is missing');\n            }\n\n            return this.posRootChainManager.isApprovedERC721(rootToken, tokenId, options);\n          };\n\n          MaticPOSClient.prototype.approveAllERC721ForDeposit = function (rootToken, options) {\n            if (options && (!options.from || !rootToken)) {\n              throw new Error('options.from, rootToken is missing');\n            }\n\n            return this.posRootChainManager.approveAllERC721(rootToken, options);\n          };\n\n          MaticPOSClient.prototype.isApprovedAllERC721ForDeposit = function (rootToken, userAddress, options) {\n            if (options && (!options.from || !rootToken)) {\n              throw new Error('options.from, rootToken is missing');\n            }\n\n            return this.posRootChainManager.isApprovedForAllERC721(rootToken, userAddress, options);\n          };\n\n          MaticPOSClient.prototype.depositERC721ForUser = function (rootToken, user, tokenId, options) {\n            if (options && (!options.from || !tokenId || !rootToken || !user)) {\n              throw new Error('options.from, rootToken, user, or tokenId is missing');\n            }\n\n            return this.posRootChainManager.depositERC721ForUser(rootToken, tokenId, user, options);\n          };\n\n          MaticPOSClient.prototype.depositBatchERC721ForUser = function (rootToken, user, tokenIds, options) {\n            if (options && (!options.from || !tokenIds || !rootToken || !user)) {\n              throw new Error('options.from, rootToken, user, or tokenIds is missing');\n            }\n\n            if (tokenIds.length > 20) {\n              throw new Error('Number of tokens being deposited can not exceed the limit of 20');\n            }\n\n            return this.posRootChainManager.depositBatchERC721ForUser(rootToken, tokenIds, user, options);\n          };\n\n          MaticPOSClient.prototype.burnERC721 = function (childToken, tokenId, options) {\n            if (!this.web3Client.web3.utils.isAddress(childToken)) {\n              throw new Error(childToken + \" is not a valid token address\");\n            }\n\n            if (!tokenId) {\n              // ${tokenId} will stringify it while printing which might be a problem\n              throw new Error(tokenId + \" is not a tokenId\");\n            }\n\n            if (options && !options.from) {\n              throw new Error(\"options.from is missing\");\n            }\n\n            return this.posRootChainManager.burnERC721(childToken, tokenId, options);\n          };\n\n          MaticPOSClient.prototype.burnBatchERC721 = function (childToken, tokenIds, options) {\n            if (!this.web3Client.web3.utils.isAddress(childToken)) {\n              throw new Error(childToken + \" is not a valid token address\");\n            }\n\n            if (!tokenIds) {\n              // ${tokenId} will stringify it while printing which might be a problem\n              throw new Error(\"tokenIds is missing\");\n            }\n\n            if (tokenIds.length > 20) {\n              throw new Error('Number of tokens being withdrawn can not exceed the limit of 20');\n            }\n\n            if (options && !options.from) {\n              throw new Error(\"options.from is missing\");\n            }\n\n            return this.posRootChainManager.burnBatchERC721(childToken, tokenIds, options);\n          };\n\n          MaticPOSClient.prototype.exitERC721 = function (txHash, options) {\n            if (!txHash) {\n              throw new Error(\"txHash not provided\");\n            }\n\n            if (options && !options.from) {\n              throw new Error(\"options.from is missing\");\n            }\n\n            if (options && options.legacyProof) {\n              return this.posRootChainManager.exitERC721(txHash, options);\n            } else {\n              return this.posRootChainManager.exitERC721Hermoine(txHash, options);\n            }\n          };\n\n          MaticPOSClient.prototype.exitBatchERC721 = function (txHash, options) {\n            if (!txHash) {\n              throw new Error(\"txHash not provided\");\n            }\n\n            if (options && !options.from) {\n              throw new Error(\"options.from is missing\");\n            }\n\n            if (options && options.legacyProof) {\n              return this.posRootChainManager.exitBatchERC721(txHash, options);\n            } else {\n              return this.posRootChainManager.exitBatchERC721Hermoine(txHash, options);\n            }\n          };\n\n          MaticPOSClient.prototype.exitERC721WithMetadata = function (txHash, options) {\n            if (!txHash) {\n              throw new Error(\"txHash not provided\");\n            }\n\n            if (options && !options.from) {\n              throw new Error(\"options.from is missing\");\n            }\n\n            if (options && options.legacyProof) {\n              return this.posRootChainManager.exitERC721WithMetadata(txHash, options);\n            } else {\n              return this.posRootChainManager.exitERC721WithMetadataHermoine(txHash, options);\n            }\n          };\n\n          MaticPOSClient.prototype.isERC721ExitProcessed = function (txHash) {\n            if (!txHash) {\n              throw new Error(\"txHash not provided\");\n            }\n\n            return this.posRootChainManager.isERC721ExitProcessed(txHash);\n          };\n\n          MaticPOSClient.prototype.isBatchERC721ExitProcessed = function (txHash) {\n            if (!txHash) {\n              throw new Error(\"txHash not provided\");\n            }\n\n            return this.posRootChainManager.isBatchERC721ExitProcessed(txHash);\n          };\n\n          MaticPOSClient.prototype.approveERC1155ForDeposit = function (rootToken, options) {\n            if (options && (!options.from || !rootToken)) {\n              throw new Error('options.from or rootToken is missing');\n            }\n\n            return this.posRootChainManager.approveERC1155(rootToken, options);\n          };\n\n          MaticPOSClient.prototype.approveMintableERC1155ForDeposit = function (rootToken, options) {\n            if (options && (!options.from || !rootToken)) {\n              throw new Error('options.from or rootToken is missing');\n            }\n\n            return this.posRootChainManager.approveMintableERC1155(rootToken, options);\n          };\n\n          MaticPOSClient.prototype.depositSingleERC1155ForUser = function (rootToken, user, tokenId, amount, data, options) {\n            if (options && (!options.from || !tokenId || !amount || !rootToken || !user)) {\n              throw new Error('options.from, rootToken, user, tokenId or amount is missing');\n            }\n\n            return this.posRootChainManager.depositSingleERC1155ForUser(rootToken, tokenId, amount, user, data, options);\n          };\n\n          MaticPOSClient.prototype.depositBatchERC1155ForUser = function (rootToken, user, tokenIds, amounts, data, options) {\n            if (options && (!options.from || !tokenIds || !rootToken || !user)) {\n              throw new Error('options.from, rootToken, user, tokenIds or amounts is missing');\n            }\n\n            return this.posRootChainManager.depositBatchERC1155ForUser(rootToken, tokenIds, amounts, user, data, options);\n          };\n\n          MaticPOSClient.prototype.burnSingleERC1155 = function (childToken, tokenId, amount, options) {\n            if (!this.web3Client.web3.utils.isAddress(childToken)) {\n              throw new Error(childToken + \" is not a valid token address\");\n            }\n\n            if (!tokenId || !amount) {\n              throw new Error(\"tokenId or amount is missing\");\n            }\n\n            if (options && !options.from) {\n              throw new Error(\"options.from is missing\");\n            }\n\n            return this.posRootChainManager.burnSingleERC1155(childToken, tokenId, amount, options);\n          };\n\n          MaticPOSClient.prototype.burnBatchERC1155 = function (childToken, tokenIds, amounts, options) {\n            if (!this.web3Client.web3.utils.isAddress(childToken)) {\n              throw new Error(childToken + \" is not a valid token address\");\n            }\n\n            if (!tokenIds || !amounts) {\n              throw new Error(\"tokenIds or amounts missing\");\n            }\n\n            if (options && !options.from) {\n              throw new Error(\"options.from is missing\");\n            }\n\n            return this.posRootChainManager.burnBatchERC1155(childToken, tokenIds, amounts, options);\n          };\n\n          MaticPOSClient.prototype.exitSingleERC1155 = function (txHash, options) {\n            if (!txHash) {\n              throw new Error(\"txHash not provided\");\n            }\n\n            if (options && !options.from) {\n              throw new Error(\"options.from is missing\");\n            }\n\n            if (options && options.legacyProof) {\n              return this.posRootChainManager.exitSingleERC1155(txHash, options);\n            } else {\n              return this.posRootChainManager.exitSingleERC1155Hermoine(txHash, options);\n            }\n          };\n\n          MaticPOSClient.prototype.isSingleERC1155ExitProcessed = function (txHash) {\n            if (!txHash) {\n              throw new Error(\"txHash not provided\");\n            }\n\n            return this.posRootChainManager.isSingleERC1155ExitProcessed(txHash);\n          };\n\n          MaticPOSClient.prototype.exitBatchERC1155 = function (txHash, options) {\n            if (!txHash) {\n              throw new Error(\"txHash not provided\");\n            }\n\n            if (options && !options.from) {\n              throw new Error(\"options.from is missing\");\n            }\n\n            if (options && options.legacyProof) {\n              return this.posRootChainManager.exitBatchERC1155(txHash, options);\n            } else {\n              return this.posRootChainManager.exitBatchERC1155Hermoine(txHash, options);\n            }\n          };\n\n          MaticPOSClient.prototype.isBatchERC1155ExitProcessed = function (txHash) {\n            if (!txHash) {\n              throw new Error(\"txHash not provided\");\n            }\n\n            return this.posRootChainManager.isBatchERC1155ExitProcessed(txHash);\n          };\n\n          return MaticPOSClient;\n        }(SDKClient_1.default);\n\n        exports.MaticPOSClient = MaticPOSClient;\n\n        var Matic =\n        /** @class */\n        function (_super) {\n          __extends(Matic, _super);\n\n          function Matic(options) {\n            if (options === void 0) {\n              options = {};\n            }\n\n            var _this = this;\n\n            var network = SDKClient_1.default.initializeNetwork(options.network, options.version); // override contract addresses if they were provided during initialization\n\n            options = Object.assign({\n              registry: network.Main.Contracts.Registry,\n              rootChain: network.Main.Contracts.RootChainProxy,\n              depositManager: network.Main.Contracts.DepositManagerProxy,\n              withdrawManager: network.Main.Contracts.WithdrawManagerProxy\n            }, options);\n            options.network = network;\n            _this = _super.call(this, options) || this;\n            _this.registry = new Registry_1.default(options, _this.web3Client);\n            _this.rootChain = new RootChain_1.default(options, _this.web3Client);\n            _this.depositManager = new DepositManager_1.default(options, _this.web3Client, _this.registry);\n            _this.withdrawManager = new WithdrawManager_1.default(options, _this.rootChain, _this.web3Client, _this.registry);\n            _this.utils = new Utils_1.Utils();\n            return _this;\n          }\n\n          Matic.prototype.initialize = function () {\n            return Promise.all([this.withdrawManager.initialize(), this.depositManager.initialize()]);\n          };\n\n          Matic.prototype.transferEther = function (to, amount, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              var from, value, maticWeth, web3Object, _a, _options;\n\n              return __generator(this, function (_b) {\n                switch (_b.label) {\n                  case 0:\n                    if (options && (!options.from || !amount || !to)) {\n                      throw new Error('Missing Parameters');\n                    }\n\n                    from = options.from;\n                    value = this.encode(amount);\n                    if (!!options.parent) return [3\n                    /*break*/\n                    , 2];\n                    return [4\n                    /*yield*/\n                    , this.registry.registry.methods.getWethTokenAddress().call()];\n\n                  case 1:\n                    maticWeth = _b.sent();\n                    return [2\n                    /*return*/\n                    , this.transferERC20Tokens(maticWeth, to, value, options)];\n\n                  case 2:\n                    web3Object = this.web3Client.getParentWeb3();\n                    if (!!options.gas) return [3\n                    /*break*/\n                    , 4];\n                    _a = options;\n                    return [4\n                    /*yield*/\n                    , web3Object.eth.estimateGas({\n                      from: from,\n                      value: value\n                    })];\n\n                  case 3:\n                    _a.gas = _b.sent();\n                    _b.label = 4;\n\n                  case 4:\n                    Object.assign(options, {\n                      value: value,\n                      to: to\n                    });\n                    return [4\n                    /*yield*/\n                    , this.web3Client.fillOptions(options\n                    /* txObject */\n                    , true\n                    /* onRootChain */\n                    , options)];\n\n                  case 5:\n                    _options = _b.sent();\n                    return [2\n                    /*return*/\n                    , _options.encodeAbi ? _options : this.web3Client.wrapWeb3Promise(web3Object.eth.sendTransaction(_options), options)];\n                }\n              });\n            });\n          };\n\n          Matic.prototype.depositEther = function (amount, options) {\n            if (options && (!options.from || !amount)) {\n              throw new Error('options.from or amount is missing');\n            }\n\n            return this.depositManager.depositEther(amount, options);\n          };\n\n          Matic.prototype.depositStatusFromTxHash = function (txHash) {\n            if (!txHash) {\n              throw new Error('txHash is missing');\n            }\n\n            return this.depositManager.depositStatusFromTxHash(txHash);\n          };\n\n          Matic.prototype.approveERC20TokensForDeposit = function (token, amount, options) {\n            if (options && (!options.from || !amount || !token)) {\n              throw new Error('options.from, token or amount is missing');\n            }\n\n            return this.depositManager.approveERC20(token, amount, options);\n          };\n\n          Matic.prototype.approveMaxERC20TokensForDeposit = function (token, options) {\n            if (options && (!options.from || !token)) {\n              throw new Error('options.from, token is missing');\n            }\n\n            return this.depositManager.approveMaxERC20(token, options);\n          };\n\n          Matic.prototype.getERC20Allowance = function (userAddress, token, options) {\n            if (options && (!token || !userAddress)) {\n              throw new Error('user address, token is missing');\n            }\n\n            return this.depositManager.allowanceOfERC20(userAddress, token, options);\n          };\n\n          Matic.prototype.getTransferSignature = function (sellOrder, buyOrder, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              var orderObj, orderHash, chainId, dataToSign, typedData, wallet;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    if (!sellOrder.orderId || !sellOrder.spender) {\n                      throw new Error('orderId or spender missing from sell order');\n                    }\n\n                    if (!options.from) {\n                      throw new Error('options.from is missing');\n                    }\n\n                    orderObj = {\n                      token: buyOrder.token,\n                      amount: buyOrder.amount,\n                      id: sellOrder.orderId,\n                      expiration: sellOrder.expiry\n                    };\n                    orderHash = this.utils.getOrderHash(orderObj);\n                    return [4\n                    /*yield*/\n                    , this.web3Client.web3.eth.net.getId()];\n\n                  case 1:\n                    chainId = _a.sent();\n                    dataToSign = {\n                      token: sellOrder.token,\n                      tokenIdOrAmount: sellOrder.amount,\n                      spender: sellOrder.spender,\n                      data: orderHash,\n                      expiration: sellOrder.expiry,\n                      chainId: chainId\n                    };\n                    typedData = this.utils.getTypedData(dataToSign);\n                    wallet = this.web3Client.getWallet();\n                    return [2\n                    /*return*/\n                    , this.utils.signEIP712TypedData(typedData, wallet[options.from].privateKey)];\n                }\n              });\n            });\n          };\n\n          Matic.prototype.transferWithSignature = function (sig, sellOrder, buyOrder, to, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              var web3Util, data, txObj, web3Options;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    if (!options.from) {\n                      throw new Error('options.from is missing');\n                    }\n\n                    web3Util = this.web3Client.web3.utils;\n                    data = web3Util.soliditySha3({\n                      t: 'bytes32',\n                      v: sellOrder.orderId\n                    }, {\n                      t: 'address',\n                      v: buyOrder.token\n                    }, {\n                      t: 'uint256',\n                      v: buyOrder.amount\n                    });\n                    txObj = this.getERC721TokenContract(sellOrder.token).methods.transferWithSig(sig, sellOrder.amount, data, sellOrder.expiry, to);\n                    return [4\n                    /*yield*/\n                    , this.web3Client.fillOptions(txObj, false\n                    /* onRootChain */\n                    , options)];\n\n                  case 1:\n                    web3Options = _a.sent();\n                    return [2\n                    /*return*/\n                    , this.web3Client.send(txObj, web3Options, options)];\n                }\n              });\n            });\n          };\n\n          Matic.prototype.depositERC20ForUser = function (token, user, amount, options) {\n            if (options && (!options.from || !amount || !token)) {\n              throw new Error('options.from, token or amount is missing');\n            }\n\n            return this.depositManager.depositERC20ForUser(token, amount, user, options);\n          };\n\n          Matic.prototype.safeDepositERC721Tokens = function (token, tokenId, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              var txObject, web3Options;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    if (!options || !options.from || !tokenId || !token) {\n                      throw new Error('options.from, token or tokenId is missing');\n                    }\n\n                    txObject = this.getERC721TokenContract(token, true).methods.safeTransferFrom(options.from, this.depositManager.getAddress(), tokenId);\n                    return [4\n                    /*yield*/\n                    , this.web3Client.fillOptions(txObject, true\n                    /* onRootChain */\n                    , options)];\n\n                  case 1:\n                    web3Options = _a.sent();\n\n                    if (web3Options.encodeAbi) {\n                      return [2\n                      /*return*/\n                      , Object.assign(web3Options, {\n                        data: txObject.encodeABI(),\n                        to: token\n                      })];\n                    }\n\n                    return [2\n                    /*return*/\n                    , this.web3Client.send(txObject, web3Options, options)];\n                }\n              });\n            });\n          };\n\n          Matic.prototype.startWithdraw = function (token, amount, options) {\n            this._validateInputs(token, amount, options);\n\n            return this.withdrawManager.burnERC20Tokens(token, amount, options);\n          };\n\n          Matic.prototype.startWithdrawForNFT = function (token, tokenId, options) {\n            this._validateInputs(token, tokenId, options);\n\n            return this.withdrawManager.burnERC721Token(token, tokenId, options);\n          };\n\n          Matic.prototype.withdraw = function (txHash, options) {\n            if (!txHash) {\n              throw new Error(\"txHash not provided\");\n            }\n\n            if (options && !options.from) {\n              throw new Error(\"options.from is missing\");\n            }\n\n            if (options && options.legacyProof) {\n              return this.withdrawManager.startExitWithBurntERC20Tokens(txHash, options);\n            } else {\n              return this.withdrawManager.startExitWithBurntERC20TokensHermoine(txHash, options);\n            }\n          };\n\n          Matic.prototype.withdrawNFT = function (txHash, options) {\n            if (!txHash) {\n              throw new Error(\"txHash not provided\");\n            }\n\n            if (options && !options.from) {\n              throw new Error(\"options.from is missing\");\n            }\n\n            if (options && options.legacyProof) {\n              return this.withdrawManager.startExitWithBurntERC721Tokens(txHash, options);\n            } else {\n              return this.withdrawManager.startExitWithBurntERC721TokensHermoine(txHash, options);\n            }\n          };\n\n          Matic.prototype.processExits = function (tokenAddress, options) {\n            return this.withdrawManager.processExits(tokenAddress, options);\n          };\n\n          Matic.prototype._validateInputs = function (token, amountOrTokenId, options) {\n            if (!this.web3Client.web3.utils.isAddress(this.web3Client.web3.utils.toChecksumAddress(token))) {\n              throw new Error(token + \" is not a valid token address\");\n            }\n\n            if (!amountOrTokenId) {\n              // ${amountOrTokenId} will stringify it while printing which might be a problem\n              throw new Error(amountOrTokenId + \" is not a amountOrTokenId\");\n            }\n\n            if (options && !options.from) {\n              throw new Error(\"options.from is missing\");\n            }\n          };\n\n          Matic.MaticPOSClient = MaticPOSClient; // workaround for web compatibility\n\n          Matic.mapPromise = MapPromise_1.mapPromise; // workaround for web compatibility\n\n          return Matic;\n        }(SDKClient_1.default);\n\n        exports.default = Matic;\n        /***/\n      },\n\n      /***/\n      \"./src/libs/MerkleTree.ts\":\n      /*!********************************!*\\\n        !*** ./src/libs/MerkleTree.ts ***!\n        \\********************************/\n\n      /*! no static exports found */\n\n      /***/\n      function srcLibsMerkleTreeTs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n\n        var utils = __webpack_require__(\n        /*! ethereumjs-util */\n        \"ethereumjs-util\");\n\n        var SafeBuffer = __webpack_require__(\n        /*! safe-buffer */\n        \"./node_modules/safe-buffer/index.js\").Buffer;\n\n        var sha3 = utils.keccak256;\n\n        var MerkleTree =\n        /** @class */\n        function () {\n          function MerkleTree(leaves) {\n            if (leaves === void 0) {\n              leaves = [];\n            }\n\n            if (leaves.length < 1) {\n              throw new Error('Atleast 1 leaf needed');\n            }\n\n            var depth = Math.ceil(Math.log(leaves.length) / Math.log(2));\n\n            if (depth > 20) {\n              throw new Error('Depth must be 20 or less');\n            }\n\n            this.leaves = leaves.concat(Array.from(Array(Math.pow(2, depth) - leaves.length), function () {\n              return utils.zeros(32);\n            }));\n            this.layers = [this.leaves];\n            this.createHashes(this.leaves);\n          }\n\n          MerkleTree.prototype.createHashes = function (nodes) {\n            if (nodes.length === 1) {\n              return false;\n            }\n\n            var treeLevel = [];\n\n            for (var i = 0; i < nodes.length; i += 2) {\n              var left = nodes[i];\n              var right = nodes[i + 1];\n              var data = SafeBuffer.concat([left, right]);\n              treeLevel.push(sha3(data));\n            } // is odd number of nodes\n\n\n            if (nodes.length % 2 === 1) {\n              treeLevel.push(nodes[nodes.length - 1]);\n            }\n\n            this.layers.push(treeLevel);\n            this.createHashes(treeLevel);\n          };\n\n          MerkleTree.prototype.getLeaves = function () {\n            return this.leaves;\n          };\n\n          MerkleTree.prototype.getLayers = function () {\n            return this.layers;\n          };\n\n          MerkleTree.prototype.getRoot = function () {\n            return this.layers[this.layers.length - 1][0];\n          };\n\n          MerkleTree.prototype.getProof = function (leaf) {\n            var index = -1;\n\n            for (var i = 0; i < this.leaves.length; i++) {\n              if (SafeBuffer.compare(leaf, this.leaves[i]) === 0) {\n                index = i;\n              }\n            }\n\n            var proof = [];\n\n            if (index <= this.getLeaves().length) {\n              var siblingIndex = void 0;\n\n              for (var i = 0; i < this.layers.length - 1; i++) {\n                if (index % 2 === 0) {\n                  siblingIndex = index + 1;\n                } else {\n                  siblingIndex = index - 1;\n                }\n\n                index = Math.floor(index / 2);\n                proof.push(this.layers[i][siblingIndex]);\n              }\n            }\n\n            return proof;\n          };\n\n          MerkleTree.prototype.verify = function (value, index, root, proof) {\n            if (!Array.isArray(proof) || !value || !root) {\n              return false;\n            }\n\n            var hash = value;\n\n            for (var i = 0; i < proof.length; i++) {\n              var node = proof[i];\n\n              if (index % 2 === 0) {\n                hash = sha3(SafeBuffer.concat([hash, node]));\n              } else {\n                hash = sha3(SafeBuffer.concat([node, hash]));\n              }\n\n              index = Math.floor(index / 2);\n            }\n\n            return SafeBuffer.compare(hash, root) === 0;\n          };\n\n          return MerkleTree;\n        }();\n\n        exports.default = MerkleTree;\n        module.exports = MerkleTree;\n        /***/\n      },\n\n      /***/\n      \"./src/libs/ProofsUtil.ts\":\n      /*!********************************!*\\\n        !*** ./src/libs/ProofsUtil.ts ***!\n        \\********************************/\n\n      /*! no static exports found */\n\n      /***/\n      function srcLibsProofsUtilTs(module, exports, __webpack_require__) {\n        \"use strict\";\n        /* WEBPACK VAR INJECTION */\n\n        (function (Buffer) {\n          var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n            function adopt(value) {\n              return value instanceof P ? value : new P(function (resolve) {\n                resolve(value);\n              });\n            }\n\n            return new (P || (P = Promise))(function (resolve, reject) {\n              function fulfilled(value) {\n                try {\n                  step(generator.next(value));\n                } catch (e) {\n                  reject(e);\n                }\n              }\n\n              function rejected(value) {\n                try {\n                  step(generator[\"throw\"](value));\n                } catch (e) {\n                  reject(e);\n                }\n              }\n\n              function step(result) {\n                result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n              }\n\n              step((generator = generator.apply(thisArg, _arguments || [])).next());\n            });\n          };\n\n          var __generator = this && this.__generator || function (thisArg, body) {\n            var _ = {\n              label: 0,\n              sent: function sent() {\n                if (t[0] & 1) throw t[1];\n                return t[1];\n              },\n              trys: [],\n              ops: []\n            },\n                f,\n                y,\n                t,\n                g;\n            return g = {\n              next: verb(0),\n              \"throw\": verb(1),\n              \"return\": verb(2)\n            }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n              return this;\n            }), g;\n\n            function verb(n) {\n              return function (v) {\n                return step([n, v]);\n              };\n            }\n\n            function step(op) {\n              if (f) throw new TypeError(\"Generator is already executing.\");\n\n              while (_) {\n                try {\n                  if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n                  if (y = 0, t) op = [op[0] & 2, t.value];\n\n                  switch (op[0]) {\n                    case 0:\n                    case 1:\n                      t = op;\n                      break;\n\n                    case 4:\n                      _.label++;\n                      return {\n                        value: op[1],\n                        done: false\n                      };\n\n                    case 5:\n                      _.label++;\n                      y = op[1];\n                      op = [0];\n                      continue;\n\n                    case 7:\n                      op = _.ops.pop();\n\n                      _.trys.pop();\n\n                      continue;\n\n                    default:\n                      if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;\n                        continue;\n                      }\n\n                      if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];\n                        break;\n                      }\n\n                      if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];\n                        t = op;\n                        break;\n                      }\n\n                      if (t && _.label < t[2]) {\n                        _.label = t[2];\n\n                        _.ops.push(op);\n\n                        break;\n                      }\n\n                      if (t[2]) _.ops.pop();\n\n                      _.trys.pop();\n\n                      continue;\n                  }\n\n                  op = body.call(thisArg, _);\n                } catch (e) {\n                  op = [6, e];\n                  y = 0;\n                } finally {\n                  f = t = 0;\n                }\n              }\n\n              if (op[0] & 5) throw op[1];\n              return {\n                value: op[0] ? op[1] : void 0,\n                done: true\n              };\n            }\n          };\n\n          var __importDefault = this && this.__importDefault || function (mod) {\n            return mod && mod.__esModule ? mod : {\n              \"default\": mod\n            };\n          };\n\n          Object.defineProperty(exports, \"__esModule\", {\n            value: true\n          });\n\n          var axios_1 = __importDefault(__webpack_require__(\n          /*! axios */\n          \"axios\"));\n\n          var MapPromise_1 = __webpack_require__(\n          /*! ../common/MapPromise */\n          \"./src/common/MapPromise.ts\");\n\n          var BN = __webpack_require__(\n          /*! bn.js */\n          \"bn.js\");\n\n          var Trie = __webpack_require__(\n          /*! merkle-patricia-tree */\n          \"merkle-patricia-tree\");\n\n          var EthereumTx = __webpack_require__(\n          /*! ethereumjs-tx */\n          \"ethereumjs-tx\");\n\n          var ethUtils = __webpack_require__(\n          /*! ethereumjs-util */\n          \"ethereumjs-util\");\n\n          var MerkleTree = __webpack_require__(\n          /*! ./MerkleTree */\n          \"./src/libs/MerkleTree.ts\");\n\n          var EthereumBlock = __webpack_require__(\n          /*! ethereumjs-block/from-rpc */\n          \"./node_modules/ethereumjs-block/from-rpc.js\");\n\n          var rlp = ethUtils.rlp;\n          var logger = {\n            info: __webpack_require__(\n            /*! debug */\n            \"./node_modules/debug/src/browser.js\")('maticjs:Web3Client'),\n            debug: __webpack_require__(\n            /*! debug */\n            \"./node_modules/debug/src/browser.js\")('maticjs:debug:Web3Client')\n          }; // TODO: remove proofs util and use plasma-core library\n\n          var ProofsUtil =\n          /** @class */\n          function () {\n            function ProofsUtil() {}\n\n            ProofsUtil.getBlockHeader = function (block) {\n              var n = new BN(block.number).toArrayLike(Buffer, 'be', 32);\n              var ts = new BN(block.timestamp).toArrayLike(Buffer, 'be', 32);\n              var txRoot = ethUtils.toBuffer(block.transactionsRoot);\n              var receiptsRoot = ethUtils.toBuffer(block.receiptsRoot);\n              return ethUtils.keccak256(Buffer.concat([n, ts, txRoot, receiptsRoot]));\n            };\n\n            ProofsUtil.buildCheckpointRoot = function (web3, start, end) {\n              return __awaiter(this, void 0, void 0, function () {\n                var tree;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      logger.debug('buildCheckpointRoot...');\n                      return [4\n                      /*yield*/\n                      , ProofsUtil.buildBlockHeaderMerkle(web3, start, end)];\n\n                    case 1:\n                      tree = _a.sent();\n                      return [2\n                      /*return*/\n                      , ethUtils.bufferToHex(tree.getRoot())];\n                  }\n                });\n              });\n            };\n\n            ProofsUtil.buildBlockProof = function (web3, start, end, blockNumber) {\n              return __awaiter(this, void 0, void 0, function () {\n                var proof;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      logger.debug('buildBlockProof...', start, end, blockNumber);\n                      return [4\n                      /*yield*/\n                      , ProofsUtil.getFastMerkleProof(web3, blockNumber, start, end)];\n\n                    case 1:\n                      proof = _a.sent();\n                      return [2\n                      /*return*/\n                      , ethUtils.bufferToHex(Buffer.concat(proof.map(function (p) {\n                        return ethUtils.toBuffer(p);\n                      })))];\n                  }\n                });\n              });\n            };\n\n            ProofsUtil.buildBlockProofHermoine = function (web3, start, end, blockNumber, networkApiUrl) {\n              return __awaiter(this, void 0, void 0, function () {\n                var tree, proof, _a, _b, _c, _d;\n\n                return __generator(this, function (_e) {\n                  switch (_e.label) {\n                    case 0:\n                      logger.debug('buildBlockProof...', start, end, blockNumber);\n                      return [4\n                      /*yield*/\n                      , ProofsUtil.buildBlockHeaderMerkleHermoine(start, end, networkApiUrl)];\n\n                    case 1:\n                      tree = _e.sent();\n                      _b = (_a = tree).getProof;\n                      _d = (_c = ProofsUtil).getBlockHeader;\n                      return [4\n                      /*yield*/\n                      , web3.eth.getBlock(blockNumber)];\n\n                    case 2:\n                      proof = _b.apply(_a, [_d.apply(_c, [_e.sent()])]);\n                      return [2\n                      /*return*/\n                      , ethUtils.bufferToHex(Buffer.concat(proof))];\n                  }\n                });\n              });\n            };\n\n            ProofsUtil.queryRootHash = function (web3, startBlock, endBlock) {\n              return __awaiter(this, void 0, void 0, function () {\n                var _a, _b, _c, err_1;\n\n                return __generator(this, function (_d) {\n                  switch (_d.label) {\n                    case 0:\n                      _d.trys.push([0, 2,, 3]);\n\n                      _b = (_a = ethUtils).toBuffer;\n                      _c = \"0x\";\n                      return [4\n                      /*yield*/\n                      , web3.bor.getRootHash(startBlock, endBlock)];\n\n                    case 1:\n                      return [2\n                      /*return*/\n                      , _b.apply(_a, [_c + _d.sent()])];\n\n                    case 2:\n                      err_1 = _d.sent();\n                      return [2\n                      /*return*/\n                      , null];\n\n                    case 3:\n                      return [2\n                      /*return*/\n                      ];\n                  }\n                });\n              });\n            };\n\n            ProofsUtil.recursiveZeroHash = function (n, web3) {\n              if (n === 0) return '0x0000000000000000000000000000000000000000000000000000000000000000';\n              var subHash = this.recursiveZeroHash(n - 1, web3);\n              return ethUtils.keccak256(ethUtils.toBuffer(web3.eth.abi.encodeParameters(['bytes32', 'bytes32'], [subHash, subHash])));\n            };\n\n            ProofsUtil.getFastMerkleProof = function (web3, blockNumber, startBlock, endBlock) {\n              return __awaiter(this, void 0, void 0, function () {\n                var merkleTreeDepth, reversedProof, offset, targetIndex, leftBound, rightBound, _loop_1, this_1, depth;\n\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      merkleTreeDepth = Math.ceil(Math.log2(endBlock - startBlock + 1));\n                      reversedProof = [];\n                      offset = startBlock;\n                      targetIndex = blockNumber - offset;\n                      leftBound = 0;\n                      rightBound = endBlock - offset;\n\n                      _loop_1 = function _loop_1(depth) {\n                        var nLeaves, pivotLeaf, newLeftBound, subTreeMerkleRoot, newRightBound, expectedHeight, subTreeMerkleRoot, subTreeHeight, heightDifference, remainingNodesHash, leafRoots_1, leaves, subTreeMerkleRoot;\n                        return __generator(this, function (_a) {\n                          switch (_a.label) {\n                            case 0:\n                              nLeaves = Math.pow(2, merkleTreeDepth - depth);\n                              pivotLeaf = leftBound + nLeaves / 2 - 1;\n                              if (!(targetIndex > pivotLeaf)) return [3\n                              /*break*/\n                              , 2];\n                              newLeftBound = pivotLeaf + 1;\n                              return [4\n                              /*yield*/\n                              , this_1.queryRootHash(web3, offset + leftBound, offset + pivotLeaf)];\n\n                            case 1:\n                              subTreeMerkleRoot = _a.sent();\n                              reversedProof.push(subTreeMerkleRoot);\n                              leftBound = newLeftBound;\n                              return [3\n                              /*break*/\n                              , 6];\n\n                            case 2:\n                              newRightBound = Math.min(rightBound, pivotLeaf);\n                              expectedHeight = merkleTreeDepth - (depth + 1);\n                              if (!(rightBound <= pivotLeaf)) return [3\n                              /*break*/\n                              , 3];\n                              subTreeMerkleRoot = this_1.recursiveZeroHash(expectedHeight, web3);\n                              reversedProof.push(subTreeMerkleRoot);\n                              return [3\n                              /*break*/\n                              , 5];\n\n                            case 3:\n                              subTreeHeight = Math.ceil(Math.log2(rightBound - pivotLeaf));\n                              heightDifference = expectedHeight - subTreeHeight;\n                              return [4\n                              /*yield*/\n                              , this_1.queryRootHash(web3, offset + pivotLeaf + 1, offset + rightBound) // The remaining leaves will hold the merkle root of a zero-filled tree of height subTreeHeight\n                              ];\n\n                            case 4:\n                              remainingNodesHash = _a.sent();\n                              leafRoots_1 = this_1.recursiveZeroHash(subTreeHeight, web3);\n                              leaves = Array.from({\n                                length: Math.pow(2, heightDifference)\n                              }, function () {\n                                return ethUtils.toBuffer(leafRoots_1);\n                              });\n                              leaves[0] = remainingNodesHash;\n                              subTreeMerkleRoot = new MerkleTree(leaves).getRoot();\n                              reversedProof.push(subTreeMerkleRoot);\n                              _a.label = 5;\n\n                            case 5:\n                              rightBound = newRightBound;\n                              _a.label = 6;\n\n                            case 6:\n                              return [2\n                              /*return*/\n                              ];\n                          }\n                        });\n                      };\n\n                      this_1 = this;\n                      depth = 0;\n                      _a.label = 1;\n\n                    case 1:\n                      if (!(depth < merkleTreeDepth)) return [3\n                      /*break*/\n                      , 4];\n                      return [5\n                      /*yield**/\n                      , _loop_1(depth)];\n\n                    case 2:\n                      _a.sent();\n\n                      _a.label = 3;\n\n                    case 3:\n                      depth += 1;\n                      return [3\n                      /*break*/\n                      , 1];\n\n                    case 4:\n                      return [2\n                      /*return*/\n                      , reversedProof.reverse()];\n                  }\n                });\n              });\n            };\n\n            ProofsUtil.buildBlockHeaderMerkleHermoine = function (start, end, networkApiUrl) {\n              return __awaiter(this, void 0, void 0, function () {\n                var logDetails, logs, headers, i;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      return [4\n                      /*yield*/\n                      , axios_1.default.get(networkApiUrl + '/generate-proof?start=' + start + '&end=' + end)];\n\n                    case 1:\n                      logDetails = _a.sent();\n                      logs = logDetails.data.merkle_headerblocks;\n                      headers = new Array(end - start + 1);\n\n                      for (i = 0; i < end - start + 1; i++) {\n                        headers[i] = ProofsUtil.getBlockHeader(logs[i]);\n                      }\n\n                      return [2\n                      /*return*/\n                      , new MerkleTree(headers)];\n                  }\n                });\n              });\n            };\n\n            ProofsUtil.buildBlockHeaderMerkle = function (web3, start, end) {\n              return __awaiter(this, void 0, void 0, function () {\n                var headers;\n\n                var _this = this;\n\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      headers = new Array(end - start + 1);\n                      return [4\n                      /*yield*/\n                      , MapPromise_1.mapPromise(headers, // eslint-disable-next-line\n                      function (_, i) {\n                        return __awaiter(_this, void 0, void 0, function () {\n                          var _a, _b, _c, _d;\n\n                          return __generator(this, function (_e) {\n                            switch (_e.label) {\n                              case 0:\n                                logger.debug('fetching block', i + start);\n                                _a = headers;\n                                _b = i;\n                                _d = (_c = ProofsUtil).getBlockHeader;\n                                return [4\n                                /*yield*/\n                                , web3.eth.getBlock(i + start)];\n\n                              case 1:\n                                _a[_b] = _d.apply(_c, [_e.sent()]);\n                                return [2\n                                /*return*/\n                                ];\n                            }\n                          });\n                        });\n                      }, {\n                        concurrency: 20\n                      })];\n\n                    case 1:\n                      _a.sent();\n\n                      return [2\n                      /*return*/\n                      , new MerkleTree(headers)];\n                  }\n                });\n              });\n            };\n\n            ProofsUtil.getTxProof = function (tx, block) {\n              return __awaiter(this, void 0, void 0, function () {\n                var txTrie, stateSyncTxHash, _loop_2, i;\n\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      txTrie = new Trie();\n                      stateSyncTxHash = ethUtils.bufferToHex(ProofsUtil.getStateSyncTxHash(block));\n\n                      _loop_2 = function _loop_2(i) {\n                        var siblingTx, path, rawSignedSiblingTx;\n                        return __generator(this, function (_a) {\n                          switch (_a.label) {\n                            case 0:\n                              siblingTx = block.transactions[i];\n\n                              if (siblingTx.hash === stateSyncTxHash) {\n                                return [2\n                                /*return*/\n                                , \"continue\"];\n                              }\n\n                              path = rlp.encode(siblingTx.transactionIndex);\n                              rawSignedSiblingTx = ProofsUtil.getTxBytes(siblingTx);\n                              return [4\n                              /*yield*/\n                              , new Promise(function (resolve, reject) {\n                                txTrie.put(path, rawSignedSiblingTx, function (err) {\n                                  if (err) {\n                                    reject(err);\n                                  } else {\n                                    resolve({});\n                                  }\n                                });\n                              })];\n\n                            case 1:\n                              _a.sent();\n\n                              return [2\n                              /*return*/\n                              ];\n                          }\n                        });\n                      };\n\n                      i = 0;\n                      _a.label = 1;\n\n                    case 1:\n                      if (!(i < block.transactions.length)) return [3\n                      /*break*/\n                      , 4];\n                      return [5\n                      /*yield**/\n                      , _loop_2(i)];\n\n                    case 2:\n                      _a.sent();\n\n                      _a.label = 3;\n\n                    case 3:\n                      i++;\n                      return [3\n                      /*break*/\n                      , 1];\n\n                    case 4:\n                      // promise\n                      return [2\n                      /*return*/\n                      , new Promise(function (resolve, reject) {\n                        txTrie.findPath(rlp.encode(tx.transactionIndex), function (err, rawTxNode, reminder, stack) {\n                          if (err) {\n                            return reject(err);\n                          }\n\n                          if (reminder.length > 0) {\n                            return reject(new Error('Node does not contain the key'));\n                          }\n\n                          var prf = {\n                            blockHash: ethUtils.toBuffer(tx.blockHash),\n                            parentNodes: stack.map(function (s) {\n                              return s.raw;\n                            }),\n                            root: ProofsUtil.getRawHeader(block).transactionsTrie,\n                            path: rlp.encode(tx.transactionIndex),\n                            value: rlp.decode(rawTxNode.value)\n                          };\n                          resolve(prf);\n                        });\n                      })];\n                  }\n                });\n              });\n            };\n\n            ProofsUtil.getTxBytes = function (tx) {\n              var txObj = new EthereumTx(ProofsUtil.squanchTx(tx));\n              return txObj.serialize();\n            };\n\n            ProofsUtil.squanchTx = function (tx) {\n              tx.gasPrice = '0x' + parseInt(tx.gasPrice).toString(16);\n              tx.value = '0x' + parseInt(tx.value).toString(16) || false;\n              tx.gas = '0x' + parseInt(tx.gas).toString(16);\n              tx.data = tx.input;\n              return tx;\n            };\n\n            ProofsUtil.getRawHeader = function (_block) {\n              if (typeof _block.difficulty !== 'string') {\n                _block.difficulty = '0x' + _block.difficulty.toString(16);\n              }\n\n              var block = new EthereumBlock(_block);\n              return block.header;\n            };\n\n            ProofsUtil.getReceiptProof = function (receipt, block, web3, requestConcurrency, receipts) {\n              if (requestConcurrency === void 0) {\n                requestConcurrency = Infinity;\n              }\n\n              return __awaiter(this, void 0, void 0, function () {\n                var stateSyncTxHash, receiptsTrie, receiptPromises, _loop_3, i;\n\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      stateSyncTxHash = ethUtils.bufferToHex(ProofsUtil.getStateSyncTxHash(block));\n                      receiptsTrie = new Trie();\n                      receiptPromises = [];\n                      if (!!receipts) return [3\n                      /*break*/\n                      , 2];\n                      block.transactions.forEach(function (tx) {\n                        if (tx.hash === stateSyncTxHash) {\n                          // ignore if tx hash is bor state-sync tx\n                          return;\n                        }\n\n                        receiptPromises.push(web3.eth.getTransactionReceipt(tx.hash));\n                      });\n                      return [4\n                      /*yield*/\n                      , MapPromise_1.mapPromise(receiptPromises, function (val) {\n                        return val;\n                      }, {\n                        concurrency: requestConcurrency\n                      })];\n\n                    case 1:\n                      receipts = _a.sent();\n                      _a.label = 2;\n\n                    case 2:\n                      _loop_3 = function _loop_3(i) {\n                        var siblingReceipt, path, rawReceipt;\n                        return __generator(this, function (_a) {\n                          switch (_a.label) {\n                            case 0:\n                              siblingReceipt = receipts[i];\n                              path = rlp.encode(siblingReceipt.transactionIndex);\n                              rawReceipt = ProofsUtil.getReceiptBytes(siblingReceipt);\n                              return [4\n                              /*yield*/\n                              , new Promise(function (resolve, reject) {\n                                receiptsTrie.put(path, rawReceipt, function (err) {\n                                  if (err) {\n                                    reject(err);\n                                  } else {\n                                    resolve({});\n                                  }\n                                });\n                              })];\n\n                            case 1:\n                              _a.sent();\n\n                              return [2\n                              /*return*/\n                              ];\n                          }\n                        });\n                      };\n\n                      i = 0;\n                      _a.label = 3;\n\n                    case 3:\n                      if (!(i < receipts.length)) return [3\n                      /*break*/\n                      , 6];\n                      return [5\n                      /*yield**/\n                      , _loop_3(i)];\n\n                    case 4:\n                      _a.sent();\n\n                      _a.label = 5;\n\n                    case 5:\n                      i++;\n                      return [3\n                      /*break*/\n                      , 3];\n\n                    case 6:\n                      // promise\n                      return [2\n                      /*return*/\n                      , new Promise(function (resolve, reject) {\n                        receiptsTrie.findPath(rlp.encode(receipt.transactionIndex), function (err, rawReceiptNode, reminder, stack) {\n                          if (err) {\n                            return reject(err);\n                          }\n\n                          if (reminder.length > 0) {\n                            return reject(new Error('Node does not contain the key'));\n                          }\n\n                          var prf = {\n                            blockHash: ethUtils.toBuffer(receipt.blockHash),\n                            parentNodes: stack.map(function (s) {\n                              return s.raw;\n                            }),\n                            root: ProofsUtil.getRawHeader(block).receiptTrie,\n                            path: rlp.encode(receipt.transactionIndex),\n                            value: rlp.decode(rawReceiptNode.value)\n                          };\n                          resolve(prf);\n                        });\n                      })];\n                  }\n                });\n              });\n            };\n\n            ProofsUtil.getReceiptBytes = function (receipt) {\n              var encodedData = rlp.encode([ethUtils.toBuffer(receipt.status !== undefined && receipt.status != null ? receipt.status ? '0x1' : '0x' : receipt.root), ethUtils.toBuffer(receipt.cumulativeGasUsed), ethUtils.toBuffer(receipt.logsBloom), // encoded log array\n              receipt.logs.map(function (l) {\n                // [address, [topics array], data]\n                return [ethUtils.toBuffer(l.address), l.topics.map(ethUtils.toBuffer), ethUtils.toBuffer(l.data)];\n              })]);\n\n              if (receipt.status !== undefined && receipt.status !== null && receipt.type !== '0x0' && receipt.type !== '0x') {\n                encodedData = Buffer.concat([ethUtils.toBuffer(receipt.type), encodedData]);\n              }\n\n              return encodedData;\n            }; // getStateSyncTxHash returns block's tx hash for state-sync receipt\n            // Bor blockchain includes extra receipt/tx for state-sync logs,\n            // but it is not included in transactionRoot or receiptRoot.\n            // So, while calculating proof, we have to exclude them.\n            //\n            // This is derived from block's hash and number\n            // state-sync tx hash = keccak256(\"matic-bor-receipt-\" + block.number + block.hash)\n\n\n            ProofsUtil.getStateSyncTxHash = function (block) {\n              return ethUtils.keccak256(Buffer.concat([ethUtils.toBuffer('matic-bor-receipt-'), ethUtils.setLengthLeft(ethUtils.toBuffer(block.number), 8), ethUtils.toBuffer(block.hash)]));\n            };\n\n            return ProofsUtil;\n          }();\n\n          exports.default = ProofsUtil;\n          /* WEBPACK VAR INJECTION */\n        }).call(this, __webpack_require__(\n        /*! ./../../node_modules/node-libs-browser/node_modules/buffer/index.js */\n        \"./node_modules/node-libs-browser/node_modules/buffer/index.js\").Buffer);\n        /***/\n      },\n\n      /***/\n      \"./src/root/DepositManager.ts\":\n      /*!************************************!*\\\n        !*** ./src/root/DepositManager.ts ***!\n        \\************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function srcRootDepositManagerTs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        var __extends = this && this.__extends || function () {\n          var _extendStatics4 = function extendStatics(d, b) {\n            _extendStatics4 = Object.setPrototypeOf || {\n              __proto__: []\n            } instanceof Array && function (d, b) {\n              d.__proto__ = b;\n            } || function (d, b) {\n              for (var p in b) {\n                if (b.hasOwnProperty(p)) d[p] = b[p];\n              }\n            };\n\n            return _extendStatics4(d, b);\n          };\n\n          return function (d, b) {\n            _extendStatics4(d, b);\n\n            function __() {\n              this.constructor = d;\n            }\n\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n          };\n        }();\n\n        var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n          function adopt(value) {\n            return value instanceof P ? value : new P(function (resolve) {\n              resolve(value);\n            });\n          }\n\n          return new (P || (P = Promise))(function (resolve, reject) {\n            function fulfilled(value) {\n              try {\n                step(generator.next(value));\n              } catch (e) {\n                reject(e);\n              }\n            }\n\n            function rejected(value) {\n              try {\n                step(generator[\"throw\"](value));\n              } catch (e) {\n                reject(e);\n              }\n            }\n\n            function step(result) {\n              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n            }\n\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\n          });\n        };\n\n        var __generator = this && this.__generator || function (thisArg, body) {\n          var _ = {\n            label: 0,\n            sent: function sent() {\n              if (t[0] & 1) throw t[1];\n              return t[1];\n            },\n            trys: [],\n            ops: []\n          },\n              f,\n              y,\n              t,\n              g;\n          return g = {\n            next: verb(0),\n            \"throw\": verb(1),\n            \"return\": verb(2)\n          }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n            return this;\n          }), g;\n\n          function verb(n) {\n            return function (v) {\n              return step([n, v]);\n            };\n          }\n\n          function step(op) {\n            if (f) throw new TypeError(\"Generator is already executing.\");\n\n            while (_) {\n              try {\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n                if (y = 0, t) op = [op[0] & 2, t.value];\n\n                switch (op[0]) {\n                  case 0:\n                  case 1:\n                    t = op;\n                    break;\n\n                  case 4:\n                    _.label++;\n                    return {\n                      value: op[1],\n                      done: false\n                    };\n\n                  case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [0];\n                    continue;\n\n                  case 7:\n                    op = _.ops.pop();\n\n                    _.trys.pop();\n\n                    continue;\n\n                  default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                      _ = 0;\n                      continue;\n                    }\n\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                      _.label = op[1];\n                      break;\n                    }\n\n                    if (op[0] === 6 && _.label < t[1]) {\n                      _.label = t[1];\n                      t = op;\n                      break;\n                    }\n\n                    if (t && _.label < t[2]) {\n                      _.label = t[2];\n\n                      _.ops.push(op);\n\n                      break;\n                    }\n\n                    if (t[2]) _.ops.pop();\n\n                    _.trys.pop();\n\n                    continue;\n                }\n\n                op = body.call(thisArg, _);\n              } catch (e) {\n                op = [6, e];\n                y = 0;\n              } finally {\n                f = t = 0;\n              }\n            }\n\n            if (op[0] & 5) throw op[1];\n            return {\n              value: op[0] ? op[1] : void 0,\n              done: true\n            };\n          }\n        };\n\n        var __importDefault = this && this.__importDefault || function (mod) {\n          return mod && mod.__esModule ? mod : {\n            \"default\": mod\n          };\n        };\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n\n        var ContractsBase_1 = __importDefault(__webpack_require__(\n        /*! ../common/ContractsBase */\n        \"./src/common/ContractsBase.ts\"));\n\n        var MapPromise_1 = __webpack_require__(\n        /*! ../common/MapPromise */\n        \"./src/common/MapPromise.ts\");\n\n        var DepositManager =\n        /** @class */\n        function (_super) {\n          __extends(DepositManager, _super);\n\n          function DepositManager(options, web3Client, registry) {\n            var _this = _super.call(this, web3Client, options.network) || this;\n\n            _this.depositManagerContract = new _this.web3Client.parentWeb3.eth.Contract(options.network.abi('DepositManager'), options.depositManager);\n            _this.registry = registry;\n            return _this;\n          }\n\n          DepositManager.prototype.initialize = function () {\n            return __awaiter(this, void 0, void 0, function () {\n              var childChainAddress;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    return [4\n                    /*yield*/\n                    , this.registry.registry.methods.getChildChainAndStateSender().call()];\n\n                  case 1:\n                    childChainAddress = _a.sent()[0];\n                    this.childChainContract = new this.web3Client.web3.eth.Contract(this.network.abi('ChildChain'), childChainAddress);\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            });\n          };\n\n          DepositManager.prototype.depositStatusFromTxHash = function (txHash) {\n            return __awaiter(this, void 0, void 0, function () {\n              var deposits, depositReceipt, depositEvents;\n\n              var _this = this;\n\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    deposits = [];\n                    return [4\n                    /*yield*/\n                    , this.web3Client.parentWeb3.eth.getTransactionReceipt(txHash)];\n\n                  case 1:\n                    depositReceipt = _a.sent();\n\n                    if (!depositReceipt) {\n                      throw new Error('Transaction hash not found');\n                    }\n\n                    depositEvents = depositReceipt.logs.filter(function (l) {\n                      return l.topics[0].toLowerCase() === DepositManager.NEW_DEPOSIT_EVENT_SIG;\n                    });\n                    if (!(depositEvents.length > 0)) return [3\n                    /*break*/\n                    , 3];\n                    return [4\n                    /*yield*/\n                    , MapPromise_1.mapPromise(depositEvents, function (event) {\n                      return __awaiter(_this, void 0, void 0, function () {\n                        var data, depositId, _a, _b, _c;\n\n                        return __generator(this, function (_d) {\n                          switch (_d.label) {\n                            case 0:\n                              data = event.data;\n                              depositId = '0x' + data.substring(data.length - 64);\n                              _b = (_a = deposits).push;\n                              _c = {\n                                depositId: depositId\n                              };\n                              return [4\n                              /*yield*/\n                              , this.isDepositProcessed(depositId)];\n\n                            case 1:\n                              _b.apply(_a, [(_c.isProcessed = _d.sent(), _c)]);\n\n                              return [2\n                              /*return*/\n                              ];\n                          }\n                        });\n                      });\n                    })];\n\n                  case 2:\n                    _a.sent();\n\n                    _a.label = 3;\n\n                  case 3:\n                    return [2\n                    /*return*/\n                    , {\n                      receipt: depositReceipt,\n                      deposits: deposits\n                    }];\n                }\n              });\n            });\n          };\n\n          DepositManager.prototype.isDepositProcessed = function (depositId) {\n            return this.childChainContract.methods.deposits(depositId).call();\n          };\n\n          DepositManager.prototype.approveERC20 = function (token, amount, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              var txObject, web3Options;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    txObject = this.getERC20TokenContract(token, true).methods.approve(this.depositManagerContract.options.address, this.encode(amount));\n                    return [4\n                    /*yield*/\n                    , this.web3Client.fillOptions(txObject, true\n                    /* onRootChain */\n                    , options)];\n\n                  case 1:\n                    web3Options = _a.sent();\n\n                    if (web3Options.encodeAbi) {\n                      return [2\n                      /*return*/\n                      , Object.assign(web3Options, {\n                        data: txObject.encodeABI(),\n                        to: token\n                      })];\n                    }\n\n                    return [2\n                    /*return*/\n                    , this.web3Client.send(txObject, web3Options, options)];\n                }\n              });\n            });\n          };\n\n          DepositManager.prototype.approveMaxERC20 = function (token, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              var txObject, web3Options;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    txObject = this.getERC20TokenContract(token, true).methods.approve(this.depositManagerContract.options.address, '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\n                    return [4\n                    /*yield*/\n                    , this.web3Client.fillOptions(txObject, true\n                    /* onRootChain */\n                    , options)];\n\n                  case 1:\n                    web3Options = _a.sent();\n\n                    if (web3Options.encodeAbi) {\n                      return [2\n                      /*return*/\n                      , Object.assign(web3Options, {\n                        data: txObject.encodeABI(),\n                        to: token\n                      })];\n                    }\n\n                    return [2\n                    /*return*/\n                    , this.web3Client.send(txObject, web3Options, options)];\n                }\n              });\n            });\n          };\n\n          DepositManager.prototype.allowanceOfERC20 = function (userAddress, token, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              var allowance;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    if (options && (!token || !userAddress)) {\n                      throw new Error('token address or user address is missing');\n                    }\n\n                    return [4\n                    /*yield*/\n                    , this.getERC20TokenContract(token, true).methods.allowance(userAddress, this.depositManagerContract.options.address).call()];\n\n                  case 1:\n                    allowance = _a.sent();\n                    return [2\n                    /*return*/\n                    , allowance];\n                }\n              });\n            });\n          };\n\n          DepositManager.prototype.depositERC20 = function (token, amount, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              var txObject, web3Options;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    txObject = this.depositManagerContract.methods.depositERC20(token, this.encode(amount));\n                    return [4\n                    /*yield*/\n                    , this.web3Client.fillOptions(txObject, true\n                    /* onRootChain */\n                    , options)];\n\n                  case 1:\n                    web3Options = _a.sent();\n\n                    if (web3Options.encodeAbi) {\n                      return [2\n                      /*return*/\n                      , Object.assign(web3Options, {\n                        data: txObject.encodeABI(),\n                        to: this.depositManagerContract.options.address\n                      })];\n                    }\n\n                    return [2\n                    /*return*/\n                    , this.web3Client.send(txObject, web3Options, options)];\n                }\n              });\n            });\n          };\n\n          DepositManager.prototype.depositERC721 = function (token, tokenId, options) {\n            return this.web3Client.send(this.depositManagerContract.methods.depositERC721(token, tokenId), options);\n          };\n\n          DepositManager.prototype.depositBulk = function (tokens, amountOrTokenIds, user, options) {\n            return this.web3Client.send(this.depositManagerContract.methods.depositBulk(tokens, amountOrTokenIds, user), options);\n          };\n\n          DepositManager.prototype.depositERC20ForUser = function (token, amount, user, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              var txObject, web3Options;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    txObject = this.depositManagerContract.methods.depositERC20ForUser(token, user, this.encode(amount));\n                    return [4\n                    /*yield*/\n                    , this.web3Client.fillOptions(txObject, true\n                    /* onRootChain */\n                    , options)];\n\n                  case 1:\n                    web3Options = _a.sent();\n\n                    if (web3Options.encodeAbi) {\n                      return [2\n                      /*return*/\n                      , Object.assign(web3Options, {\n                        data: txObject.encodeABI(),\n                        to: this.depositManagerContract.options.address\n                      })];\n                    }\n\n                    return [2\n                    /*return*/\n                    , this.web3Client.send(txObject, web3Options, options)];\n                }\n              });\n            });\n          };\n\n          DepositManager.prototype.depositERC721ForUser = function (token, tokenId, user, options) {\n            return this.web3Client.send(this.depositManagerContract.methods.depositERC721ForUser(token, user, tokenId), options);\n          };\n\n          DepositManager.prototype.depositEther = function (amount, options) {\n            if (options === void 0) {\n              options = {};\n            }\n\n            return __awaiter(this, void 0, void 0, function () {\n              var txObject, web3Options;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    txObject = this.depositManagerContract.methods.depositEther();\n                    return [4\n                    /*yield*/\n                    , this.web3Client.fillOptions(txObject, true\n                    /* onRootChain */\n                    , Object.assign(options, {\n                      value: this.encode(amount)\n                    }))];\n\n                  case 1:\n                    web3Options = _a.sent();\n\n                    if (web3Options.encodeAbi) {\n                      return [2\n                      /*return*/\n                      , Object.assign(web3Options, {\n                        data: txObject.encodeABI(),\n                        to: this.depositManagerContract.options.address\n                      })];\n                    }\n\n                    return [2\n                    /*return*/\n                    , this.web3Client.send(txObject, web3Options, options)];\n                }\n              });\n            });\n          };\n\n          DepositManager.prototype.getAddress = function () {\n            return this.depositManagerContract.options.address;\n          };\n\n          DepositManager.NEW_DEPOSIT_EVENT_SIG = '0x1dadc8d0683c6f9824e885935c1bec6f76816730dcec148dda8cf25a7b9f797b';\n          return DepositManager;\n        }(ContractsBase_1.default);\n\n        exports.default = DepositManager;\n        /***/\n      },\n\n      /***/\n      \"./src/root/POSRootChainManager.ts\":\n      /*!*****************************************!*\\\n        !*** ./src/root/POSRootChainManager.ts ***!\n        \\*****************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function srcRootPOSRootChainManagerTs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        var __extends = this && this.__extends || function () {\n          var _extendStatics5 = function extendStatics(d, b) {\n            _extendStatics5 = Object.setPrototypeOf || {\n              __proto__: []\n            } instanceof Array && function (d, b) {\n              d.__proto__ = b;\n            } || function (d, b) {\n              for (var p in b) {\n                if (b.hasOwnProperty(p)) d[p] = b[p];\n              }\n            };\n\n            return _extendStatics5(d, b);\n          };\n\n          return function (d, b) {\n            _extendStatics5(d, b);\n\n            function __() {\n              this.constructor = d;\n            }\n\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n          };\n        }();\n\n        var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n          function adopt(value) {\n            return value instanceof P ? value : new P(function (resolve) {\n              resolve(value);\n            });\n          }\n\n          return new (P || (P = Promise))(function (resolve, reject) {\n            function fulfilled(value) {\n              try {\n                step(generator.next(value));\n              } catch (e) {\n                reject(e);\n              }\n            }\n\n            function rejected(value) {\n              try {\n                step(generator[\"throw\"](value));\n              } catch (e) {\n                reject(e);\n              }\n            }\n\n            function step(result) {\n              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n            }\n\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\n          });\n        };\n\n        var __generator = this && this.__generator || function (thisArg, body) {\n          var _ = {\n            label: 0,\n            sent: function sent() {\n              if (t[0] & 1) throw t[1];\n              return t[1];\n            },\n            trys: [],\n            ops: []\n          },\n              f,\n              y,\n              t,\n              g;\n          return g = {\n            next: verb(0),\n            \"throw\": verb(1),\n            \"return\": verb(2)\n          }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n            return this;\n          }), g;\n\n          function verb(n) {\n            return function (v) {\n              return step([n, v]);\n            };\n          }\n\n          function step(op) {\n            if (f) throw new TypeError(\"Generator is already executing.\");\n\n            while (_) {\n              try {\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n                if (y = 0, t) op = [op[0] & 2, t.value];\n\n                switch (op[0]) {\n                  case 0:\n                  case 1:\n                    t = op;\n                    break;\n\n                  case 4:\n                    _.label++;\n                    return {\n                      value: op[1],\n                      done: false\n                    };\n\n                  case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [0];\n                    continue;\n\n                  case 7:\n                    op = _.ops.pop();\n\n                    _.trys.pop();\n\n                    continue;\n\n                  default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                      _ = 0;\n                      continue;\n                    }\n\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                      _.label = op[1];\n                      break;\n                    }\n\n                    if (op[0] === 6 && _.label < t[1]) {\n                      _.label = t[1];\n                      t = op;\n                      break;\n                    }\n\n                    if (t && _.label < t[2]) {\n                      _.label = t[2];\n\n                      _.ops.push(op);\n\n                      break;\n                    }\n\n                    if (t[2]) _.ops.pop();\n\n                    _.trys.pop();\n\n                    continue;\n                }\n\n                op = body.call(thisArg, _);\n              } catch (e) {\n                op = [6, e];\n                y = 0;\n              } finally {\n                f = t = 0;\n              }\n            }\n\n            if (op[0] & 5) throw op[1];\n            return {\n              value: op[0] ? op[1] : void 0,\n              done: true\n            };\n          }\n        };\n\n        var __importDefault = this && this.__importDefault || function (mod) {\n          return mod && mod.__esModule ? mod : {\n            \"default\": mod\n          };\n        };\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n\n        var web3_1 = __importDefault(__webpack_require__(\n        /*! web3 */\n        \"web3\"));\n\n        var ContractsBase_1 = __importDefault(__webpack_require__(\n        /*! ../common/ContractsBase */\n        \"./src/common/ContractsBase.ts\"));\n\n        var ExitManager_1 = __importDefault(__webpack_require__(\n        /*! ../common/ExitManager */\n        \"./src/common/ExitManager.ts\"));\n\n        var ERC20_TRANSFER_EVENT_SIG = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef';\n        var ERC721_TRANSFER_EVENT_SIG = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef';\n        var ERC721_WITHDRAW_BATCH_EVENT_SIG = '0xf871896b17e9cb7a64941c62c188a4f5c621b86800e3d15452ece01ce56073df';\n        var ERC1155_TRANSFER_SINGLE_EVENT_SIG = '0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62';\n        var ERC1155_TRANSFER_BATCH_EVENT_SIG = '0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb';\n        var MESSAGE_SENT_EVENT_SIG = '0x8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036';\n        var TRANSFER_WITH_METADATA_EVENT_SIG = '0xf94915c6d1fd521cee85359239227480c7e8776d7caf1fc3bacad5c269b66a14';\n        var web3 = new web3_1.default();\n        var abiCoder = web3.eth.abi;\n\n        var POSRootChainManager =\n        /** @class */\n        function (_super) {\n          __extends(POSRootChainManager, _super);\n\n          function POSRootChainManager(options, rootChain, web3Client) {\n            var _this = _super.call(this, web3Client, options.network) || this;\n\n            _this.formatUint256 = _this.encode;\n            _this.posRootChainManager = new _this.web3Client.parentWeb3.eth.Contract(options.network.abi('RootChainManager', 'pos'), options.posRootChainManager || options.network.Main.POSContracts.RootChainManagerProxy);\n            _this.rootTunnelContractAbi = options.network.abi('RootTunnel', 'pos');\n            _this.exitManager = new ExitManager_1.default(rootChain, options, web3Client);\n            _this.erc20Predicate = options.posERC20Predicate || options.network.Main.POSContracts.ERC20PredicateProxy;\n            _this.erc721Predicate = options.posERC721Predicate || options.network.Main.POSContracts.ERC721PredicateProxy;\n            _this.erc1155Predicate = options.posERC1155Predicate || options.network.Main.POSContracts.ERC1155PredicateProxy;\n            _this.erc1155MintablePredicate = options.posMintableERC1155Predicate || options.network.Main.POSContracts.MintableERC1155PredicateProxy;\n            _this.requestConcurrency = options.requestConcurrency;\n            return _this;\n          }\n\n          POSRootChainManager.prototype.getPredicateAddress = function (rootToken) {\n            return __awaiter(this, void 0, void 0, function () {\n              var tokenType, predicateAddress;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    return [4\n                    /*yield*/\n                    , this.posRootChainManager.methods.tokenToType(rootToken).call()];\n\n                  case 1:\n                    tokenType = _a.sent();\n\n                    if (!tokenType) {\n                      throw new Error('Invalid Token Type');\n                    }\n\n                    return [4\n                    /*yield*/\n                    , this.posRootChainManager.methods.typeToPredicate(tokenType).call()];\n\n                  case 2:\n                    predicateAddress = _a.sent();\n                    return [2\n                    /*return*/\n                    , predicateAddress];\n                }\n              });\n            });\n          };\n\n          POSRootChainManager.prototype.depositEtherForUser = function (amount, user, options) {\n            if (options === void 0) {\n              options = {};\n            }\n\n            return __awaiter(this, void 0, void 0, function () {\n              var txObject, web3Options;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    txObject = this.posRootChainManager.methods.depositEtherFor(user);\n                    return [4\n                    /*yield*/\n                    , this.web3Client.fillOptions(txObject, true\n                    /* onRootChain */\n                    , Object.assign(options, {\n                      value: this.formatUint256(amount)\n                    }))];\n\n                  case 1:\n                    web3Options = _a.sent();\n\n                    if (web3Options.encodeAbi) {\n                      return [2\n                      /*return*/\n                      , Object.assign(web3Options, {\n                        data: txObject.encodeABI(),\n                        to: this.posRootChainManager.options.address\n                      })];\n                    }\n\n                    return [2\n                    /*return*/\n                    , this.web3Client.send(txObject, web3Options, options)];\n                }\n              });\n            });\n          };\n\n          POSRootChainManager.prototype.depositFor = function (user, rootToken, depositData, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              var txObject, web3Options;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    if (!this.posRootChainManager.options.address) {\n                      throw new Error('posRootChainManager address not found. Set it while constructing MaticPOSClient.');\n                    }\n\n                    txObject = this.posRootChainManager.methods.depositFor(user, rootToken, depositData);\n                    return [4\n                    /*yield*/\n                    , this.web3Client.fillOptions(txObject, true\n                    /* onRootChain */\n                    , options)];\n\n                  case 1:\n                    web3Options = _a.sent();\n\n                    if (web3Options.encodeAbi) {\n                      return [2\n                      /*return*/\n                      , Object.assign(web3Options, {\n                        data: txObject.encodeABI(),\n                        to: this.posRootChainManager.options.address\n                      })];\n                    }\n\n                    return [2\n                    /*return*/\n                    , this.web3Client.send(txObject, web3Options, options)];\n                }\n              });\n            });\n          };\n\n          POSRootChainManager.prototype.exit = function (burnTxHash, logSignature, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              var payload, txObject, web3Options;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    if (!this.posRootChainManager.options.address) {\n                      throw new Error('posRootChainManager address not found. Set it while constructing MaticPOSClient.');\n                    }\n\n                    return [4\n                    /*yield*/\n                    , this.exitManager.buildPayloadForExit(burnTxHash, logSignature, this.requestConcurrency)];\n\n                  case 1:\n                    payload = _a.sent();\n                    txObject = this.posRootChainManager.methods.exit(payload);\n                    return [4\n                    /*yield*/\n                    , this.web3Client.fillOptions(txObject, true\n                    /* onRootChain */\n                    , options)];\n\n                  case 2:\n                    web3Options = _a.sent();\n\n                    if (web3Options.encodeAbi) {\n                      return [2\n                      /*return*/\n                      , Object.assign(web3Options, {\n                        data: txObject.encodeABI(),\n                        to: this.posRootChainManager.options.address\n                      })];\n                    }\n\n                    return [2\n                    /*return*/\n                    , this.web3Client.send(txObject, web3Options, options)];\n                }\n              });\n            });\n          };\n\n          POSRootChainManager.prototype.exitFastMerkle = function (start, end, blockNumber) {\n            return __awaiter(this, void 0, void 0, function () {\n              var proof;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    return [4\n                    /*yield*/\n                    , this.exitManager.buildPayloadForExitFastMerkle(start, end, blockNumber)];\n\n                  case 1:\n                    proof = _a.sent();\n                    return [2\n                    /*return*/\n                    , proof];\n                }\n              });\n            });\n          };\n\n          POSRootChainManager.prototype.exitHermoine = function (burnTxHash, logSignature, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              var payload, txObject, web3Options;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    if (!this.posRootChainManager.options.address) {\n                      throw new Error('posRootChainManager address not found. Set it while constructing MaticPOSClient.');\n                    }\n\n                    return [4\n                    /*yield*/\n                    , this.exitManager.buildPayloadForExitHermoine(burnTxHash, logSignature)];\n\n                  case 1:\n                    payload = _a.sent();\n                    txObject = this.posRootChainManager.methods.exit(payload);\n                    return [4\n                    /*yield*/\n                    , this.web3Client.fillOptions(txObject, true\n                    /* onRootChain */\n                    , options)];\n\n                  case 2:\n                    web3Options = _a.sent();\n\n                    if (web3Options.encodeAbi) {\n                      return [2\n                      /*return*/\n                      , Object.assign(web3Options, {\n                        data: txObject.encodeABI(),\n                        to: this.posRootChainManager.options.address\n                      })];\n                    }\n\n                    return [2\n                    /*return*/\n                    , this.web3Client.send(txObject, web3Options, options)];\n                }\n              });\n            });\n          };\n\n          POSRootChainManager.prototype.getERC20ExitPayload = function (burnTxHash) {\n            return __awaiter(this, void 0, void 0, function () {\n              var payload;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    return [4\n                    /*yield*/\n                    , this.exitManager.buildPayloadForExit(burnTxHash, ERC20_TRANSFER_EVENT_SIG)];\n\n                  case 1:\n                    payload = _a.sent();\n                    return [2\n                    /*return*/\n                    , payload];\n                }\n              });\n            });\n          };\n\n          POSRootChainManager.prototype.isExitProcessed = function (burnTxHash, logSignature) {\n            return __awaiter(this, void 0, void 0, function () {\n              var exitHash;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    return [4\n                    /*yield*/\n                    , this.exitManager.getExitHash(burnTxHash, logSignature, this.requestConcurrency)];\n\n                  case 1:\n                    exitHash = _a.sent();\n                    return [2\n                    /*return*/\n                    , this.posRootChainManager.methods.processedExits(exitHash).call()];\n                }\n              });\n            });\n          };\n\n          POSRootChainManager.prototype.processReceivedMessage = function (contractAddress, txHash, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              var payload, rootTunnelContract, txObject, web3Options;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    return [4\n                    /*yield*/\n                    , this.exitManager.buildPayloadForExitHermoine(txHash, MESSAGE_SENT_EVENT_SIG)];\n\n                  case 1:\n                    payload = _a.sent();\n                    rootTunnelContract = new this.web3Client.parentWeb3.eth.Contract(this.rootTunnelContractAbi, contractAddress);\n                    txObject = rootTunnelContract.methods.receiveMessage(payload);\n                    return [4\n                    /*yield*/\n                    , this.web3Client.fillOptions(txObject, true\n                    /* onRootChain */\n                    , options)];\n\n                  case 2:\n                    web3Options = _a.sent();\n\n                    if (web3Options.encodeAbi) {\n                      return [2\n                      /*return*/\n                      , Object.assign(web3Options, {\n                        data: txObject.encodeABI(),\n                        to: this.posRootChainManager.options.address\n                      })];\n                    }\n\n                    return [2\n                    /*return*/\n                    , this.web3Client.send(txObject, web3Options, options)];\n                }\n              });\n            });\n          };\n\n          POSRootChainManager.prototype.customPayload = function (txHash, eventSig) {\n            return __awaiter(this, void 0, void 0, function () {\n              var payload;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    return [4\n                    /*yield*/\n                    , this.exitManager.buildPayloadForExitHermoine(txHash, eventSig)];\n\n                  case 1:\n                    payload = _a.sent();\n                    return [2\n                    /*return*/\n                    , payload];\n                }\n              });\n            });\n          };\n\n          POSRootChainManager.prototype.approveERC20 = function (rootToken, amount, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              var predicate, txObject, web3Options;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    return [4\n                    /*yield*/\n                    , this.getPredicateAddress(rootToken)];\n\n                  case 1:\n                    predicate = _a.sent();\n                    txObject = this.getPOSERC20TokenContract(rootToken, true).methods.approve(predicate, this.formatUint256(amount));\n                    return [4\n                    /*yield*/\n                    , this.web3Client.fillOptions(txObject, true\n                    /* onRootChain */\n                    , options)];\n\n                  case 2:\n                    web3Options = _a.sent();\n\n                    if (web3Options.encodeAbi) {\n                      return [2\n                      /*return*/\n                      , Object.assign(web3Options, {\n                        data: txObject.encodeABI(),\n                        to: rootToken\n                      })];\n                    }\n\n                    return [2\n                    /*return*/\n                    , this.web3Client.send(txObject, web3Options, options)];\n                }\n              });\n            });\n          };\n\n          POSRootChainManager.prototype.approveMaxERC20 = function (rootToken, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              var predicate, txObject, web3Options;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    return [4\n                    /*yield*/\n                    , this.getPredicateAddress(rootToken)];\n\n                  case 1:\n                    predicate = _a.sent();\n                    txObject = this.getPOSERC20TokenContract(rootToken, true).methods.approve(predicate, '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\n                    return [4\n                    /*yield*/\n                    , this.web3Client.fillOptions(txObject, true\n                    /* onRootChain */\n                    , options)];\n\n                  case 2:\n                    web3Options = _a.sent();\n\n                    if (web3Options.encodeAbi) {\n                      return [2\n                      /*return*/\n                      , Object.assign(web3Options, {\n                        data: txObject.encodeABI(),\n                        to: rootToken\n                      })];\n                    }\n\n                    return [2\n                    /*return*/\n                    , this.web3Client.send(txObject, web3Options, options)];\n                }\n              });\n            });\n          };\n\n          POSRootChainManager.prototype.allowanceOfERC20 = function (userAddress, token, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              var predicate, allowance;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    if (options && (!token || !userAddress)) {\n                      throw new Error('token address or user address is missing');\n                    }\n\n                    return [4\n                    /*yield*/\n                    , this.getPredicateAddress(token)];\n\n                  case 1:\n                    predicate = _a.sent();\n                    return [4\n                    /*yield*/\n                    , this.getPOSERC20TokenContract(token, true).methods.allowance(userAddress, predicate).call()];\n\n                  case 2:\n                    allowance = _a.sent();\n                    return [2\n                    /*return*/\n                    , allowance];\n                }\n              });\n            });\n          };\n\n          POSRootChainManager.prototype.depositERC20ForUser = function (rootToken, amount, user, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              var depositData;\n              return __generator(this, function (_a) {\n                depositData = abiCoder.encodeParameter('uint256', this.formatUint256(amount));\n                return [2\n                /*return*/\n                , this.depositFor(user, rootToken, depositData, options)];\n              });\n            });\n          };\n\n          POSRootChainManager.prototype.burnERC20 = function (childToken, amount, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              var childTokenContract, txObject, web3Options;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    childTokenContract = this.getPOSERC20TokenContract(childToken);\n                    txObject = childTokenContract.methods.withdraw(this.formatUint256(amount));\n                    return [4\n                    /*yield*/\n                    , this.web3Client.fillOptions(txObject, false\n                    /* onRootChain */\n                    , options)];\n\n                  case 1:\n                    web3Options = _a.sent();\n\n                    if (web3Options.encodeAbi) {\n                      return [2\n                      /*return*/\n                      , Object.assign(web3Options, {\n                        data: txObject.encodeABI(),\n                        to: childToken\n                      })];\n                    }\n\n                    return [2\n                    /*return*/\n                    , this.web3Client.send(txObject, web3Options, options)];\n                }\n              });\n            });\n          };\n\n          POSRootChainManager.prototype.exitERC20 = function (burnTxHash, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              return __generator(this, function (_a) {\n                return [2\n                /*return*/\n                , this.exit(burnTxHash, ERC20_TRANSFER_EVENT_SIG, options)];\n              });\n            });\n          };\n\n          POSRootChainManager.prototype.exitERC20Hermoine = function (burnTxHash, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              return __generator(this, function (_a) {\n                return [2\n                /*return*/\n                , this.exitHermoine(burnTxHash, ERC20_TRANSFER_EVENT_SIG, options)];\n              });\n            });\n          };\n\n          POSRootChainManager.prototype.isERC20ExitProcessed = function (burnTxHash) {\n            return __awaiter(this, void 0, void 0, function () {\n              return __generator(this, function (_a) {\n                return [2\n                /*return*/\n                , this.isExitProcessed(burnTxHash, ERC20_TRANSFER_EVENT_SIG)];\n              });\n            });\n          };\n\n          POSRootChainManager.prototype.approveERC721 = function (rootToken, tokenId, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              var predicate, txObject, web3Options;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    return [4\n                    /*yield*/\n                    , this.getPredicateAddress(rootToken)];\n\n                  case 1:\n                    predicate = _a.sent();\n                    txObject = this.getPOSERC721TokenContract(rootToken, true).methods.approve(predicate, this.formatUint256(tokenId));\n                    return [4\n                    /*yield*/\n                    , this.web3Client.fillOptions(txObject, true\n                    /* onRootChain */\n                    , options)];\n\n                  case 2:\n                    web3Options = _a.sent();\n\n                    if (web3Options.encodeAbi) {\n                      return [2\n                      /*return*/\n                      , Object.assign(web3Options, {\n                        data: txObject.encodeABI(),\n                        to: rootToken\n                      })];\n                    }\n\n                    return [2\n                    /*return*/\n                    , this.web3Client.send(txObject, web3Options, options)];\n                }\n              });\n            });\n          };\n\n          POSRootChainManager.prototype.isApprovedERC721 = function (token, tokenId, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              var predicate, approved;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    if (options && !token) {\n                      throw new Error('token address is missing');\n                    }\n\n                    return [4\n                    /*yield*/\n                    , this.getPredicateAddress(token)];\n\n                  case 1:\n                    predicate = _a.sent();\n                    return [4\n                    /*yield*/\n                    , this.getPOSERC721TokenContract(token, true).methods.getApproved(tokenId).call()];\n\n                  case 2:\n                    approved = _a.sent();\n                    return [2\n                    /*return*/\n                    , approved == predicate];\n                }\n              });\n            });\n          };\n\n          POSRootChainManager.prototype.approveAllERC721 = function (rootToken, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              var predicate, txObject, web3Options;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    return [4\n                    /*yield*/\n                    , this.getPredicateAddress(rootToken)];\n\n                  case 1:\n                    predicate = _a.sent();\n                    txObject = this.getPOSERC721TokenContract(rootToken, true).methods.setApprovalForAll(predicate, true);\n                    return [4\n                    /*yield*/\n                    , this.web3Client.fillOptions(txObject, true\n                    /* onRootChain */\n                    , options)];\n\n                  case 2:\n                    web3Options = _a.sent();\n\n                    if (web3Options.encodeAbi) {\n                      return [2\n                      /*return*/\n                      , Object.assign(web3Options, {\n                        data: txObject.encodeABI(),\n                        to: rootToken\n                      })];\n                    }\n\n                    return [2\n                    /*return*/\n                    , this.web3Client.send(txObject, web3Options, options)];\n                }\n              });\n            });\n          };\n\n          POSRootChainManager.prototype.isApprovedForAllERC721 = function (token, userAddress, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              var predicate, approved;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    if (options && !token) {\n                      throw new Error('token address is missing');\n                    }\n\n                    return [4\n                    /*yield*/\n                    , this.getPredicateAddress(token)];\n\n                  case 1:\n                    predicate = _a.sent();\n                    return [4\n                    /*yield*/\n                    , this.getPOSERC721TokenContract(token, true).methods.isApprovedForAll(userAddress, predicate).call()];\n\n                  case 2:\n                    approved = _a.sent();\n                    return [2\n                    /*return*/\n                    , approved];\n                }\n              });\n            });\n          };\n\n          POSRootChainManager.prototype.depositERC721ForUser = function (rootToken, tokenId, user, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              var depositData;\n              return __generator(this, function (_a) {\n                depositData = abiCoder.encodeParameter('uint256', this.formatUint256(tokenId));\n                return [2\n                /*return*/\n                , this.depositFor(user, rootToken, depositData, options)];\n              });\n            });\n          };\n\n          POSRootChainManager.prototype.depositBatchERC721ForUser = function (rootToken, tokenIds, user, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              var tokenIdArray, depositData;\n\n              var _this = this;\n\n              return __generator(this, function (_a) {\n                tokenIdArray = tokenIds.map(function (tokenId) {\n                  return _this.formatUint256(tokenId);\n                });\n                depositData = abiCoder.encodeParameter('uint256[]', tokenIdArray);\n                return [2\n                /*return*/\n                , this.depositFor(user, rootToken, depositData, options)];\n              });\n            });\n          };\n\n          POSRootChainManager.prototype.burnERC721 = function (childToken, tokenId, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              var childTokenContract, txObject, web3Options;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    childTokenContract = this.getPOSERC721TokenContract(childToken);\n                    txObject = childTokenContract.methods.withdraw(this.formatUint256(tokenId));\n                    return [4\n                    /*yield*/\n                    , this.web3Client.fillOptions(txObject, false\n                    /* onRootChain */\n                    , options)];\n\n                  case 1:\n                    web3Options = _a.sent();\n\n                    if (web3Options.encodeAbi) {\n                      return [2\n                      /*return*/\n                      , Object.assign(web3Options, {\n                        data: txObject.encodeABI(),\n                        to: childToken\n                      })];\n                    }\n\n                    return [2\n                    /*return*/\n                    , this.web3Client.send(txObject, web3Options, options)];\n                }\n              });\n            });\n          };\n\n          POSRootChainManager.prototype.burnWithMetadataERC721 = function (childToken, tokenId, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              var childTokenContract, txObject, web3Options;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    childTokenContract = this.getPOSERC721TokenContract(childToken);\n                    txObject = childTokenContract.methods.withdraw(this.formatUint256(tokenId));\n                    return [4\n                    /*yield*/\n                    , this.web3Client.fillOptions(txObject, false\n                    /* onRootChain */\n                    , options)];\n\n                  case 1:\n                    web3Options = _a.sent();\n\n                    if (web3Options.encodeAbi) {\n                      return [2\n                      /*return*/\n                      , Object.assign(web3Options, {\n                        data: txObject.encodeAbi(),\n                        to: childToken\n                      })];\n                    }\n\n                    return [2\n                    /*return*/\n                    , this.web3Client.send(txObject, web3Options, options)];\n                }\n              });\n            });\n          };\n\n          POSRootChainManager.prototype.burnBatchERC721 = function (childToken, tokenIds, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              var tokenIdArray, childTokenContract, txObject, _options;\n\n              var _this = this;\n\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    tokenIdArray = tokenIds.map(function (tokenId) {\n                      return _this.formatUint256(tokenId);\n                    });\n                    childTokenContract = this.getPOSERC721TokenContract(childToken);\n                    txObject = childTokenContract.methods.withdrawBatch(tokenIdArray);\n                    return [4\n                    /*yield*/\n                    , this.web3Client.fillOptions(txObject, false\n                    /* onRootChain */\n                    , options)];\n\n                  case 1:\n                    _options = _a.sent();\n\n                    if (_options.encodeAbi) {\n                      return [2\n                      /*return*/\n                      , Object.assign(_options, {\n                        data: txObject.encodeABI(),\n                        to: childToken\n                      })];\n                    }\n\n                    return [2\n                    /*return*/\n                    , this.web3Client.send(txObject, _options)];\n                }\n              });\n            });\n          };\n\n          POSRootChainManager.prototype.exitERC721 = function (burnTxHash, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              return __generator(this, function (_a) {\n                return [2\n                /*return*/\n                , this.exit(burnTxHash, ERC721_TRANSFER_EVENT_SIG, options)];\n              });\n            });\n          };\n\n          POSRootChainManager.prototype.exitBatchERC721 = function (burnTxHash, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              return __generator(this, function (_a) {\n                return [2\n                /*return*/\n                , this.exit(burnTxHash, ERC721_WITHDRAW_BATCH_EVENT_SIG, options)];\n              });\n            });\n          };\n\n          POSRootChainManager.prototype.exitERC721WithMetadata = function (burnTxHash, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              return __generator(this, function (_a) {\n                return [2\n                /*return*/\n                , this.exit(burnTxHash, TRANSFER_WITH_METADATA_EVENT_SIG, options)];\n              });\n            });\n          };\n\n          POSRootChainManager.prototype.exitERC721WithMetadataHermoine = function (burnTxHash, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              return __generator(this, function (_a) {\n                return [2\n                /*return*/\n                , this.exitHermoine(burnTxHash, TRANSFER_WITH_METADATA_EVENT_SIG, options)];\n              });\n            });\n          };\n\n          POSRootChainManager.prototype.exitBatchERC721Hermoine = function (burnTxHash, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              return __generator(this, function (_a) {\n                return [2\n                /*return*/\n                , this.exitHermoine(burnTxHash, ERC721_WITHDRAW_BATCH_EVENT_SIG, options)];\n              });\n            });\n          };\n\n          POSRootChainManager.prototype.exitERC721Hermoine = function (burnTxHash, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              return __generator(this, function (_a) {\n                return [2\n                /*return*/\n                , this.exitHermoine(burnTxHash, ERC721_TRANSFER_EVENT_SIG, options)];\n              });\n            });\n          };\n\n          POSRootChainManager.prototype.isERC721ExitProcessed = function (burnTxHash) {\n            return __awaiter(this, void 0, void 0, function () {\n              return __generator(this, function (_a) {\n                return [2\n                /*return*/\n                , this.isExitProcessed(burnTxHash, ERC721_TRANSFER_EVENT_SIG)];\n              });\n            });\n          };\n\n          POSRootChainManager.prototype.isBatchERC721ExitProcessed = function (burnTxHash) {\n            return __awaiter(this, void 0, void 0, function () {\n              return __generator(this, function (_a) {\n                return [2\n                /*return*/\n                , this.isExitProcessed(burnTxHash, ERC721_WITHDRAW_BATCH_EVENT_SIG)];\n              });\n            });\n          };\n\n          POSRootChainManager.prototype.approveERC1155 = function (rootToken, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              var predicate, txObject, web3Options;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    return [4\n                    /*yield*/\n                    , this.getPredicateAddress(rootToken)];\n\n                  case 1:\n                    predicate = _a.sent();\n                    txObject = this.getPOSERC1155TokenContract(rootToken, true).methods.setApprovalForAll(predicate, true);\n                    return [4\n                    /*yield*/\n                    , this.web3Client.fillOptions(txObject, true\n                    /* onRootChain */\n                    , options)];\n\n                  case 2:\n                    web3Options = _a.sent();\n\n                    if (web3Options.encodeAbi) {\n                      return [2\n                      /*return*/\n                      , Object.assign(web3Options, {\n                        data: txObject.encodeABI(),\n                        to: rootToken\n                      })];\n                    }\n\n                    return [2\n                    /*return*/\n                    , this.web3Client.send(txObject, web3Options, options)];\n                }\n              });\n            });\n          };\n\n          POSRootChainManager.prototype.approveMintableERC1155 = function (rootToken, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              var txObject, web3Options;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    if (!this.erc1155Predicate) {\n                      throw new Error('posERC1155Predicate address not found. Set it while constructing MaticPOSClient.');\n                    }\n\n                    txObject = this.getPOSERC1155TokenContract(rootToken, true).methods.setApprovalForAll(this.erc1155MintablePredicate, true);\n                    return [4\n                    /*yield*/\n                    , this.web3Client.fillOptions(txObject, true\n                    /* onRootChain */\n                    , options)];\n\n                  case 1:\n                    web3Options = _a.sent();\n\n                    if (web3Options.encodeAbi) {\n                      return [2\n                      /*return*/\n                      , Object.assign(web3Options, {\n                        data: txObject.encodeABI(),\n                        to: rootToken\n                      })];\n                    }\n\n                    return [2\n                    /*return*/\n                    , this.web3Client.send(txObject, web3Options, options)];\n                }\n              });\n            });\n          };\n\n          POSRootChainManager.prototype.depositSingleERC1155ForUser = function (rootToken, tokenId, amount, user, data, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              var depositData;\n              return __generator(this, function (_a) {\n                depositData = abiCoder.encodeParameters(['uint256[]', 'uint256[]', 'bytes'], [[this.formatUint256(tokenId)], [this.formatUint256(amount)], data || '0x0']);\n                return [2\n                /*return*/\n                , this.depositFor(user, rootToken, depositData, options)];\n              });\n            });\n          };\n\n          POSRootChainManager.prototype.depositBatchERC1155ForUser = function (rootToken, tokenIds, amounts, user, data, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              var depositData;\n\n              var _this = this;\n\n              return __generator(this, function (_a) {\n                depositData = abiCoder.encodeParameters(['uint256[]', 'uint256[]', 'bytes'], [tokenIds.map(function (t) {\n                  return _this.formatUint256(t);\n                }), amounts.map(function (a) {\n                  return _this.formatUint256(a);\n                }), data || '0x0']);\n                return [2\n                /*return*/\n                , this.depositFor(user, rootToken, depositData, options)];\n              });\n            });\n          };\n\n          POSRootChainManager.prototype.burnSingleERC1155 = function (childToken, tokenId, amount, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              var childTokenContract, txObject, web3Options;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    childTokenContract = this.getPOSERC1155TokenContract(childToken);\n                    txObject = childTokenContract.methods.withdrawSingle(this.formatUint256(tokenId), this.formatUint256(amount));\n                    return [4\n                    /*yield*/\n                    , this.web3Client.fillOptions(txObject, false\n                    /* onRootChain */\n                    , options)];\n\n                  case 1:\n                    web3Options = _a.sent();\n\n                    if (web3Options.encodeAbi) {\n                      return [2\n                      /*return*/\n                      , Object.assign(web3Options, {\n                        data: txObject.encodeABI(),\n                        to: childToken\n                      })];\n                    }\n\n                    return [2\n                    /*return*/\n                    , this.web3Client.send(txObject, web3Options, options)];\n                }\n              });\n            });\n          };\n\n          POSRootChainManager.prototype.burnBatchERC1155 = function (childToken, tokenIds, amounts, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              var childTokenContract, txObject, web3Options;\n\n              var _this = this;\n\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    childTokenContract = this.getPOSERC1155TokenContract(childToken);\n                    txObject = childTokenContract.methods.withdrawBatch(tokenIds.map(function (t) {\n                      return _this.formatUint256(t);\n                    }), amounts.map(function (a) {\n                      return _this.formatUint256(a);\n                    }));\n                    return [4\n                    /*yield*/\n                    , this.web3Client.fillOptions(txObject, false\n                    /* onRootChain */\n                    , options)];\n\n                  case 1:\n                    web3Options = _a.sent();\n\n                    if (web3Options.encodeAbi) {\n                      return [2\n                      /*return*/\n                      , Object.assign(web3Options, {\n                        data: txObject.encodeABI(),\n                        to: childToken\n                      })];\n                    }\n\n                    return [2\n                    /*return*/\n                    , this.web3Client.send(txObject, web3Options, options)];\n                }\n              });\n            });\n          };\n\n          POSRootChainManager.prototype.exitSingleERC1155 = function (burnTxHash, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              return __generator(this, function (_a) {\n                return [2\n                /*return*/\n                , this.exit(burnTxHash, ERC1155_TRANSFER_SINGLE_EVENT_SIG, options)];\n              });\n            });\n          };\n\n          POSRootChainManager.prototype.exitSingleERC1155Hermoine = function (burnTxHash, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              return __generator(this, function (_a) {\n                return [2\n                /*return*/\n                , this.exitHermoine(burnTxHash, ERC1155_TRANSFER_SINGLE_EVENT_SIG, options)];\n              });\n            });\n          };\n\n          POSRootChainManager.prototype.isSingleERC1155ExitProcessed = function (burnTxHash) {\n            return __awaiter(this, void 0, void 0, function () {\n              return __generator(this, function (_a) {\n                return [2\n                /*return*/\n                , this.isExitProcessed(burnTxHash, ERC1155_TRANSFER_SINGLE_EVENT_SIG)];\n              });\n            });\n          };\n\n          POSRootChainManager.prototype.exitBatchERC1155 = function (burnTxHash, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              return __generator(this, function (_a) {\n                return [2\n                /*return*/\n                , this.exit(burnTxHash, ERC1155_TRANSFER_BATCH_EVENT_SIG, options)];\n              });\n            });\n          };\n\n          POSRootChainManager.prototype.exitBatchERC1155Hermoine = function (burnTxHash, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              return __generator(this, function (_a) {\n                return [2\n                /*return*/\n                , this.exitHermoine(burnTxHash, ERC1155_TRANSFER_BATCH_EVENT_SIG, options)];\n              });\n            });\n          };\n\n          POSRootChainManager.prototype.isBatchERC1155ExitProcessed = function (burnTxHash) {\n            return __awaiter(this, void 0, void 0, function () {\n              return __generator(this, function (_a) {\n                return [2\n                /*return*/\n                , this.isExitProcessed(burnTxHash, ERC1155_TRANSFER_BATCH_EVENT_SIG)];\n              });\n            });\n          };\n\n          POSRootChainManager.prototype.mintERC721 = function (childToken, userAddress, tokenId, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              var childTokenContract, txObject, web3Options;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    childTokenContract = this.getPOSERC721TokenContract(childToken);\n                    txObject = childTokenContract.methods.mint(userAddress, this.formatUint256(tokenId));\n                    return [4\n                    /*yield*/\n                    , this.web3Client.fillOptions(txObject, false\n                    /* onRootChain */\n                    , options)];\n\n                  case 1:\n                    web3Options = _a.sent();\n\n                    if (web3Options.encodeAbi) {\n                      return [2\n                      /*return*/\n                      , Object.assign(web3Options, {\n                        data: txObject.encodeAbi(),\n                        to: childToken\n                      })];\n                    }\n\n                    return [2\n                    /*return*/\n                    , this.web3Client.send(txObject, web3Options, options)];\n                }\n              });\n            });\n          };\n\n          POSRootChainManager.prototype.mintERC1155 = function (childToken, userAddress, tokenId, amount, data, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              var childTokenContract, depositData, txObject, web3Options;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    childTokenContract = this.getPOSERC1155TokenContract(childToken);\n                    depositData = abiCoder.encodeParameters(['uint256[]', 'uint256[]', 'bytes'], [[this.formatUint256(tokenId)], [this.formatUint256(amount)], data || '0x0']);\n                    txObject = childTokenContract.methods.mint(userAddress, tokenId, amount, depositData);\n                    return [4\n                    /*yield*/\n                    , this.web3Client.fillOptions(txObject, false\n                    /* onRootChain */\n                    , options)];\n\n                  case 1:\n                    web3Options = _a.sent();\n\n                    if (web3Options.encodeAbi) {\n                      return [2\n                      /*return*/\n                      , Object.assign(web3Options, {\n                        data: txObject.encodeABI(),\n                        to: childToken\n                      })];\n                    }\n\n                    return [2\n                    /*return*/\n                    , this.web3Client.send(txObject, web3Options, options)];\n                }\n              });\n            });\n          };\n\n          POSRootChainManager.prototype.mintBatchERC1155ForUser = function (childToken, tokenIds, amounts, userAddress, data, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              var childTokenContract, depositData, txObject, web3Options;\n\n              var _this = this;\n\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    childTokenContract = this.getPOSERC721TokenContract(childToken);\n                    depositData = abiCoder.encodeParameters(['uint256[]', 'uint256[]', 'bytes'], [tokenIds.map(function (t) {\n                      return _this.formatUint256(t);\n                    }), amounts.map(function (a) {\n                      return _this.formatUint256(a);\n                    }), data || '0x0']);\n                    txObject = childTokenContract.methods.mint(userAddress, tokenIds, amounts, depositData);\n                    return [4\n                    /*yield*/\n                    , this.web3Client.fillOptions(txObject, false\n                    /* onRootChain */\n                    , options)];\n\n                  case 1:\n                    web3Options = _a.sent();\n\n                    if (web3Options.encodeAbi) {\n                      return [2\n                      /*return*/\n                      , Object.assign(web3Options, {\n                        data: txObject.encodeABI(),\n                        to: childToken\n                      })];\n                    }\n\n                    return [2\n                    /*return*/\n                    , this.web3Client.send(txObject, web3Options, options)];\n                }\n              });\n            });\n          };\n\n          return POSRootChainManager;\n        }(ContractsBase_1.default);\n\n        exports.default = POSRootChainManager;\n        /***/\n      },\n\n      /***/\n      \"./src/root/Registry.ts\":\n      /*!******************************!*\\\n        !*** ./src/root/Registry.ts ***!\n        \\******************************/\n\n      /*! no static exports found */\n\n      /***/\n      function srcRootRegistryTs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        var __extends = this && this.__extends || function () {\n          var _extendStatics6 = function extendStatics(d, b) {\n            _extendStatics6 = Object.setPrototypeOf || {\n              __proto__: []\n            } instanceof Array && function (d, b) {\n              d.__proto__ = b;\n            } || function (d, b) {\n              for (var p in b) {\n                if (b.hasOwnProperty(p)) d[p] = b[p];\n              }\n            };\n\n            return _extendStatics6(d, b);\n          };\n\n          return function (d, b) {\n            _extendStatics6(d, b);\n\n            function __() {\n              this.constructor = d;\n            }\n\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n          };\n        }();\n\n        var __importDefault = this && this.__importDefault || function (mod) {\n          return mod && mod.__esModule ? mod : {\n            \"default\": mod\n          };\n        };\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n\n        var ContractsBase_1 = __importDefault(__webpack_require__(\n        /*! ../common/ContractsBase */\n        \"./src/common/ContractsBase.ts\"));\n\n        var Registry =\n        /** @class */\n        function (_super) {\n          __extends(Registry, _super);\n\n          function Registry(options, web3Client) {\n            var _this = _super.call(this, web3Client, options.network) || this;\n\n            _this.registry = new _this.web3Client.parentWeb3.eth.Contract(options.network.abi('Registry'), options.registry);\n            return _this;\n          }\n\n          return Registry;\n        }(ContractsBase_1.default);\n\n        exports.default = Registry;\n        /***/\n      },\n\n      /***/\n      \"./src/root/RootChain.ts\":\n      /*!*******************************!*\\\n        !*** ./src/root/RootChain.ts ***!\n        \\*******************************/\n\n      /*! no static exports found */\n\n      /***/\n      function srcRootRootChainTs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        var __extends = this && this.__extends || function () {\n          var _extendStatics7 = function extendStatics(d, b) {\n            _extendStatics7 = Object.setPrototypeOf || {\n              __proto__: []\n            } instanceof Array && function (d, b) {\n              d.__proto__ = b;\n            } || function (d, b) {\n              for (var p in b) {\n                if (b.hasOwnProperty(p)) d[p] = b[p];\n              }\n            };\n\n            return _extendStatics7(d, b);\n          };\n\n          return function (d, b) {\n            _extendStatics7(d, b);\n\n            function __() {\n              this.constructor = d;\n            }\n\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n          };\n        }();\n\n        var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n          function adopt(value) {\n            return value instanceof P ? value : new P(function (resolve) {\n              resolve(value);\n            });\n          }\n\n          return new (P || (P = Promise))(function (resolve, reject) {\n            function fulfilled(value) {\n              try {\n                step(generator.next(value));\n              } catch (e) {\n                reject(e);\n              }\n            }\n\n            function rejected(value) {\n              try {\n                step(generator[\"throw\"](value));\n              } catch (e) {\n                reject(e);\n              }\n            }\n\n            function step(result) {\n              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n            }\n\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\n          });\n        };\n\n        var __generator = this && this.__generator || function (thisArg, body) {\n          var _ = {\n            label: 0,\n            sent: function sent() {\n              if (t[0] & 1) throw t[1];\n              return t[1];\n            },\n            trys: [],\n            ops: []\n          },\n              f,\n              y,\n              t,\n              g;\n          return g = {\n            next: verb(0),\n            \"throw\": verb(1),\n            \"return\": verb(2)\n          }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n            return this;\n          }), g;\n\n          function verb(n) {\n            return function (v) {\n              return step([n, v]);\n            };\n          }\n\n          function step(op) {\n            if (f) throw new TypeError(\"Generator is already executing.\");\n\n            while (_) {\n              try {\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n                if (y = 0, t) op = [op[0] & 2, t.value];\n\n                switch (op[0]) {\n                  case 0:\n                  case 1:\n                    t = op;\n                    break;\n\n                  case 4:\n                    _.label++;\n                    return {\n                      value: op[1],\n                      done: false\n                    };\n\n                  case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [0];\n                    continue;\n\n                  case 7:\n                    op = _.ops.pop();\n\n                    _.trys.pop();\n\n                    continue;\n\n                  default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                      _ = 0;\n                      continue;\n                    }\n\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                      _.label = op[1];\n                      break;\n                    }\n\n                    if (op[0] === 6 && _.label < t[1]) {\n                      _.label = t[1];\n                      t = op;\n                      break;\n                    }\n\n                    if (t && _.label < t[2]) {\n                      _.label = t[2];\n\n                      _.ops.push(op);\n\n                      break;\n                    }\n\n                    if (t[2]) _.ops.pop();\n\n                    _.trys.pop();\n\n                    continue;\n                }\n\n                op = body.call(thisArg, _);\n              } catch (e) {\n                op = [6, e];\n                y = 0;\n              } finally {\n                f = t = 0;\n              }\n            }\n\n            if (op[0] & 5) throw op[1];\n            return {\n              value: op[0] ? op[1] : void 0,\n              done: true\n            };\n          }\n        };\n\n        var __importDefault = this && this.__importDefault || function (mod) {\n          return mod && mod.__esModule ? mod : {\n            \"default\": mod\n          };\n        };\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n\n        var ContractsBase_1 = __importDefault(__webpack_require__(\n        /*! ../common/ContractsBase */\n        \"./src/common/ContractsBase.ts\"));\n\n        var bn_js_1 = __importDefault(__webpack_require__(\n        /*! bn.js */\n        \"bn.js\"));\n\n        var logger = {\n          info: __webpack_require__(\n          /*! debug */\n          \"./node_modules/debug/src/browser.js\")('maticjs:Web3Client'),\n          debug: __webpack_require__(\n          /*! debug */\n          \"./node_modules/debug/src/browser.js\")('maticjs:debug:Web3Client')\n        };\n\n        var RootChain =\n        /** @class */\n        function (_super) {\n          __extends(RootChain, _super);\n\n          function RootChain(options, web3Client) {\n            var _this = _super.call(this, web3Client, options.network) || this;\n\n            _this.rootChain = new _this.web3Client.parentWeb3.eth.Contract(options.network.abi('RootChain'), options.rootChain);\n            return _this;\n          }\n\n          RootChain.prototype.getLastChildBlock = function () {\n            return this.web3Client.call(this.rootChain.methods.getLastChildBlock());\n          };\n\n          RootChain.prototype.getCheckpointInclusion = function (burnTxHash) {\n            return __awaiter(this, void 0, void 0, function () {\n              var lastChildBlock, burnTx, headerBlockNumber, headerBlock;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    return [4\n                    /*yield*/\n                    , this.getLastChildBlock()];\n\n                  case 1:\n                    lastChildBlock = _a.sent();\n                    return [4\n                    /*yield*/\n                    , this.web3Client.getMaticWeb3().eth.getTransaction(burnTxHash)];\n\n                  case 2:\n                    burnTx = _a.sent();\n\n                    if (new bn_js_1.default(lastChildBlock).lt(new bn_js_1.default(burnTx.blockNumber))) {\n                      return [2\n                      /*return*/\n                      , 'Burn transaction has not been checkpointed as yet'];\n                    }\n\n                    return [4\n                    /*yield*/\n                    , this.findHeaderBlockNumber(burnTx.blockNumber)];\n\n                  case 3:\n                    headerBlockNumber = _a.sent();\n                    return [4\n                    /*yield*/\n                    , this.web3Client.call(this.rootChain.methods.headerBlocks(this.encode(headerBlockNumber)))];\n\n                  case 4:\n                    headerBlock = _a.sent();\n                    return [2\n                    /*return*/\n                    , headerBlock];\n                }\n              });\n            });\n          };\n\n          RootChain.prototype.findHeaderBlockNumber = function (childBlockNumber) {\n            return __awaiter(this, void 0, void 0, function () {\n              var start, end, _a, ans, mid, headerBlock, headerStart, headerEnd;\n\n              return __generator(this, function (_b) {\n                switch (_b.label) {\n                  case 0:\n                    childBlockNumber = new bn_js_1.default(childBlockNumber);\n                    start = RootChain.BIG_ONE;\n                    _a = bn_js_1.default.bind;\n                    return [4\n                    /*yield*/\n                    , this.web3Client.call(this.rootChain.methods.currentHeaderBlock())];\n\n                  case 1:\n                    end = new (_a.apply(bn_js_1.default, [void 0, _b.sent()]))().div(RootChain.CHECKPOINT_ID_INTERVAL);\n                    _b.label = 2;\n\n                  case 2:\n                    if (!start.lte(end)) return [3\n                    /*break*/\n                    , 4];\n\n                    if (start.eq(end)) {\n                      ans = start;\n                      return [3\n                      /*break*/\n                      , 4];\n                    }\n\n                    mid = start.add(end).div(RootChain.BIG_TWO);\n                    logger.debug({\n                      start: start.toString(),\n                      mid: mid.toString(),\n                      end: end.toString()\n                    }); // eslint-disable-line\n\n                    return [4\n                    /*yield*/\n                    , this.web3Client.call(this.rootChain.methods.headerBlocks(mid.mul(RootChain.CHECKPOINT_ID_INTERVAL).toString()))];\n\n                  case 3:\n                    headerBlock = _b.sent();\n                    headerStart = new bn_js_1.default(headerBlock.start);\n                    headerEnd = new bn_js_1.default(headerBlock.end);\n\n                    if (headerStart.lte(childBlockNumber) && childBlockNumber.lte(headerEnd)) {\n                      // if childBlockNumber is between the upper and lower bounds of the headerBlock, we found our answer\n                      ans = mid;\n                      return [3\n                      /*break*/\n                      , 4];\n                    } else if (headerStart.gt(childBlockNumber)) {\n                      // childBlockNumber was checkpointed before this header\n                      end = mid.sub(RootChain.BIG_ONE);\n                    } else if (headerEnd.lt(childBlockNumber)) {\n                      // childBlockNumber was checkpointed after this header\n                      start = mid.add(RootChain.BIG_ONE);\n                    }\n\n                    return [3\n                    /*break*/\n                    , 2];\n\n                  case 4:\n                    return [2\n                    /*return*/\n                    , ans.mul(RootChain.CHECKPOINT_ID_INTERVAL)];\n                }\n              });\n            });\n          };\n\n          RootChain.BIG_ONE = new bn_js_1.default(1);\n          RootChain.BIG_TWO = new bn_js_1.default(2);\n          RootChain.CHECKPOINT_ID_INTERVAL = new bn_js_1.default(10000);\n          return RootChain;\n        }(ContractsBase_1.default);\n\n        exports.default = RootChain;\n        /***/\n      },\n\n      /***/\n      \"./src/root/WithdrawManager.ts\":\n      /*!*************************************!*\\\n        !*** ./src/root/WithdrawManager.ts ***!\n        \\*************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function srcRootWithdrawManagerTs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        var __extends = this && this.__extends || function () {\n          var _extendStatics8 = function extendStatics(d, b) {\n            _extendStatics8 = Object.setPrototypeOf || {\n              __proto__: []\n            } instanceof Array && function (d, b) {\n              d.__proto__ = b;\n            } || function (d, b) {\n              for (var p in b) {\n                if (b.hasOwnProperty(p)) d[p] = b[p];\n              }\n            };\n\n            return _extendStatics8(d, b);\n          };\n\n          return function (d, b) {\n            _extendStatics8(d, b);\n\n            function __() {\n              this.constructor = d;\n            }\n\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n          };\n        }();\n\n        var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n          function adopt(value) {\n            return value instanceof P ? value : new P(function (resolve) {\n              resolve(value);\n            });\n          }\n\n          return new (P || (P = Promise))(function (resolve, reject) {\n            function fulfilled(value) {\n              try {\n                step(generator.next(value));\n              } catch (e) {\n                reject(e);\n              }\n            }\n\n            function rejected(value) {\n              try {\n                step(generator[\"throw\"](value));\n              } catch (e) {\n                reject(e);\n              }\n            }\n\n            function step(result) {\n              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n            }\n\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\n          });\n        };\n\n        var __generator = this && this.__generator || function (thisArg, body) {\n          var _ = {\n            label: 0,\n            sent: function sent() {\n              if (t[0] & 1) throw t[1];\n              return t[1];\n            },\n            trys: [],\n            ops: []\n          },\n              f,\n              y,\n              t,\n              g;\n          return g = {\n            next: verb(0),\n            \"throw\": verb(1),\n            \"return\": verb(2)\n          }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n            return this;\n          }), g;\n\n          function verb(n) {\n            return function (v) {\n              return step([n, v]);\n            };\n          }\n\n          function step(op) {\n            if (f) throw new TypeError(\"Generator is already executing.\");\n\n            while (_) {\n              try {\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n                if (y = 0, t) op = [op[0] & 2, t.value];\n\n                switch (op[0]) {\n                  case 0:\n                  case 1:\n                    t = op;\n                    break;\n\n                  case 4:\n                    _.label++;\n                    return {\n                      value: op[1],\n                      done: false\n                    };\n\n                  case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [0];\n                    continue;\n\n                  case 7:\n                    op = _.ops.pop();\n\n                    _.trys.pop();\n\n                    continue;\n\n                  default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                      _ = 0;\n                      continue;\n                    }\n\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                      _.label = op[1];\n                      break;\n                    }\n\n                    if (op[0] === 6 && _.label < t[1]) {\n                      _.label = t[1];\n                      t = op;\n                      break;\n                    }\n\n                    if (t && _.label < t[2]) {\n                      _.label = t[2];\n\n                      _.ops.push(op);\n\n                      break;\n                    }\n\n                    if (t[2]) _.ops.pop();\n\n                    _.trys.pop();\n\n                    continue;\n                }\n\n                op = body.call(thisArg, _);\n              } catch (e) {\n                op = [6, e];\n                y = 0;\n              } finally {\n                f = t = 0;\n              }\n            }\n\n            if (op[0] & 5) throw op[1];\n            return {\n              value: op[0] ? op[1] : void 0,\n              done: true\n            };\n          }\n        };\n\n        var __importDefault = this && this.__importDefault || function (mod) {\n          return mod && mod.__esModule ? mod : {\n            \"default\": mod\n          };\n        };\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n\n        var ethereumjs_util_1 = __importDefault(__webpack_require__(\n        /*! ethereumjs-util */\n        \"ethereumjs-util\"));\n\n        var ContractsBase_1 = __importDefault(__webpack_require__(\n        /*! ../common/ContractsBase */\n        \"./src/common/ContractsBase.ts\"));\n\n        var ExitManager_1 = __importDefault(__webpack_require__(\n        /*! ../common/ExitManager */\n        \"./src/common/ExitManager.ts\"));\n\n        var ProofsUtil_1 = __importDefault(__webpack_require__(\n        /*! ../libs/ProofsUtil */\n        \"./src/libs/ProofsUtil.ts\"));\n\n        var logger = {\n          info: __webpack_require__(\n          /*! debug */\n          \"./node_modules/debug/src/browser.js\")('maticjs:WithdrawManager'),\n          debug: __webpack_require__(\n          /*! debug */\n          \"./node_modules/debug/src/browser.js\")('maticjs:debug:WithdrawManager')\n        };\n\n        var WithdrawManager =\n        /** @class */\n        function (_super) {\n          __extends(WithdrawManager, _super);\n\n          function WithdrawManager(options, rootChain, web3Client, registry) {\n            var _this = _super.call(this, web3Client, options.network) || this;\n\n            _this.withdrawManager = new _this.web3Client.parentWeb3.eth.Contract(_this.network.abi('WithdrawManager'), options.withdrawManager);\n            _this.rootChain = rootChain;\n            _this.registry = registry;\n            _this.exitManager = new ExitManager_1.default(rootChain, options, web3Client);\n            return _this;\n          }\n\n          WithdrawManager.prototype.initialize = function () {\n            return __awaiter(this, void 0, void 0, function () {\n              var erc20PredicateAddress, erc721PredicateAddress;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    return [4\n                    /*yield*/\n                    , this.registry.registry.methods.erc20Predicate().call()];\n\n                  case 1:\n                    erc20PredicateAddress = _a.sent();\n                    return [4\n                    /*yield*/\n                    , this.registry.registry.methods.erc721Predicate().call()];\n\n                  case 2:\n                    erc721PredicateAddress = _a.sent();\n                    this.erc20Predicate = new this.web3Client.parentWeb3.eth.Contract(this.network.abi('ERC20Predicate'), erc20PredicateAddress);\n                    this.erc721Predicate = new this.web3Client.parentWeb3.eth.Contract(this.network.abi('ERC721Predicate'), erc721PredicateAddress);\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            });\n          };\n\n          WithdrawManager.prototype.burnERC20Tokens = function (token, amount, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              var txObject, web3Options;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    if (token === ContractsBase_1.default.MATIC_CHILD_TOKEN) {\n                      txObject = this.getChildMaticContract().methods.withdraw(this.encode(amount));\n                      options.value = this.encode(amount);\n                    } else {\n                      txObject = this.getERC20TokenContract(token).methods.withdraw(this.encode(amount));\n                    }\n\n                    return [4\n                    /*yield*/\n                    , this.web3Client.fillOptions(txObject, false\n                    /* onRootChain */\n                    , options)];\n\n                  case 1:\n                    web3Options = _a.sent();\n\n                    if (web3Options.encodeAbi) {\n                      return [2\n                      /*return*/\n                      , Object.assign(web3Options, {\n                        data: txObject.encodeABI(),\n                        to: token\n                      })];\n                    }\n\n                    return [2\n                    /*return*/\n                    , this.web3Client.send(txObject, web3Options, options)];\n                }\n              });\n            });\n          };\n\n          WithdrawManager.prototype.burnERC721Token = function (token, tokenId, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              var txObject, web3Options;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    txObject = this.getERC721TokenContract(token).methods.withdraw(this.encode(tokenId));\n                    return [4\n                    /*yield*/\n                    , this.web3Client.fillOptions(txObject, false\n                    /* onRootChain */\n                    , options)];\n\n                  case 1:\n                    web3Options = _a.sent();\n\n                    if (web3Options.encodeAbi) {\n                      return [2\n                      /*return*/\n                      , Object.assign(web3Options, {\n                        data: txObject.encodeABI(),\n                        to: token\n                      })];\n                    }\n\n                    return [2\n                    /*return*/\n                    , this.web3Client.send(txObject, web3Options, options)];\n                }\n              });\n            });\n          };\n\n          WithdrawManager.prototype.processExits = function (tokens, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              var txObject, web3Options;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    if (Array.isArray(tokens)) {\n                      txObject = this.withdrawManager.methods.processExitsBatch(tokens);\n                    } else {\n                      txObject = this.withdrawManager.methods.processExits(tokens);\n                    }\n\n                    options = options || {};\n\n                    if (!options || !options.gas || options.gas < 2000000) {\n                      logger.info('processExits can be gas expensive, sending in 2000000 gas but even this might not be enough'); // eslint-disable-line\n\n                      options.gas = 2000000;\n                    }\n\n                    return [4\n                    /*yield*/\n                    , this.web3Client.fillOptions(txObject, true\n                    /* onRootChain */\n                    , options)];\n\n                  case 1:\n                    web3Options = _a.sent();\n\n                    if (web3Options.encodeAbi) {\n                      return [2\n                      /*return*/\n                      , Object.assign(web3Options, {\n                        data: txObject.encodeABI(),\n                        to: this.withdrawManager.options.address\n                      })];\n                    }\n\n                    return [2\n                    /*return*/\n                    , this.web3Client.send(txObject, web3Options, options)];\n                }\n              });\n            });\n          };\n\n          WithdrawManager.prototype.startExitWithBurntERC20Tokens = function (burnTxHash, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              var payload, txObject, web3Options;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    return [4\n                    /*yield*/\n                    , this.exitManager.buildPayloadForExit(burnTxHash, WithdrawManager.ERC20_WITHDRAW_EVENT_SIG)];\n\n                  case 1:\n                    payload = _a.sent();\n                    txObject = this.erc20Predicate.methods.startExitWithBurntTokens(payload);\n                    return [4\n                    /*yield*/\n                    , this.web3Client.fillOptions(txObject, true\n                    /* onRootChain */\n                    , options)];\n\n                  case 2:\n                    web3Options = _a.sent();\n\n                    if (web3Options.encodeAbi) {\n                      return [2\n                      /*return*/\n                      , Object.assign(web3Options, {\n                        data: txObject.encodeABI(),\n                        to: this.erc20Predicate.options.address\n                      })];\n                    }\n\n                    return [2\n                    /*return*/\n                    , this.web3Client.send(txObject, web3Options, options)];\n                }\n              });\n            });\n          };\n\n          WithdrawManager.prototype.startExitWithBurntERC20TokensHermoine = function (burnTxHash, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              var payload, txObject, web3Options;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    return [4\n                    /*yield*/\n                    , this.exitManager.buildPayloadForExitHermoine(burnTxHash, WithdrawManager.ERC20_WITHDRAW_EVENT_SIG)];\n\n                  case 1:\n                    payload = _a.sent();\n                    txObject = this.erc20Predicate.methods.startExitWithBurntTokens(payload);\n                    return [4\n                    /*yield*/\n                    , this.web3Client.fillOptions(txObject, true\n                    /* onRootChain */\n                    , options)];\n\n                  case 2:\n                    web3Options = _a.sent();\n\n                    if (web3Options.encodeAbi) {\n                      return [2\n                      /*return*/\n                      , Object.assign(web3Options, {\n                        data: txObject.encodeABI(),\n                        to: this.erc20Predicate.options.address\n                      })];\n                    }\n\n                    return [2\n                    /*return*/\n                    , this.web3Client.send(txObject, web3Options, options)];\n                }\n              });\n            });\n          };\n\n          WithdrawManager.prototype.startExitWithBurntERC721Tokens = function (burnTxHash, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              var payload, txObject, web3Options;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    return [4\n                    /*yield*/\n                    , this.exitManager.buildPayloadForExit(burnTxHash, WithdrawManager.ERC721_WITHDRAW_EVENT_SIG)];\n\n                  case 1:\n                    payload = _a.sent();\n                    txObject = this.erc721Predicate.methods.startExitWithBurntTokens(payload);\n                    return [4\n                    /*yield*/\n                    , this.web3Client.fillOptions(txObject, true\n                    /* onRootChain */\n                    , options)];\n\n                  case 2:\n                    web3Options = _a.sent();\n\n                    if (web3Options.encodeAbi) {\n                      return [2\n                      /*return*/\n                      , Object.assign(web3Options, {\n                        data: txObject.encodeABI(),\n                        to: this.erc721Predicate.options.address\n                      })];\n                    }\n\n                    return [2\n                    /*return*/\n                    , this.web3Client.send(txObject, web3Options, options)];\n                }\n              });\n            });\n          };\n\n          WithdrawManager.prototype.startExitWithBurntERC721TokensHermoine = function (burnTxHash, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              var payload, txObject, web3Options;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    return [4\n                    /*yield*/\n                    , this.exitManager.buildPayloadForExitHermoine(burnTxHash, WithdrawManager.ERC721_WITHDRAW_EVENT_SIG)];\n\n                  case 1:\n                    payload = _a.sent();\n                    txObject = this.erc721Predicate.methods.startExitWithBurntTokens(payload);\n                    return [4\n                    /*yield*/\n                    , this.web3Client.fillOptions(txObject, true\n                    /* onRootChain */\n                    , options)];\n\n                  case 2:\n                    web3Options = _a.sent();\n\n                    if (web3Options.encodeAbi) {\n                      return [2\n                      /*return*/\n                      , Object.assign(web3Options, {\n                        data: txObject.encodeABI(),\n                        to: this.erc721Predicate.options.address\n                      })];\n                    }\n\n                    return [2\n                    /*return*/\n                    , this.web3Client.send(txObject, web3Options, options)];\n                }\n              });\n            });\n          };\n\n          WithdrawManager.prototype.getExitTime = function (burnTxHash, confirmTxHash) {\n            return __awaiter(this, void 0, void 0, function () {\n              var HALF_EXIT_PERIOD, _a, blockNumber, confirmTime, checkPointTime, exitTime;\n\n              return __generator(this, function (_b) {\n                switch (_b.label) {\n                  case 0:\n                    _a = parseInt;\n                    return [4\n                    /*yield*/\n                    , this.web3Client.call(this.withdrawManager.methods.HALF_EXIT_PERIOD())];\n\n                  case 1:\n                    HALF_EXIT_PERIOD = _a.apply(void 0, [_b.sent()]);\n                    return [4\n                    /*yield*/\n                    , this.web3Client.getParentWeb3().eth.getTransaction(confirmTxHash)];\n\n                  case 2:\n                    blockNumber = _b.sent().blockNumber;\n                    return [4\n                    /*yield*/\n                    , this.web3Client.getParentWeb3().eth.getBlock(blockNumber)];\n\n                  case 3:\n                    confirmTime = _b.sent().timestamp;\n                    return [4\n                    /*yield*/\n                    , this.rootChain.getCheckpointInclusion(burnTxHash)];\n\n                  case 4:\n                    checkPointTime = _b.sent().createdAt;\n                    exitTime = Math.max(parseInt(checkPointTime) + 2 * HALF_EXIT_PERIOD, +confirmTime + HALF_EXIT_PERIOD);\n                    return [2\n                    /*return*/\n                    , {\n                      exitTime: exitTime,\n                      exitable: Date.now() / 1000 > exitTime\n                    }];\n                }\n              });\n            });\n          };\n          /**\n           * Start an exit for a token that was minted and burnt on the side chain\n           * Wrapper over contract call: [MintableERC721Predicate.startExitForMintableBurntToken](https://github.com/maticnetwork/contracts/blob/e2cb462b8487921463090b0bdcdd7433db14252b/contracts/root/predicates/MintableERC721Predicate.sol#L31)\n           * @param burnTxHash Hash of the burn transaction on Matic\n           * @param predicate address of MintableERC721Predicate\n           */\n\n\n          WithdrawManager.prototype.startExitForMintableBurntToken = function (burnTxHash, predicate, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              var _a, payload, mint, _predicate, txObject, web3Options;\n\n              return __generator(this, function (_b) {\n                switch (_b.label) {\n                  case 0:\n                    return [4\n                    /*yield*/\n                    , this._buildPayloadAndFindMintTransaction(burnTxHash)];\n\n                  case 1:\n                    _a = _b.sent(), payload = _a.payload, mint = _a.mint;\n                    _predicate = new this.web3Client.parentWeb3.eth.Contract(this.network.abi('MintableERC721Predicate'), predicate);\n                    txObject = _predicate.methods.startExitForMintableBurntToken(payload, mint);\n                    return [4\n                    /*yield*/\n                    , this.web3Client.fillOptions(txObject, true\n                    /* onRootChain */\n                    , options)];\n\n                  case 2:\n                    web3Options = _b.sent();\n                    return [2\n                    /*return*/\n                    , this.web3Client.send(txObject, web3Options, options)];\n                }\n              });\n            });\n          };\n          /**\n           * Start an exit for a token with metadata (token uri) that was minted and burnt on the side chain\n           * Wrapper over contract call: [MintableERC721Predicate.startExitForMetadataMintableBurntToken](https://github.com/maticnetwork/contracts/blob/e2cb462b8487921463090b0bdcdd7433db14252b/contracts/root/predicates/MintableERC721Predicate.sol#L66)\n           * @param burnTxHash Hash of the burn transaction on Matic\n           * @param predicate address of MintableERC721Predicate\n           */\n\n\n          WithdrawManager.prototype.startExitForMetadataMintableBurntToken = function (burnTxHash, predicate, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              var _a, payload, mint, _predicate, txObject, web3Options;\n\n              return __generator(this, function (_b) {\n                switch (_b.label) {\n                  case 0:\n                    return [4\n                    /*yield*/\n                    , this._buildPayloadAndFindMintTransaction(burnTxHash)];\n\n                  case 1:\n                    _a = _b.sent(), payload = _a.payload, mint = _a.mint;\n                    _predicate = new this.web3Client.parentWeb3.eth.Contract(this.network.abi('MintableERC721Predicate'), predicate);\n                    txObject = _predicate.methods.startExitForMetadataMintableBurntToken(payload, mint);\n                    return [4\n                    /*yield*/\n                    , this.web3Client.fillOptions(txObject, true\n                    /* onRootChain */\n                    , options)];\n\n                  case 2:\n                    web3Options = _b.sent();\n                    return [2\n                    /*return*/\n                    , this.web3Client.send(txObject, web3Options, options)];\n                }\n              });\n            });\n          };\n\n          WithdrawManager.prototype._buildPayloadAndFindMintTransaction = function (burnTxHash) {\n            return __awaiter(this, void 0, void 0, function () {\n              var payload, burnReceipt, withdrawEvent, tokenId, contract, mintEvents, mintTxHash, mint, _a, _b;\n\n              return __generator(this, function (_c) {\n                switch (_c.label) {\n                  case 0:\n                    return [4\n                    /*yield*/\n                    , this.exitManager.buildPayloadForExit(burnTxHash, WithdrawManager.ERC721_WITHDRAW_EVENT_SIG)];\n\n                  case 1:\n                    payload = _c.sent();\n                    return [4\n                    /*yield*/\n                    , this.web3Client.web3.eth.getTransactionReceipt(burnTxHash)];\n\n                  case 2:\n                    burnReceipt = _c.sent();\n                    withdrawEvent = burnReceipt.logs.find(function (l) {\n                      return l.topics[0].toLowerCase() === WithdrawManager.ERC721_WITHDRAW_EVENT_SIG;\n                    });\n                    tokenId = withdrawEvent.data;\n                    logger.debug({\n                      burnTxHash: burnTxHash,\n                      burnReceipt: burnReceipt,\n                      withdrawEvent: withdrawEvent,\n                      tokenId: tokenId\n                    });\n                    contract = new this.web3Client.web3.eth.Contract(this.network.abi('ChildERC721Mintable'), burnReceipt.to);\n                    return [4\n                    /*yield*/\n                    , contract.getPastEvents('Transfer', {\n                      filter: {\n                        tokenId: tokenId\n                      },\n                      fromBlock: 0,\n                      toBlock: 'latest'\n                    })];\n\n                  case 3:\n                    mintEvents = _c.sent();\n                    logger.debug({\n                      mintEvents: mintEvents\n                    });\n\n                    if (!mintEvents || !mintEvents.length) {\n                      throw new Error('Could not retrieve the mint event');\n                    }\n\n                    mintTxHash = mintEvents.find(function (event) {\n                      return event.raw.topics[3] === tokenId;\n                    }).transactionHash;\n                    return [4\n                    /*yield*/\n                    , this.web3Client.web3.eth.getTransaction(mintTxHash)];\n\n                  case 4:\n                    mint = _c.sent();\n                    _b = (_a = ethereumjs_util_1.default).bufferToHex;\n                    return [4\n                    /*yield*/\n                    , ProofsUtil_1.default.getTxBytes(mint)];\n\n                  case 5:\n                    mint = _b.apply(_a, [_c.sent()]);\n                    return [2\n                    /*return*/\n                    , {\n                      payload: payload,\n                      mint: mint\n                    }];\n                }\n              });\n            });\n          };\n\n          WithdrawManager.ERC721_WITHDRAW_EVENT_SIG = '0x9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb'.toLowerCase();\n          WithdrawManager.ERC20_WITHDRAW_EVENT_SIG = '0xebff2602b3f468259e1e99f613fed6691f3a6526effe6ef3e768ba7ae7a36c4f'.toLowerCase();\n          return WithdrawManager;\n        }(ContractsBase_1.default);\n\n        exports.default = WithdrawManager;\n        /***/\n      },\n\n      /***/\n      \"@maticnetwork/meta/network\":\n      /*!*********************************************!*\\\n        !*** external \"@maticnetwork/meta/network\" ***!\n        \\*********************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function maticnetworkMetaNetwork(module, exports) {\n        module.exports = __WEBPACK_EXTERNAL_MODULE__maticnetwork_meta_network__;\n        /***/\n      },\n\n      /***/\n      \"axios\":\n      /*!************************!*\\\n        !*** external \"axios\" ***!\n        \\************************/\n\n      /*! no static exports found */\n\n      /***/\n      function axios(module, exports) {\n        module.exports = __WEBPACK_EXTERNAL_MODULE_axios__;\n        /***/\n      },\n\n      /***/\n      \"bn.js\":\n      /*!************************!*\\\n        !*** external \"bn.js\" ***!\n        \\************************/\n\n      /*! no static exports found */\n\n      /***/\n      function bnJs(module, exports) {\n        module.exports = __WEBPACK_EXTERNAL_MODULE_bn_js__;\n        /***/\n      },\n\n      /***/\n      \"eth-sig-util\":\n      /*!*******************************!*\\\n        !*** external \"eth-sig-util\" ***!\n        \\*******************************/\n\n      /*! no static exports found */\n\n      /***/\n      function ethSigUtil(module, exports) {\n        module.exports = __WEBPACK_EXTERNAL_MODULE_eth_sig_util__;\n        /***/\n      },\n\n      /***/\n      \"ethereumjs-tx\":\n      /*!********************************!*\\\n        !*** external \"ethereumjs-tx\" ***!\n        \\********************************/\n\n      /*! no static exports found */\n\n      /***/\n      function ethereumjsTx(module, exports) {\n        module.exports = __WEBPACK_EXTERNAL_MODULE_ethereumjs_tx__;\n        /***/\n      },\n\n      /***/\n      \"ethereumjs-util\":\n      /*!**********************************!*\\\n        !*** external \"ethereumjs-util\" ***!\n        \\**********************************/\n\n      /*! no static exports found */\n\n      /***/\n      function ethereumjsUtil(module, exports) {\n        module.exports = __WEBPACK_EXTERNAL_MODULE_ethereumjs_util__;\n        /***/\n      },\n\n      /***/\n      \"merkle-patricia-tree\":\n      /*!***************************************!*\\\n        !*** external \"merkle-patricia-tree\" ***!\n        \\***************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function merklePatriciaTree(module, exports) {\n        module.exports = __WEBPACK_EXTERNAL_MODULE_merkle_patricia_tree__;\n        /***/\n      },\n\n      /***/\n      \"web3\":\n      /*!***********************!*\\\n        !*** external \"web3\" ***!\n        \\***********************/\n\n      /*! no static exports found */\n\n      /***/\n      function web3(module, exports) {\n        module.exports = __WEBPACK_EXTERNAL_MODULE_web3__;\n        /***/\n      }\n      /******/\n\n    })[\"default\"]\n  );\n});","map":null,"metadata":{},"sourceType":"script"}