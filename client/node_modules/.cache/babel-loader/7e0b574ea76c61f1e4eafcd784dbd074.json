{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Luka\\\\Desktop\\\\SupportChildrenV2.0\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Luka\\\\Desktop\\\\SupportChildrenV2.0\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport WebSocket from 'ws';\n\nvar Web3 = require(\"web3\"); // For Mumbai\n\n\nvar ws = new WebSocket(\"ws://ws-mumbai.matic.today/\"); // For Matic mainnet: wss://ws-mainnet.matic.network/\n\nvar web3 = new Web3();\nvar abiCoder = web3.eth.abi;\n\nfunction checkDepositStatus(_x, _x2, _x3, _x4) {\n  return _checkDepositStatus.apply(this, arguments);\n}\n\nfunction _checkDepositStatus() {\n  _checkDepositStatus = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(userAccount, rootToken, depositAmount, childChainManagerProxy) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n              ws.on(\"open\", function () {\n                ws.send(\"{\\\"id\\\": 1, \\\"method\\\": \\\"eth_subscribe\\\", \\\"params\\\": [\\\"newDeposits\\\", {\\\"Contract\\\": \".concat(childChainManagerProxy, \"}]}\"));\n                ws.on(\"message\", function (msg) {\n                  var parsedMsg = JSON.parse(msg);\n\n                  if (parsedMsg && parsedMsg.params && parsedMsg.params.result && parsedMsg.params.result.Data) {\n                    var fullData = parsedMsg.params.result.Data;\n\n                    var _abiCoder$decodeParam = abiCoder.decodeParameters([\"bytes32\", \"bytes\"], fullData),\n                        syncType = _abiCoder$decodeParam[0],\n                        syncData = _abiCoder$decodeParam[1]; // check if sync is of deposit type (keccak256(\"DEPOSIT\"))\n\n\n                    // check if sync is of deposit type (keccak256(\"DEPOSIT\"))\n                    var depositType = \"0x87a7811f4bfedea3d341ad165680ae306b01aaeacc205d227629cf157dd9f821\";\n\n                    if (syncType.toLowerCase() === depositType.toLowerCase()) {\n                      var _abiCoder$decodeParam2 = abiCoder.decodeParameters([\"address\", \"address\", \"bytes\"], syncData),\n                          userAddress = _abiCoder$decodeParam2[0],\n                          rootTokenAddress = _abiCoder$decodeParam2[1],\n                          depositData = _abiCoder$decodeParam2[2]; // depositData can be further decoded to get amount, tokenId etc. based on token type\n                      // For ERC20 tokens\n\n\n                      // depositData can be further decoded to get amount, tokenId etc. based on token type\n                      // For ERC20 tokens\n                      var _abiCoder$decodeParam3 = abiCoder.decodeParameters([\"uint256\"], depositData),\n                          amount = _abiCoder$decodeParam3[0];\n\n                      if (userAddress.toLowerCase() === userAccount.toLowerCase() && rootToken.toLowerCase() === rootTokenAddress.toLowerCase() && depositAmount === amount) {\n                        resolve(true);\n                      }\n                    }\n                  }\n                });\n                ws.on(\"error\", function () {\n                  reject(false);\n                });\n                ws.on(\"close\", function () {\n                  reject(false);\n                });\n              });\n            }));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _checkDepositStatus.apply(this, arguments);\n}\n\nexport default checkDepositStatus; // Param1 - user address\n// Param2 - contract address on main chain\n// Param3 - amount deposited on main chain\n// Param4 - child chain manager proxy address (0xA6FA4fB5f76172d178d61B04b0ecd319C5d1C0aa for mainnet)","map":{"version":3,"sources":["C:/Users/Luka/Desktop/SupportChildrenV2.0/client/src/depositCheck.js"],"names":["WebSocket","Web3","require","ws","web3","abiCoder","eth","abi","checkDepositStatus","userAccount","rootToken","depositAmount","childChainManagerProxy","Promise","resolve","reject","on","send","msg","parsedMsg","JSON","parse","params","result","Data","fullData","decodeParameters","syncType","syncData","depositType","toLowerCase","userAddress","rootTokenAddress","depositData","amount"],"mappings":";;AAAA,OAAOA,SAAP,MAAsB,IAAtB;;AAEA,IAAMC,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB,C,CAEA;;;AACA,IAAMC,EAAE,GAAG,IAAIH,SAAJ,CAAc,6BAAd,CAAX,C,CACA;;AACA,IAAMI,IAAI,GAAG,IAAIH,IAAJ,EAAb;AACA,IAAMI,QAAQ,GAAGD,IAAI,CAACE,GAAL,CAASC,GAA1B;;SAEeC,kB;;;;;iFAAf,iBACEC,WADF,EAEEC,SAFF,EAGEC,aAHF,EAIEC,sBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,6CAMS,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCZ,cAAAA,EAAE,CAACa,EAAH,CAAM,MAAN,EAAc,YAAM;AAClBb,gBAAAA,EAAE,CAACc,IAAH,mGACiFL,sBADjF;AAIAT,gBAAAA,EAAE,CAACa,EAAH,CAAM,SAAN,EAAiB,UAACE,GAAD,EAAS;AACxB,sBAAMC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWH,GAAX,CAAlB;;AACA,sBACEC,SAAS,IACTA,SAAS,CAACG,MADV,IAEAH,SAAS,CAACG,MAAV,CAAiBC,MAFjB,IAGAJ,SAAS,CAACG,MAAV,CAAiBC,MAAjB,CAAwBC,IAJ1B,EAKE;AACA,wBAAMC,QAAQ,GAAGN,SAAS,CAACG,MAAV,CAAiBC,MAAjB,CAAwBC,IAAzC;;AADA,gDAEqCnB,QAAQ,CAACqB,gBAAT,CACnC,CAAC,SAAD,EAAY,OAAZ,CADmC,EAEnCD,QAFmC,CAFrC;AAAA,wBAEWE,QAFX,yBAEQ,CAFR;AAAA,wBAEwBC,QAFxB,yBAEqB,CAFrB,GAOA;;;AAAA;AACA,wBAAMC,WAAW,GACf,oEADF;;AAEA,wBAAIF,QAAQ,CAACG,WAAT,OAA2BD,WAAW,CAACC,WAAZ,EAA/B,EAA0D;AAAA,mDAKpDzB,QAAQ,CAACqB,gBAAT,CACF,CAAC,SAAD,EAAY,SAAZ,EAAuB,OAAvB,CADE,EAEFE,QAFE,CALoD;AAAA,0BAEnDG,WAFmD,0BAEtD,CAFsD;AAAA,0BAGnDC,gBAHmD,0BAGtD,CAHsD;AAAA,0BAInDC,WAJmD,0BAItD,CAJsD,GAUxD;AACA;;;AADA;AACA;AAXwD,mDAYlC5B,QAAQ,CAACqB,gBAAT,CACpB,CAAC,SAAD,CADoB,EAEpBO,WAFoB,CAZkC;AAAA,0BAY7CC,MAZ6C,0BAYhD,CAZgD;;AAgBxD,0BACEH,WAAW,CAACD,WAAZ,OAA8BrB,WAAW,CAACqB,WAAZ,EAA9B,IACApB,SAAS,CAACoB,WAAV,OAA4BE,gBAAgB,CAACF,WAAjB,EAD5B,IAEAnB,aAAa,KAAKuB,MAHpB,EAIE;AACApB,wBAAAA,OAAO,CAAC,IAAD,CAAP;AACD;AACF;AACF;AACF,iBA1CD;AA4CAX,gBAAAA,EAAE,CAACa,EAAH,CAAM,OAAN,EAAe,YAAM;AACnBD,kBAAAA,MAAM,CAAC,KAAD,CAAN;AACD,iBAFD;AAIAZ,gBAAAA,EAAE,CAACa,EAAH,CAAM,OAAN,EAAe,YAAM;AACnBD,kBAAAA,MAAM,CAAC,KAAD,CAAN;AACD,iBAFD;AAGD,eAxDD;AAyDD,aA1DM,CANT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAmEA,eAAeP,kBAAf,C,CAEA;AACA;AACA;AACA","sourcesContent":["import WebSocket from 'ws';\r\n\r\nconst Web3 = require(\"web3\");\r\n\r\n// For Mumbai\r\nconst ws = new WebSocket(\"ws://ws-mumbai.matic.today/\");\r\n// For Matic mainnet: wss://ws-mainnet.matic.network/\r\nconst web3 = new Web3();\r\nconst abiCoder = web3.eth.abi;\r\n\r\nasync function checkDepositStatus(\r\n  userAccount,\r\n  rootToken,\r\n  depositAmount,\r\n  childChainManagerProxy\r\n) {\r\n  return new Promise((resolve, reject) => {\r\n    ws.on(\"open\", () => {\r\n      ws.send(\r\n        `{\"id\": 1, \"method\": \"eth_subscribe\", \"params\": [\"newDeposits\", {\"Contract\": ${childChainManagerProxy}}]}`\r\n      );\r\n\r\n      ws.on(\"message\", (msg) => {\r\n        const parsedMsg = JSON.parse(msg);\r\n        if (\r\n          parsedMsg &&\r\n          parsedMsg.params &&\r\n          parsedMsg.params.result &&\r\n          parsedMsg.params.result.Data\r\n        ) {\r\n          const fullData = parsedMsg.params.result.Data;\r\n          const { 0: syncType, 1: syncData } = abiCoder.decodeParameters(\r\n            [\"bytes32\", \"bytes\"],\r\n            fullData\r\n          );\r\n\r\n          // check if sync is of deposit type (keccak256(\"DEPOSIT\"))\r\n          const depositType =\r\n            \"0x87a7811f4bfedea3d341ad165680ae306b01aaeacc205d227629cf157dd9f821\";\r\n          if (syncType.toLowerCase() === depositType.toLowerCase()) {\r\n            const {\r\n              0: userAddress,\r\n              1: rootTokenAddress,\r\n              2: depositData,\r\n            } = abiCoder.decodeParameters(\r\n              [\"address\", \"address\", \"bytes\"],\r\n              syncData\r\n            );\r\n\r\n            // depositData can be further decoded to get amount, tokenId etc. based on token type\r\n            // For ERC20 tokens\r\n            const { 0: amount } = abiCoder.decodeParameters(\r\n              [\"uint256\"],\r\n              depositData\r\n            );\r\n            if (\r\n              userAddress.toLowerCase() === userAccount.toLowerCase() &&\r\n              rootToken.toLowerCase() === rootTokenAddress.toLowerCase() &&\r\n              depositAmount === amount\r\n            ) {\r\n              resolve(true);\r\n            }\r\n          }\r\n        }\r\n      });\r\n\r\n      ws.on(\"error\", () => {\r\n        reject(false);\r\n      });\r\n\r\n      ws.on(\"close\", () => {\r\n        reject(false);\r\n      });\r\n    });\r\n  });\r\n}\r\n\r\nexport default checkDepositStatus;\r\n\r\n// Param1 - user address\r\n// Param2 - contract address on main chain\r\n// Param3 - amount deposited on main chain\r\n// Param4 - child chain manager proxy address (0xA6FA4fB5f76172d178d61B04b0ecd319C5d1C0aa for mainnet)"]},"metadata":{},"sourceType":"module"}