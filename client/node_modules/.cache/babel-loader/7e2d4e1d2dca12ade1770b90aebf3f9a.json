{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\Luka\\\\Desktop\\\\SaveChildrenV2.0\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\Luka\\\\Desktop\\\\SaveChildrenV2.0\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Luka\\\\Desktop\\\\SaveChildrenV2.0\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\Luka\\\\Desktop\\\\SaveChildrenV2.0\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Luka\\\\Desktop\\\\SaveChildrenV2.0\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Luka\\\\Desktop\\\\SaveChildrenV2.0\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Luka\\\\Desktop\\\\SaveChildrenV2.0\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Luka\\\\Desktop\\\\SaveChildrenV2.0\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Luka\\\\Desktop\\\\SaveChildrenV2.0\\\\src\\\\pages\\\\Campaign.js\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport SupportChildren from '../abis/SupportChildren.json';\nimport '../components/App.css';\nimport ReactDOM from \"react-dom\";\nimport emailjs from 'emailjs-com';\nimport NFT from '../abis/NFT.json';\n\nvar Campaign = /*#__PURE__*/function (_Component) {\n  _inherits(Campaign, _Component);\n\n  function Campaign(props) {\n    var _this;\n\n    _classCallCheck(this, Campaign);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Campaign).call(this, props));\n\n    _this.donate = function () {\n      _this.state.contract.methods.donate(0, \"0xaFF4481D10270F50f203E0763e2597776068CBc5\", 10).send({\n        from: _this.state.account\n      });\n    };\n\n    _this.donateETH = function () {\n      var web3 = window.web3;\n      var erc20instance = new web3.eth.Contract([{\n        \"constant\": true,\n        \"inputs\": [],\n        \"name\": \"name\",\n        \"outputs\": [{\n          \"name\": \"\",\n          \"type\": \"string\"\n        }],\n        \"payable\": false,\n        \"type\": \"function\"\n      }, {\n        \"constant\": true,\n        \"inputs\": [],\n        \"name\": \"decimals\",\n        \"outputs\": [{\n          \"name\": \"\",\n          \"type\": \"uint8\"\n        }],\n        \"payable\": false,\n        \"type\": \"function\"\n      }, {\n        \"constant\": true,\n        \"inputs\": [{\n          \"name\": \"_owner\",\n          \"type\": \"address\"\n        }],\n        \"name\": \"balanceOf\",\n        \"outputs\": [{\n          \"name\": \"balance\",\n          \"type\": \"uint256\"\n        }],\n        \"payable\": false,\n        \"type\": \"function\"\n      }, {\n        \"constant\": true,\n        \"inputs\": [],\n        \"name\": \"symbol\",\n        \"outputs\": [{\n          \"name\": \"\",\n          \"type\": \"string\"\n        }],\n        \"payable\": false,\n        \"type\": \"function\"\n      }], \"0xaFF4481D10270F50f203E0763e2597776068CBc5\");\n      erc20instance.methods.approve(\"0x80F8F287344fb123Aef3C3B76d29508B3eEE58F2\", 100).send({\n        from: _this.state.account\n      }).then(_this.state.contract.methods.donateETH(0).send({\n        from: _this.state.account,\n        value: parseFloat(_this.state.amount) * Math.pow(10, 18)\n      }));\n    };\n\n    _this.mintNFT = function (receipt) {\n      _this.state.contractNFT.methods.mint(receipt).send({\n        from: _this.state.account\n      });\n    };\n\n    _this.state = {\n      contract: null,\n      contractNFT: null,\n      account: '',\n      campaign: '',\n      amount: '',\n      email: '',\n      date: '',\n      ercAmount: '',\n      tokenAddress: ''\n    };\n    return _this;\n  }\n\n  _createClass(Campaign, [{\n    key: \"updateEmail\",\n    value: function updateEmail(evt) {\n      this.setState({\n        email: evt.target.value\n      });\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n                _context.next = 6;\n                return this.loadNFT();\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context2.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context2.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n                }\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var web3, accounts, networkId, networkData, address, abi, contract, lastItem, campaign;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3; // Load account\n\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context3.sent;\n                this.setState({\n                  account: accounts[0]\n                });\n                _context3.next = 7;\n                return web3.eth.net.getId();\n\n              case 7:\n                networkId = _context3.sent;\n                networkData = SupportChildren.networks[networkId];\n\n                if (!networkData) {\n                  _context3.next = 20;\n                  break;\n                }\n\n                address = networkData.address;\n                abi = SupportChildren.abi;\n                contract = new web3.eth.Contract(abi, address);\n                lastItem = window.location.pathname.split(\"/\").pop();\n                _context3.next = 16;\n                return contract.methods.campaigns(parseInt(lastItem)).call();\n\n              case 16:\n                campaign = _context3.sent;\n                this.setState({\n                  contract: contract,\n                  campaign: campaign,\n                  date: campaign.timeCreated\n                });\n                _context3.next = 21;\n                break;\n\n              case 20:\n                window.alert('Smart contract not deployed to detected network');\n\n              case 21:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }() // async printDonors(){\n    //     const mainDiv = document.getElementById('donors')\n    //     const len = await this.state.contract.methods.getDonorsLength(this.state.campaign.id).call()\n    //     const donors = await this.state.contract.methods.getDonors(this.state.campaign.id).call()\n    //     for(var i =0;i<Math.min(3, len);i++){\n    //         const donation = donors[i]\n    //         const li = document.createElement('li')\n    //         const image = document.createElement('img')\n    //         image.src = \"https://cdn.discordapp.com/attachments/837326649074516048/867532401155899421/ethlogo.png\"\n    //         const p = document.createElement('p')\n    //         p.innerHTML = donation.amount/(10**18) + \" ETH\"\n    //         const h = document.createElement('h3')\n    //         h.innerHTML = donation.from\n    //         li.appendChild(image)\n    //         li.appendChild(p)\n    //         li.appendChild(h)\n    //         mainDiv.appendChild(li)\n    //     }\n    // }\n\n  }, {\n    key: \"loadNFT\",\n    value: function () {\n      var _loadNFT = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var web3, accounts, networkId, networkData, address, abiNFT, contractNFT, rec;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                web3 = window.web3; // Load account\n\n                _context4.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context4.sent;\n                _context4.next = 6;\n                return web3.eth.net.getId();\n\n              case 6:\n                networkId = _context4.sent;\n                networkData = NFT.networks[networkId];\n\n                if (!networkData) {\n                  _context4.next = 18;\n                  break;\n                }\n\n                address = networkData.address;\n                abiNFT = NFT.abi;\n                contractNFT = new web3.eth.Contract(abiNFT, address);\n                _context4.next = 14;\n                return contractNFT.methods.print().call();\n\n              case 14:\n                rec = _context4.sent;\n                this.setState({\n                  contractNFT: contractNFT\n                });\n                _context4.next = 19;\n                break;\n\n              case 18:\n                window.alert('Smart contract not deployed to detected network');\n\n              case 19:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function loadNFT() {\n        return _loadNFT.apply(this, arguments);\n      }\n\n      return loadNFT;\n    }()\n  }, {\n    key: \"upadateAmount\",\n    value: function upadateAmount(evt) {\n      this.setState({\n        amount: evt.target.value\n      });\n    }\n  }, {\n    key: \"updateERCAmount\",\n    value: function updateERCAmount(evt) {\n      this.setState({\n        ercAmount: evt.target.value\n      });\n    }\n  }, {\n    key: \"updateTokenAddress\",\n    value: function updateTokenAddress(evt) {\n      this.setState({\n        tokenAddress: evt.target.value\n      });\n    }\n  }, {\n    key: \"sendEmail\",\n    value: function sendEmail(e) {\n      e.preventDefault();\n    } // donate = () => {\n    //     this.state.contract.methods.donate(parseInt(this.state.campaign.id), this.state.email)\n    //     .send({from: this.state.account, value: parseFloat(this.state.amount)*(10**18)}).once('receipt', (receipt) => {\n    //         this.mintNFT(JSON.stringify(receipt))\n    //     })\n    //     .then(() => {\n    //         var templateParams = {\n    //             user_email: this.state.email,\n    //             donation_amount: this.state.amount,\n    //             campaign_name: this.state.campaign.name,\n    //         };\n    //     emailjs.send('service_7ksffb7', 'template_4nal1hg', templateParams, 'user_2AtKMM5Ljcoy0GZ33Dhia')\n    //         .then(function(response) {\n    //             console.log('SUCCESS!', response.status, response.text);\n    //         }, function(error) {\n    //             console.log('FAILED...', error);\n    //         });\n    //         var amount1 = parseFloat(this.state.amount) * (10**18)\n    //         if((parseInt(this.state.campaign.raised)-amount1) < parseInt(this.state.campaign.goal) && (parseInt(this.state.campaign.raised) + amount1) >= parseInt(this.state.campaign.goal)){\n    //             this.alertEveryone()\n    //         }\n    //     })\n    // }\n\n  }, {\n    key: \"alertEveryone\",\n    value: function () {\n      var _alertEveryone = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var mails, mailsSet, len, i, templateParams;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.state.contract.methods.getMailsById(this.state.campaign.id).call();\n\n              case 2:\n                mails = _context5.sent;\n                mailsSet = _toConsumableArray(new Set(mails));\n                len = mails.length;\n\n                for (i = 0; i < len; i++) {\n                  templateParams = {\n                    user_email: mailsSet[i],\n                    campaign_name: this.state.campaign.name\n                  };\n                  emailjs.send('service_51ifv2q', 'template_3ai231s', templateParams, 'user_AzzxvRUXgtcUIpvSjfoOA').then(function (response) {\n                    console.log(\"SUCCESS!\", response.status, response.text);\n                  }, function (error) {\n                    console.log('FAILED...', error);\n                  });\n                }\n\n              case 6:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function alertEveryone() {\n        return _alertEveryone.apply(this, arguments);\n      }\n\n      return alertEveryone;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 17\n        }\n      }, \"Donate ETH\"), /*#__PURE__*/React.createElement(\"input\", {\n        placeholder: \"AMOUNT\",\n        onChange: function onChange(evt) {\n          return _this2.upadateAmount(evt);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: this.donateETH,\n        style: {\n          color: 'black',\n          border: '1px solid black'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 17\n        }\n      }, \"DONATE ETH\"), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 17\n        }\n      }, \"Donate ERC20-Token\"), /*#__PURE__*/React.createElement(\"input\", {\n        placeholder: \"AMOUNT\",\n        onChange: function onChange(evt) {\n          return _this2.updateERCAmount(evt);\n        },\n        style: {\n          width: \"300px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"input\", {\n        placeholder: \"Token address\",\n        onChange: function onChange(evt) {\n          return _this2.updateTokenAddress(evt);\n        },\n        style: {\n          width: \"300px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: this.donate,\n        style: {\n          color: 'black',\n          border: '1px solid black'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 17\n        }\n      }, \"DONATE ERC\"));\n    }\n  }]);\n\n  return Campaign;\n}(Component);\n\nexport default Campaign;","map":{"version":3,"sources":["C:/Users/Luka/Desktop/SaveChildrenV2.0/src/pages/Campaign.js"],"names":["React","Component","Web3","SupportChildren","ReactDOM","emailjs","NFT","Campaign","props","donate","state","contract","methods","send","from","account","donateETH","web3","window","erc20instance","eth","Contract","approve","then","value","parseFloat","amount","mintNFT","receipt","contractNFT","mint","campaign","email","date","ercAmount","tokenAddress","evt","setState","target","loadWeb3","loadBlockchainData","loadNFT","ethereum","enable","currentProvider","alert","getAccounts","accounts","net","getId","networkId","networkData","networks","address","abi","lastItem","location","pathname","split","pop","campaigns","parseInt","call","timeCreated","abiNFT","print","rec","e","preventDefault","getMailsById","id","mails","mailsSet","Set","len","length","i","templateParams","user_email","campaign_name","name","response","console","log","status","text","error","upadateAmount","color","border","updateERCAmount","width","updateTokenAddress"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Web3 from 'web3';\r\nimport SupportChildren from '../abis/SupportChildren.json'\r\nimport '../components/App.css';\r\nimport ReactDOM from \"react-dom\";\r\nimport emailjs from 'emailjs-com';\r\nimport NFT from '../abis/NFT.json';\r\n\r\nclass Campaign extends Component{\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            contract: null,\r\n            contractNFT: null,\r\n            account: '',\r\n            campaign: '',\r\n            amount: '',\r\n            email: '',\r\n            date: '',\r\n            ercAmount: '',\r\n            tokenAddress: ''\r\n        }\r\n    }\r\n\r\n    updateEmail(evt) {\r\n        this.setState({\r\n            email: evt.target.value\r\n        })\r\n\r\n    }\r\n\r\n    async componentWillMount() {\r\n        await this.loadWeb3()\r\n        await this.loadBlockchainData()\r\n        // await this.printDonors()\r\n        await this.loadNFT()\r\n    }\r\n\r\n\r\n    async loadWeb3() {\r\n        if (window.ethereum) {\r\n            window.web3 = new Web3(window.ethereum)\r\n            await window.ethereum.enable()\r\n        }\r\n        else if (window.web3) {\r\n            window.web3 = new Web3(window.web3.currentProvider)\r\n        }\r\n        else {\r\n            window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\r\n        }\r\n    }\r\n\r\n\r\n    async loadBlockchainData() {\r\n        const web3 = window.web3\r\n        // Load account\r\n        const accounts = await web3.eth.getAccounts()\r\n        this.setState({account: accounts[0]})\r\n\r\n        const networkId = await web3.eth.net.getId()\r\n        const networkData = SupportChildren.networks[networkId]\r\n\r\n        if(networkData) {\r\n            const address = networkData.address\r\n            const abi = SupportChildren.abi\r\n            const contract = new web3.eth.Contract(abi, address)\r\n\r\n            const lastItem = window.location.pathname.split(\"/\").pop()\r\n            const campaign = await contract.methods.campaigns(parseInt(lastItem)).call()\r\n\r\n\r\n            this.setState({ \r\n                contract: contract, \r\n                campaign: campaign,\r\n                date: campaign.timeCreated\r\n            })\r\n\r\n        } else {\r\n            window.alert('Smart contract not deployed to detected network')\r\n        }\r\n\r\n    }\r\n\r\n    // async printDonors(){\r\n    //     const mainDiv = document.getElementById('donors')\r\n    //     const len = await this.state.contract.methods.getDonorsLength(this.state.campaign.id).call()\r\n    //     const donors = await this.state.contract.methods.getDonors(this.state.campaign.id).call()\r\n    //     for(var i =0;i<Math.min(3, len);i++){\r\n    //         const donation = donors[i]\r\n    //         const li = document.createElement('li')\r\n\r\n    //         const image = document.createElement('img')\r\n    //         image.src = \"https://cdn.discordapp.com/attachments/837326649074516048/867532401155899421/ethlogo.png\"\r\n\r\n    //         const p = document.createElement('p')\r\n    //         p.innerHTML = donation.amount/(10**18) + \" ETH\"\r\n\r\n    //         const h = document.createElement('h3')\r\n    //         h.innerHTML = donation.from\r\n\r\n    //         li.appendChild(image)\r\n    //         li.appendChild(p)\r\n    //         li.appendChild(h)\r\n    //         mainDiv.appendChild(li)\r\n    //     }\r\n\r\n    // }\r\n\r\n    async loadNFT(){\r\n        const web3 = window.web3\r\n        // Load account\r\n        const accounts = await web3.eth.getAccounts()\r\n\r\n        const networkId = await web3.eth.net.getId()\r\n        const networkData = NFT.networks[networkId]\r\n\r\n        if(networkData) {\r\n            const address = networkData.address\r\n            const abiNFT = NFT.abi\r\n            const contractNFT = new web3.eth.Contract(abiNFT, address)\r\n\r\n            const rec = await contractNFT.methods.print().call()\r\n\r\n            this.setState({ \r\n                contractNFT: contractNFT\r\n            })\r\n\r\n        } else {\r\n            window.alert('Smart contract not deployed to detected network')\r\n        }\r\n\r\n    }\r\n\r\n    upadateAmount(evt) {\r\n        this.setState({\r\n          amount: evt.target.value\r\n        });\r\n    }\r\n\r\n    updateERCAmount(evt){\r\n        this.setState({\r\n            ercAmount: evt.target.value\r\n        });\r\n    }\r\n\r\n    updateTokenAddress(evt){\r\n        this.setState({\r\n            tokenAddress: evt.target.value\r\n        });\r\n    }\r\n\r\n    sendEmail(e) {\r\n        e.preventDefault();\r\n\r\n    }\r\n\r\n    // donate = () => {\r\n    //     this.state.contract.methods.donate(parseInt(this.state.campaign.id), this.state.email)\r\n    //     .send({from: this.state.account, value: parseFloat(this.state.amount)*(10**18)}).once('receipt', (receipt) => {\r\n    //         this.mintNFT(JSON.stringify(receipt))\r\n    //     })\r\n    //     .then(() => {\r\n    //         var templateParams = {\r\n    //             user_email: this.state.email,\r\n    //             donation_amount: this.state.amount,\r\n    //             campaign_name: this.state.campaign.name,\r\n    //         };\r\n    //     emailjs.send('service_7ksffb7', 'template_4nal1hg', templateParams, 'user_2AtKMM5Ljcoy0GZ33Dhia')\r\n    //         .then(function(response) {\r\n    //             console.log('SUCCESS!', response.status, response.text);\r\n    //         }, function(error) {\r\n    //             console.log('FAILED...', error);\r\n    //         });\r\n    //         var amount1 = parseFloat(this.state.amount) * (10**18)\r\n    //         if((parseInt(this.state.campaign.raised)-amount1) < parseInt(this.state.campaign.goal) && (parseInt(this.state.campaign.raised) + amount1) >= parseInt(this.state.campaign.goal)){\r\n    //             this.alertEveryone()\r\n    //         }\r\n\r\n    //     })\r\n    // }\r\n\r\n    donate = () => {\r\n        this.state.contract.methods.donate(0, \"0xaFF4481D10270F50f203E0763e2597776068CBc5\", 10).send({from: this.state.account})\r\n    }\r\n\r\n    donateETH = () => {\r\n        const web3 = window.web3\r\n        var erc20instance = new web3.eth.Contract([\r\n            {\r\n              \"constant\": true,\r\n              \"inputs\": [],\r\n              \"name\": \"name\",\r\n              \"outputs\": [\r\n                {\r\n                  \"name\": \"\",\r\n                  \"type\": \"string\"\r\n                }\r\n              ],\r\n              \"payable\": false,\r\n              \"type\": \"function\"\r\n            },\r\n            {\r\n              \"constant\": true,\r\n              \"inputs\": [],\r\n              \"name\": \"decimals\",\r\n              \"outputs\": [\r\n                {\r\n                  \"name\": \"\",\r\n                  \"type\": \"uint8\"\r\n                }\r\n              ],\r\n              \"payable\": false,\r\n              \"type\": \"function\"\r\n            },\r\n            {\r\n              \"constant\": true,\r\n              \"inputs\": [\r\n                {\r\n                  \"name\": \"_owner\",\r\n                  \"type\": \"address\"\r\n                }\r\n              ],\r\n              \"name\": \"balanceOf\",\r\n              \"outputs\": [\r\n                {\r\n                  \"name\": \"balance\",\r\n                  \"type\": \"uint256\"\r\n                }\r\n              ],\r\n              \"payable\": false,\r\n              \"type\": \"function\"\r\n            },\r\n            {\r\n              \"constant\": true,\r\n              \"inputs\": [],\r\n              \"name\": \"symbol\",\r\n              \"outputs\": [\r\n                {\r\n                  \"name\": \"\",\r\n                  \"type\": \"string\"\r\n                }\r\n              ],\r\n              \"payable\": false,\r\n              \"type\": \"function\"\r\n            }\r\n          ],\"0xaFF4481D10270F50f203E0763e2597776068CBc5\")\r\n        erc20instance.methods.approve(\"0x80F8F287344fb123Aef3C3B76d29508B3eEE58F2\", 100).send({from: this.state.account})\r\n        .then(\r\n            this.state.contract.methods.donateETH(0).send({from: this.state.account, value: parseFloat(this.state.amount)*(10**18)})\r\n        )\r\n    }\r\n\r\n    async alertEveryone(){\r\n        const mails = await this.state.contract.methods.getMailsById(this.state.campaign.id).call()\r\n        const mailsSet = [...new Set(mails)]\r\n        const len = mails.length\r\n        for(var i =0;i<len;i++){\r\n            var templateParams = {\r\n                user_email: mailsSet[i],\r\n                campaign_name: this.state.campaign.name\r\n            };\r\n            emailjs.send('service_51ifv2q', 'template_3ai231s', templateParams, 'user_AzzxvRUXgtcUIpvSjfoOA')\r\n            .then(function(response){\r\n                console.log(\"SUCCESS!\", response.status, response.text);\r\n            }, function(error){\r\n                console.log('FAILED...', error);\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    mintNFT = (receipt) => {\r\n        this.state.contractNFT.methods.mint(receipt).send({from: this.state.account})\r\n    }\r\n\r\n\r\n    render(){\r\n\r\n        return(\r\n            <div>\r\n                <p>Donate ETH</p>\r\n                <input placeholder= \"AMOUNT\" onChange = {evt => this.upadateAmount(evt)}></input>\r\n                <button onClick = {this.donateETH} style = {{color: 'black', border: '1px solid black'}}>DONATE ETH</button>\r\n\r\n                <p>Donate ERC20-Token</p>\r\n                <input placeholder = \"AMOUNT\" onChange = {evt => this.updateERCAmount(evt)} style = {{width: \"300px\"}}></input>\r\n                <input placeholder = \"Token address\" onChange = {evt => this.updateTokenAddress(evt)} style = {{width: \"300px\"}}></input>\r\n                <button onClick = {this.donate} style = {{color: 'black', border: '1px solid black'}}>DONATE ERC</button>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Campaign;"]},"metadata":{},"sourceType":"module"}